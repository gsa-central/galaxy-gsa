{"version":3,"sources":["../node_modules/bio-pv/bio-pv.js","pv.js"],"names":["window","bundleEntries","load","options","settings","chart","viewer","pv","Viewer","document","getElementById","targets","quality","get","width","height","antialias","outline","xhr","XMLHttpRequest","open","dataset","download_url","onload","status","Object","structure","io","pdb","response","viewer_options","entries","attributes","key","value","replace","clear","renderAs","mode","centerOn","autoZoom","state","process","resolve","send","onresize","fitParent"],"mappings":";;AAogTA,IAAA,GA5/SA,SAAA,EAAA,GACA,GAAA,mBAAA,GAAA,EAAA,IACA,EAAA,GAAA,QACA,GAAA,iBAAA,QACA,QAAA,IACA,iBAAA,SACA,OAAA,QAAA,aAEA,CACA,IAAA,EAAA,IACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,MAAA,EAAA,MACA,EAAA,IAAA,EAAA,IACA,EAAA,UAAA,EAAA,UACA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,EAAA,MApBA,CAsBA,KAAA,WAEA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAqoPA,EA+1DA,OAn+SA,EAAA,WACA,IAAA,EAAA,GACA,IAAA,EACA,IAAA,EAAA,KAEA,IAAA,EACA,IAAA,EAAA,oBAAA,aAAA,aAAA,MAEA,IAAA,EACA,IAAA,EAAA,KAAA,OAEA,IAAA,EAAA,CACA,mBAAA,SAAA,GACA,EAAA,IAEA,EAAA,SAAA,EACA,IA2KA,EA3KA,EAAA,GACA,EAAA,OAAA,WACA,IAAA,EAAA,IAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,EAAA,MAAA,SAAA,GACA,IAAA,EAAA,IAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,WAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,EAAA,KAAA,SAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,EAAA,IAAA,SAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,SAAA,SAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,IAAA,EAAA,SACA,EAAA,SAAA,SAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,IAAA,EAAA,SACA,EAAA,OAAA,SAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,IAAA,EAAA,OACA,EAAA,IAAA,SAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,GAEA,EAAA,IAAA,SAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,GAEA,EAAA,MAAA,SAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,GAEA,EAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,GAEA,EAAA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GACA,OAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,KAAA,EAAA,SACA,EAAA,gBAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,QAAA,EAAA,gBACA,EAAA,OAAA,SAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,OAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,IAAA,EAAA,OACA,EAAA,cAAA,SAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,OAAA,EAAA,cACA,EAAA,OAAA,SAAA,EAAA,GAIA,OAHA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,GAEA,EAAA,UAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAOA,OANA,EAAA,IACA,EAAA,EAAA,KAAA,KAAA,GACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,GAEA,GAEA,EAAA,IAAA,SAAA,EAAA,GACA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAEA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,GAEA,EAAA,OAAA,SAAA,EAAA,GACA,EAAA,GAAA,EACA,IAAA,EAAA,EAAA,IAAA,KAAA,GACA,EAAA,EAAA,IAAA,EACA,EAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAIA,OAHA,EAAA,GAAA,KAAA,IAAA,GAAA,EACA,EAAA,GAAA,KAAA,IAAA,GAAA,EACA,EAAA,GAAA,EAAA,EACA,GAEA,EAAA,cAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IACA,GAEA,EAAA,cAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAIA,OAHA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,GAEA,EAAA,cAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAIA,OAHA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,GAEA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAYA,IAXA,IACA,EAAA,GAEA,IACA,EAAA,GAGA,EADA,EACA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,QAEA,EAAA,OAEA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GAEA,OAAA,IAGA,EAAA,IAAA,SAAA,GACA,MAAA,QAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAEA,EAAA,KAAA,EACA,IAAA,EAAA,CACA,OAAA,WACA,IAAA,EAAA,IAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,MAAA,SAAA,GACA,IAAA,EAAA,IAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,GAEA,WAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,KAAA,SAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,GAEA,IAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,IAAA,SAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,GAEA,SAAA,SAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,IAEA,EAAA,IAAA,EAAA,SACA,EAAA,SAAA,SAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,IAAA,EAAA,SACA,EAAA,OAAA,SAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,IAAA,EAAA,OACA,EAAA,IAAA,SAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,GAEA,EAAA,IAAA,SAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,IACA,GAEA,EAAA,MAAA,SAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,GAEA,EAAA,YAAA,SAAA,EAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EACA,GAEA,EAAA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GACA,OAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,KAAA,EAAA,SACA,EAAA,gBAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,QAAA,EAAA,gBACA,EAAA,OAAA,SAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,OAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,IAAA,EAAA,OACA,EAAA,cAAA,SAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,OAAA,EAAA,cACA,EAAA,OAAA,SAAA,EAAA,GAKA,OAJA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,GAEA,EAAA,UAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAQA,OAPA,EAAA,IACA,EAAA,EAAA,KAAA,KAAA,GACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,GAEA,GAEA,EAAA,IAAA,SAAA,EAAA,GACA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAEA,EAAA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,GAEA,EAAA,OAAA,SAAA,EAAA,GAQA,OAPA,EAAA,GAAA,EACA,EAAA,GAAA,IACA,EAAA,GAAA,IACA,EAAA,GAAA,IACA,EAAA,GAAA,IACA,EAAA,UAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,GAEA,EAAA,cAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EACA,GAEA,EAAA,ccA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAUA,OATA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAEA,YAAA,SAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,OAAA,GAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAEA,SAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAUA,OATA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,IAEA,EAAA,IAAA,EAAA,SACA,EAAA,UAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAUA,OATA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAUA,OATA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,EAAA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAUA,OATA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,GACA,GAEA,EAAA,ecA,EAAA,IAAA,SAAA,GACA,MAAA,QAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAEA,EAAA,KAAA,EACA,IAAA,EAAA,CACA,OAAA,WACA,IAAA,EAAA,IAAA,EAAA,IAiBA,OAhBA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,GAEA,WAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,IAgBA,OAfA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,GAEA,MAAA,SAAA,GACA,IAAA,EAAA,IAAA,EAAA,IAiBA,OAhBA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,GAEA,KAAA,SAAA,EAAA,GAiBA,OAhBA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,GAEA,SAAA,SAAA,GAiBA,OAhBA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,GAEA,UAAA,SAAA,EAAA,GACA,GAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,OAEA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,IACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IAEA,OAAA,GAEA,OAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,OAAA,GAGA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,GAnBA,MAqBA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAiBA,OAhiBA,OAhBA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,IAEA,EAAA,IAAA,EAAA,SACA,EAAA,UAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAoCA,OAnCA,IAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,MAEA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,GAEA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAiBA,OAhBA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,GAEA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,OAAA,KAAA,IAAA,GAAA,EACA,MAGA,GADA,EAAA,EAAA,EAEA,GAAA,EACA,GAAA,EACA,EAAA,KAAA,IAAA,GAEA,EAAA,GADA,EAAA,KAAA,IAAA,IAEA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,IAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,KAEA,IAEA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAmBA,OAlBA,IAAA,IACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,KAEA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAmBA,OAlBA,IAAA,IACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,KAEA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAmBA,OAlBA,IAAA,IACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAAA,KAEA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,wBAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAiBA,OAhBA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,GACA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EACA,GAEA,EAAA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAiBA,OAhBA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,GACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,GAEA,EAAA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAiBA,OAhBA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,GAAA,EACA,EAAA,KAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EACA,GAEA,EAAA,YAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAiBA,OAhBA,EAAA,GAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,GAAA,EACA,EAAA,KAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EACA,GAEA,EAAA,MAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAiBA,OAhBA,EAAA,IAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,GAAA,EACA,EAAA,KAAA,EAAA,GAAA,EACA,EAAA,IAAA,EACA,GAEA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,OAAA,KAAA,IAAA,EAAA,GAAA,GAAA,KAAA,IAAA,EAAA,GAAA,GAAA,KAAA,IAAA,EAAA,GAAA,EACA,EAAA,SAAA,IAEA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAKA,EAAA,GADA,GAHA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAIA,GAFA,GAAA,GAGA,EAAA,GAJA,GAAA,GAIA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAOA,GADA,EAAA,EAAA,EAEA,GAAA,EACA,GAAA,IAPA,EAAA,EACA,EAAA,EACA,EAAA,GAOA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAOA,GADA,EAAA,EAAA,EAEA,GAAA,EACA,GAAA,IAPA,EAAA,EACA,EAAA,EACA,EAAA,GAOA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,IAAA,EACA,IAEA,EAAA,IAAA,SAAA,GACA,MAAA,QAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,KAAA,EAAA,IAAA,KAEA,EAAA,KAAA,EACA,IAUA,EACA,EACA,EA2BA,EAiIA,EAxKA,EAAA,GAiNA,OAhNA,EAAA,OAAA,WACA,IAAA,EAAA,IAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,EAAA,YACA,EAAA,EAAA,SACA,EAAA,EAAA,WAAA,EAAA,EAAA,GACA,EAAA,EAAA,WAAA,EAAA,EAAA,GACA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,IAAA,EAAA,GACA,OAAA,GAAA,SACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,MACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,GACA,EAAA,aAAA,EAAA,EAAA,KAAA,IACA,GACA,EAAA,SACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,IAEA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EACA,EAAA,UAAA,EAAA,MAIA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,GAUA,OATA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,UAAA,EAAA,EAAA,SAAA,EAAA,MAGA,EAAA,MAAA,EAAA,MACA,EAAA,WAAA,EAAA,WACA,EAAA,KAAA,EAAA,KACA,EAAA,IAAA,EAAA,IACA,EAAA,SAAA,SAAA,GAKA,OAJA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,GAEA,EAAA,aAAA,SAAA,EAAA,EAAA,GACA,GAAA,GACA,IAAA,EAAA,KAAA,IAAA,GAKA,OAJA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,KAAA,IAAA,GACA,GAEA,EAAA,IAAA,EAAA,IACA,EAAA,SAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,IAAA,EAAA,SACA,EAAA,MAAA,EAAA,MACA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAKA,OAJA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAKA,OAJA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,KAAA,IAAA,GAAA,EAAA,KAAA,IAAA,GAKA,OAJA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAKA,OAJA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,KAAA,KAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,GAEA,EAAA,IAAA,EAAA,IACA,EAAA,KAAA,EAAA,KACA,EAAA,MAAA,SAAA,EAAA,EAAA,EAAA,GACA,IACA,EAAA,EAAA,EAAA,EAAA,EADA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAuBA,OArBA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,GAEA,EAAA,EAAA,MACA,EAAA,KAAA,KAAA,GACA,EAAA,KAAA,IAAA,GACA,EAAA,KAAA,KAAA,EAAA,GAAA,GAAA,EACA,EAAA,KAAA,IAAA,EAAA,GAAA,IAEA,EAAA,EAAA,EACA,EAAA,GAEA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,GAEA,EAAA,OAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAKA,OAJA,EAAA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,GAAA,EAAA,EACA,GAEA,EAAA,UAAA,SAAA,EAAA,GAKA,OAJA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,OAAA,EAAA,OACA,EAAA,IAAA,EAAA,OACA,EAAA,cAAA,EAAA,cACA,EAAA,OAAA,EAAA,cACA,EAAA,UAAA,EAAA,UACA,EAAA,UACA,EAAA,oBAAA,UAAA,IAAA,UAAA,CACA,EACA,EACA,IACA,CACA,EACA,EACA,GAEA,SAAA,EAAA,GACA,IACA,EADA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAEA,GAAA,EAAA,EACA,EAAA,KAAA,KAAA,EAAA,GACA,EAAA,GAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,MACA,CACA,IAAA,EAAA,EACA,EAAA,GAAA,EAAA,KACA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,EAAA,KACA,EAAA,GACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAEA,OAAA,IAGA,EAAA,IAAA,SAAA,GACA,MAAA,QAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAAA,EAAA,GAAA,KAEA,EAAA,KAAA,EACA,EAv3CA,GAy3CA,EAAA,WAEA,IAAA,EAAA,EAAA,KACA,EAAA,CACA,IAAA,IACA,EAAA,EAAA,IACA,EAAA,IAAA,OAAA,EAAA,OACA,EAAA,IAAA,MAAA,EAAA,MACA,EAAA,IAAA,KAAA,EAAA,KACA,EAAA,IAAA,WAAA,EAAA,WACA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAKA,OAJA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EACA,GAEA,IAAA,EAAA,CACA,MAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,MAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,KAAA,EAAA,WAAA,GAAA,GAAA,GAAA,GACA,UAAA,EAAA,WAAA,GAAA,GAAA,GAAA,GACA,SAAA,EAAA,WAAA,GAAA,GAAA,GAAA,GACA,IAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,QAAA,EAAA,WAAA,GAAA,EAAA,EAAA,GACA,SAAA,EAAA,WAAA,EAAA,GAAA,GAAA,GACA,MAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,UAAA,EAAA,WAAA,EAAA,GAAA,EAAA,GACA,WAAA,EAAA,WAAA,GAAA,EAAA,GAAA,GACA,KAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,SAAA,EAAA,WAAA,EAAA,EAAA,GAAA,GACA,UAAA,EAAA,WAAA,GAAA,GAAA,EAAA,GACA,OAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,WAAA,EAAA,WAAA,GAAA,GAAA,EAAA,GACA,YAAA,EAAA,WAAA,EAAA,EAAA,GAAA,GACA,KAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,SAAA,EAAA,WAAA,EAAA,GAAA,GAAA,GACA,UAAA,EAAA,WAAA,GAAA,EAAA,EAAA,GACA,QAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,YAAA,EAAA,WAAA,GAAA,EAAA,GAAA,GACA,aAAA,EAAA,WAAA,EAAA,GAAA,EAAA,GACA,OAAA,EAAA,WAAA,EAAA,GAAA,EAAA,GACA,WAAA,EAAA,WAAA,GAAA,IAAA,EAAA,GACA,YAAA,EAAA,WAAA,EAAA,IAAA,GAAA,IAoDA,SAAA,EAAA,EAAA,GACA,KAAA,QAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EACA,KAAA,QAAA,GAAA,EAAA,SAAA,KAAA,QAAA,IAEA,KAAA,OAAA,EAvDA,EAAA,QAAA,SAAA,GACA,IAAA,EAAA,EAAA,EAAA,EACA,GAAA,IAAA,EAAA,QAAA,IAAA,EAAA,OAAA,CACA,EAAA,SAAA,EAAA,GAAA,IACA,EAAA,SAAA,EAAA,GAAA,IACA,EAAA,SAAA,EAAA,GAAA,IACA,EAAA,GACA,IAAA,EAAA,SACA,EAAA,SAAA,EAAA,GAAA,KAGA,OAAA,EAAA,WADA,EAAA,GACA,EADA,EAAA,GACA,EADA,EAAA,GACA,EADA,EAAA,GACA,GAEA,GAAA,IAAA,EAAA,QAAA,IAAA,EAAA,OAAA,CACA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,IACA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,IACA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,IACA,EAAA,IACA,IAAA,EAAA,SACA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,KAGA,OAAA,EAAA,WADA,EAAA,IACA,EADA,EAAA,IACA,EADA,EAAA,IACA,EADA,EAAA,IACA,KAGA,EAAA,gBAAA,SAAA,GACA,QAAA,IAAA,kBACA,EAAA,EACA,EAAA,iBAEA,EAAA,SAAA,SAAA,GACA,GAAA,iBAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,QAAA,IAAA,EACA,OAAA,EAEA,GAAA,EAAA,OAAA,GAAA,MAAA,EAAA,GACA,OAAA,EAAA,QAAA,GAGA,OAAA,IAAA,EAAA,OACA,CACA,EAAA,GACA,EAAA,GACA,EAAA,GACA,GAGA,GASA,EAAA,UAAA,CACA,QAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,OAAA,GACA,OAAA,EAAA,KAAA,EAAA,KAAA,QAAA,IAEA,GAAA,GAAA,KAAA,OAAA,KAAA,OAAA,OAAA,GACA,OAAA,EAAA,KAAA,EAAA,KAAA,QAAA,KAAA,OAAA,OAAA,IAGA,IADA,IAAA,EAAA,EACA,EAAA,EAAA,EAAA,KAAA,OAAA,UACA,KAAA,OAAA,GAAA,KADA,EAIA,EAAA,EAEA,IAAA,EAAA,EAAA,EACA,EAAA,KAAA,OAAA,GAEA,GAAA,EAAA,IADA,KAAA,OAAA,GACA,GACA,OAAA,EAAA,IAAA,EAAA,KAAA,QAAA,GAAA,KAAA,QAAA,GAAA,KAGA,IAAA,EAAA,GACA,EAAA,SAAA,SAAA,EAAA,GACA,GAAA,iBAAA,EACA,OAAA,EAAA,GAGA,GAAA,WADA,EAAA,GAAA,SACA,CACA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,KAAA,EAAA,GAAA,EAAA,OAAA,IAGA,OAAA,IAAA,EAAA,EAAA,IAEA,IAAA,EAAA,EAAA,SA+BA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,SAAA,EACA,KAAA,WAAA,EACA,KAAA,SAAA,EAjCA,EAAA,cAAA,WACA,EAAA,QAAA,EAAA,CACA,MACA,SACA,QACA,SAEA,EAAA,KAAA,EAAA,CACA,WACA,YAEA,EAAA,OAAA,EAAA,CACA,aACA,cAEA,EAAA,MAAA,EAAA,CACA,YACA,aAEA,EAAA,aAAA,EAAA,CACA,QACA,SACA,QAEA,EAAA,QAAA,EAAA,CACA,MACA,QACA,UAQA,EAAA,UAAA,CACA,MAAA,SAAA,GACA,KAAA,YACA,KAAA,WAAA,IAGA,IAAA,SAAA,GACA,KAAA,UACA,KAAA,SAAA,KAIA,EAAA,QAAA,EACA,EAAA,QAAA,SAAA,GAEA,OADA,EAAA,EAAA,SAAA,GAAA,SACA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,IACA,KAAA,OAEA,IAAA,EAAA,CACA,EAAA,CACA,EACA,EACA,GAEA,EAAA,CACA,IACA,IACA,KAEA,EAAA,CACA,IACA,GACA,GAEA,EAAA,CACA,EACA,IACA,GAEA,EAAA,CACA,IACA,IACA,KAEA,GAAA,CACA,IACA,IACA,KAEA,GAAA,CACA,GACA,IACA,GAEA,EAAA,CACA,GACA,EACA,KAEA,GAAA,CACA,EACA,EACA,GAEA,GAAA,CACA,EACA,EACA,GAEA,GAAA,CACA,EACA,EACA,GAEA,GAAA,CACA,EACA,EACA,GAEA,GAAA,CACA,EACA,EACA,GAEA,EAAA,CACA,EACA,GACA,GAEA,EAAA,CACA,IACA,IACA,GAEA,EAAA,CACA,EACA,IACA,KAEA,GAAA,CACA,IACA,EACA,GAEA,GAAA,CACA,IACA,EACA,GAEA,EAAA,CACA,IACA,EACA,GAEA,GAAA,CACA,IACA,EACA,GAEA,GAAA,CACA,IACA,EACA,GAEA,GAAA,CACA,IACA,EACA,GAEA,GAAA,CACA,EACA,IACA,GAEA,GAAA,CACA,EACA,IACA,GAEA,GAAA,CACA,EACA,IACA,GAEA,GAAA,CACA,EACA,IACA,GAEA,GAAA,CACA,EACA,IACA,GAEA,GAAA,CACA,GACA,GACA,IAEA,GAAA,CACA,IACA,IACA,IAGA,EAAA,UAAA,WACA,OAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,UACA,EAAA,EAAA,GACA,YAAA,IAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EACA,IAEA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EACA,IACA,KAAA,OAEA,EAAA,KAAA,WACA,OAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,UAAA,MACA,IAAA,IAKA,OAJA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,GAAA,GAEA,IAAA,IAKA,OAJA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,GAAA,GAEA,IAAA,IAKA,OAJA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,GAAA,KAGA,KAAA,OAEA,EAAA,QAAA,SAAA,GA8CA,OA7CA,IACA,EAAA,EAAA,YAEA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,KAAA,YAAA,EAAA,UAAA,QAAA,aACA,IAAA,IAEA,GADA,EAAA,UAAA,QACA,EAAA,KAAA,EAAA,GAAA,EAAA,KAEA,IAAA,EAAA,CACA,EACA,EACA,EACA,GAEA,EAAA,QAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,IACA,SAAA,GACA,IAAA,EAAA,EAAA,SACA,KAAA,YAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GAAA,iBACA,GAAA,IAAA,EAAA,OAAA,CAIA,IADA,IAAA,EAAA,EAAA,GAAA,UAAA,GAAA,QAAA,EAAA,EAAA,GAAA,UAAA,EAAA,GAAA,SAAA,GAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,GAAA,SACA,EAAA,KAAA,IAAA,EAAA,EAAA,UAAA,EAAA,SAAA,GAAA,SAEA,IAAA,IACA,KAAA,YAAA,EAAA,GAAA,QAAA,CACA,EACA,OAIA,WACA,KAAA,YAAA,QAIA,EAAA,aAAA,SAAA,EAAA,GAiEA,OAhEA,IACA,EAAA,EAAA,YAEA,IACA,EAAA,EAAA,SAAA,cAEA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,UAAA,QACA,EAAA,KAAA,YAAA,EAAA,UAAA,QAAA,QACA,EAAA,EAAA,QAAA,GACA,IAAA,IAAA,EAKA,OAJA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,QACA,EAAA,EAAA,GAAA,EAAA,IAGA,IAAA,EAAA,EACA,EAAA,IAEA,OAAA,EAAA,MACA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAEA,IAAA,EAAA,CACA,EACA,EACA,EACA,GAEA,EAAA,QAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,IACA,SAAA,GACA,IAAA,EAAA,EAAA,SACA,KAAA,YAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CAMA,IALA,IAAA,EAAA,EAAA,GAAA,WACA,EAAA,KACA,EAAA,GACA,EAAA,EACA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GAAA,KACA,MAAA,GACA,MAAA,GACA,IAEA,EAAA,EAAA,GAAA,UAAA,IAEA,EAAA,EACA,EAAA,EAAA,GAAA,SAAA,GAEA,EAAA,EAEA,KAAA,YAAA,EAAA,GAAA,QAAA,CACA,QAAA,EACA,IAAA,KAGA,WACA,KAAA,YAAA,QAIA,EAAA,QAAA,SAAA,GA4BA,OA3BA,IACA,EAAA,EAAA,YAEA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,IACA,EADA,KAAA,aAAA,EAAA,UAAA,QAAA,QACA,KAAA,MACA,EAAA,CACA,EACA,EACA,EACA,GAEA,EAAA,QAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,IACA,SAAA,GACA,IAAA,EAAA,EAAA,SACA,KAAA,aAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,KAAA,aAAA,EAAA,GAAA,QAAA,EAEA,KAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,GAAA,GACA,WACA,KAAA,aAAA,QAqBA,IACA,EADA,GACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,QAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,KAGA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAIA,OAHA,IACA,EAAA,EAAA,YAEA,IAAA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,KAAA,OAAA,KAAA,OACA,GAAA,EAAA,GAAA,KAAA,GAAA,KAAA,OAAA,KAAA,KAAA,KAAA,OAEA,EAAA,EAAA,EAAA,EAAA,IACA,SAAA,GACA,QAAA,IAAA,EAGA,OAFA,KAAA,KAAA,EAAA,QACA,KAAA,KAAA,EAAA,IAGA,EA3CA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KACA,EAAA,KAUA,OATA,EAAA,GAAA,SAAA,GACA,IAAA,EAAA,EAAA,KAAA,GACA,OAAA,GAAA,OAAA,GAIA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,IAJA,EAAA,EAAA,IAMA,CACA,IAAA,EACA,IAAA,GA6BA,CAAA,EAAA,EAAA,GACA,KAAA,KAAA,EAAA,IACA,KAAA,KAAA,EAAA,KACA,cAqCA,OAlCA,EAAA,WAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,WAAA,SAAA,GACA,OAAA,KAGA,EAAA,cAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,cAAA,SAAA,GACA,OAAA,EAAA,aAGA,EAAA,iBAAA,SAAA,EAAA,GAKA,IAJA,IAAA,EAAA,IAAA,aAAA,GAAA,GAAA,EAAA,OAAA,EAAA,GAAA,IACA,EAAA,EACA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EACA,GAAA,GAOA,OAJA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,gBACA,EAtmBA,GAwmBA,EAAA,WAEA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,OAAA,EACA,KAAA,MAAA,EACA,KAAA,KAAA,EAoBA,SAAA,IACA,KAAA,QAsDA,OAzEA,EAAA,UAAA,CACA,OAAA,SAAA,GACA,IAAA,EAAA,KAAA,MAIA,OAHA,QAAA,OAAA,KAAA,MAAA,KAAA,MACA,KAAA,QACA,KAAA,MAAA,SAAA,GAAA,EACA,GAEA,QAAA,WACA,OAAA,KAAA,MAAA,KAAA,MAEA,QAAA,WACA,KAAA,MAAA,QAAA,OAEA,OAAA,WACA,OAAA,KAAA,KAAA,KAAA,SAMA,EAAA,UAAA,CACA,OAAA,SACA,mBAAA,SAAA,GAGA,IAFA,IAAA,GAAA,EACA,EAAA,KACA,EAAA,EAAA,EAAA,KAAA,MAAA,SAAA,EAAA,CACA,IACA,EADA,KAAA,MAAA,GACA,SACA,GAAA,IAAA,OAAA,GAAA,EAAA,KACA,EAAA,EACA,EAAA,GAGA,IAAA,IAAA,EAAA,CACA,IAAA,EAAA,KAAA,MAAA,GAGA,OAFA,KAAA,MAAA,OAAA,EAAA,GACA,KAAA,aACA,EAEA,IAAA,EAAA,KAAA,kBACA,EAAA,EAAA,EACA,GAAA,EAAA,KAAA,OAEA,OADA,QAAA,MAAA,+BACA,KAEA,KAAA,kBAAA,EACA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAEA,OADA,KAAA,aACA,GAEA,MAAA,WACA,KAAA,SAAA,GACA,KAAA,kBAAA,EACA,KAAA,MAAA,GACA,KAAA,WAAA,GAEA,QAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,QAAA,SACA,KAAA,SAAA,GAEA,EAAA,MAAA,EAAA,OACA,KAAA,MAAA,KAAA,GACA,KAAA,aACA,QAAA,OAAA,KAAA,YAAA,GACA,KAAA,MAAA,OAAA,GAAA,IAAA,KAAA,YACA,KAAA,SAGA,YAAA,SAAA,GACA,OAAA,KAAA,SAAA,KAGA,EAjFA,GAmFA,EAAA,WAEA,IAAA,EAAA,GA2BA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAiGA,SAAA,EAAA,EAAA,QACA,IAAA,QAAA,IAAA,GACA,KAAA,QAAA,EACA,KAAA,KAAA,KAAA,KAAA,OAEA,KAAA,QAAA,EACA,KAAA,KAAA,EACA,KAAA,KAAA,GAqCA,OAxKA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,KAAA,EAAA,UACA,EAAA,UAAA,GAAA,EAAA,UAAA,GAEA,QAAA,IAAA,EAGA,IAAA,IAAA,KAAA,EACA,EAAA,UAAA,GAAA,EAAA,IAGA,EAAA,KAAA,SAAA,EAAA,GACA,OAAA,WACA,OAAA,EAAA,MAAA,EAAA,aAGA,EAAA,KAAA,SAAA,GACA,EAAA,GAAA,GACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,EACA,EAAA,eAAA,KACA,EAAA,GAAA,EAAA,IAGA,OAAA,GAKA,EAAA,aAAA,SAAA,EAAA,EAAA,GACA,GAAA,IAAA,EAAA,OACA,OAAA,EAEA,EAAA,GAAA,EAGA,IAFA,IAAA,EAAA,EAAA,EAAA,EAAA,OACA,EAAA,EAAA,GAAA,IACA,CACA,IAAA,EAAA,EAAA,GACA,GAAA,EAAA,EAAA,GACA,EAAA,MACA,CAAA,IAAA,EAAA,EAAA,GAGA,OAAA,EAFA,EAAA,EAIA,IAAA,EAAA,EAAA,GAAA,EACA,GAAA,IAAA,EACA,OAAA,EAEA,EAAA,EAEA,OAAA,GAEA,EAAA,0BAAA,SAAA,EAAA,EAAA,GAEA,GADA,EAAA,GAAA,EACA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,OAAA,GAAA,GACA,OAAA,EAIA,IAFA,IAAA,EAAA,EAAA,EAAA,EAAA,OACA,EAAA,EAAA,GAAA,IACA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EAEA,EAAA,EAEA,IAAA,EAAA,EAAA,GAAA,EACA,GAAA,IAAA,EACA,OAAA,EAEA,EAAA,IAGA,EAAA,qBAAA,SAAA,EAAA,EAAA,GAEA,GADA,EAAA,GAAA,EACA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,OAAA,GAAA,GACA,OAAA,EAAA,OAAA,EAEA,GAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,GAAA,GACA,OAAA,EAIA,IAFA,IAAA,EAAA,EAAA,EAAA,EAAA,OACA,EAAA,EAAA,GAAA,IACA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,GACA,EAAA,EAEA,EAAA,EAEA,IAAA,EAAA,EAAA,GAAA,EACA,GAAA,IAAA,EACA,OAAA,EAEA,EAAA,IAGA,EAAA,0BAAA,SAAA,EAAA,EAAA,GAEA,GADA,EAAA,GAAA,EACA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,OAAA,GAAA,GACA,OAAA,EAAA,OAAA,EAEA,GAAA,EAAA,EAAA,EAAA,IACA,OAAA,EAIA,IAFA,IAAA,EAAA,EAAA,EAAA,EAAA,OACA,EAAA,EAAA,GAAA,IACA,CAEA,EAAA,EADA,EAAA,IAEA,EAAA,EAEA,EAAA,EAEA,IAAA,EAAA,EAAA,GAAA,EACA,GAAA,IAAA,EACA,OAAA,EAEA,EAAA,IAaA,EAAA,UAAA,CACA,IAAA,WACA,OAAA,KAAA,MAEA,IAAA,WACA,OAAA,KAAA,MAEA,OAAA,WACA,OAAA,KAAA,KAAA,KAAA,MAEA,MAAA,WACA,OAAA,KAAA,QAEA,OAAA,WACA,MAAA,IAAA,KAAA,KAAA,KAAA,OAEA,OAAA,SAAA,GACA,KAAA,MAAA,EACA,KAAA,MAAA,GAEA,OAAA,SAAA,GACA,KAAA,QAQA,KAAA,KAAA,KAAA,KAAA,EACA,KAAA,QAAA,GARA,EAAA,KAAA,KACA,KAAA,KAAA,EACA,EAAA,KAAA,OACA,KAAA,KAAA,KAQA,EAAA,MAAA,EACA,EA3KA,GA6KA,EAAA,WAEA,SAAA,EAAA,GACA,GAAA,aAAA,SAAA,YAAA,WAAA,SAAA,YAAA,gBAAA,SAAA,WAEA,OADA,QAAA,MAAA,uDACA,EAEA,QAAA,IAAA,EACA,IACA,IAAA,EAAA,SAAA,cAAA,UACA,SAAA,OAAA,wBAAA,EAAA,WAAA,uBACA,MAAA,GACA,OAAA,EAGA,QAAA,EAEA,SAAA,EAAA,EAAA,GACA,KAAA,OAAA,EAAA,MACA,KAAA,WAAA,EAAA,UACA,KAAA,QAAA,EAAA,OACA,KAAA,SAAA,EACA,KAAA,eAAA,KACA,KAAA,YAAA,EACA,KAAA,cACA,KAAA,iBAAA,EAAA,gBACA,KAAA,yBAAA,EAAA,wBAwMA,OAtMA,EAAA,UAAA,CACA,YAAA,WACA,GAAA,KAAA,QAAA,CAGA,KAAA,SAAA,EACA,IAAA,EAAA,KAAA,OAAA,KAAA,SACA,EAAA,KAAA,QAAA,KAAA,SACA,KAAA,WAAA,EACA,KAAA,YAAA,EACA,KAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,MAAA,EACA,KAAA,QAAA,OAAA,EACA,KAAA,SAAA,GACA,KAAA,wBAAA,KAAA,YAGA,OAAA,SAAA,EAAA,GACA,IAAA,KAAA,QAAA,IAAA,KAAA,UAGA,KAAA,SAAA,EACA,KAAA,OAAA,EACA,KAAA,QAAA,IAEA,UAAA,WACA,IAAA,EAAA,KAAA,YAAA,wBACA,KAAA,OAAA,EAAA,MAAA,EAAA,SAEA,GAAA,WACA,OAAA,KAAA,KAEA,UAAA,WACA,OAAA,KAAA,QAAA,aAEA,aAAA,WACA,IACA,IAAA,EAAA,CACA,UAAA,KAAA,aAAA,KAAA,yBACA,uBAAA,GAEA,KAAA,IAAA,KAAA,QAAA,WAAA,qBAAA,GACA,MAAA,GAEA,OADA,QAAA,MAAA,sBAAA,IACA,EAEA,QAAA,KAAA,MACA,QAAA,MAAA,wBACA,IAIA,wBAAA,SAAA,GACA,IAAA,EAAA,EAAA,EAKA,EAFA,aAFA,KAAA,EAAA,GAAA,KAAA,WAEA,OADA,KAAA,EAAA,GAAA,KAAA,YACA,MAEA,KADA,SAAA,EAAA,KAAA,EAAA,KAEA,KAAA,QAAA,MAAA,gBAAA,EACA,KAAA,QAAA,MAAA,UAAA,EACA,KAAA,QAAA,MAAA,YAAA,EACA,KAAA,QAAA,MAAA,KAAA,WACA,KAAA,QAAA,OAAA,KAAA,aAEA,OAAA,WACA,IAAA,EAAA,EACA,IAAA,KAAA,eACA,OAAA,EAEA,IAAA,EAAA,KAAA,IAiBA,OAhBA,EAAA,uBAAA,YAAA,KAAA,2BAAA,KAAA,aACA,EAAA,GAEA,KAAA,WAAA,KAAA,OAAA,EACA,KAAA,YAAA,KAAA,QAAA,EACA,KAAA,SAAA,EACA,EAAA,GACA,KAAA,wBAAA,GAEA,EAAA,cAAA,KAAA,WACA,EAAA,eAAA,KAAA,YACA,EAAA,WAAA,KAAA,iBAAA,GAAA,KAAA,iBAAA,GAAA,KAAA,iBAAA,GAAA,GACA,EAAA,UAAA,GACA,EAAA,SAAA,EAAA,OACA,EAAA,OAAA,EAAA,WACA,EAAA,OAAA,EAAA,aACA,GAEA,kBAAA,SAAA,EAAA,EAAA,GACA,IAAA,EACA,EAAA,KAAA,IACA,GAAA,aAAA,EACA,EAAA,EAAA,aAAA,EAAA,qBACA,CAAA,GAAA,WAAA,EAIA,OADA,QAAA,MAAA,uCACA,KAHA,EAAA,EAAA,aAAA,EAAA,eAKA,IAAA,EAAA,EAAA,QAAA,eAAA,GAGA,OAFA,EAAA,aAAA,EAAA,GACA,EAAA,cAAA,GACA,EAAA,mBAAA,EAAA,EAAA,gBAKA,GAJA,QAAA,IAAA,GACA,QAAA,MAAA,EAAA,iBAAA,IACA,OAIA,WAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,IACA,EAAA,KAAA,kBAAA,EAAA,WAAA,GACA,EAAA,KAAA,kBAAA,EAAA,SAAA,GACA,EAAA,EAAA,gBAIA,GAHA,EAAA,aAAA,EAAA,GACA,EAAA,aAAA,EAAA,GACA,EAAA,YAAA,IACA,EAAA,oBAAA,EAAA,EAAA,aAGA,OAFA,QAAA,MAAA,gCACA,QAAA,MAAA,EAAA,iBAAA,IACA,KAEA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,mBACA,EAAA,EAAA,KAAA,EAAA,EAAA,oBAqBA,OApBA,EAAA,UAAA,EAAA,EAAA,WACA,EAAA,YAAA,EAAA,EAAA,aACA,EAAA,aAAA,EAAA,EAAA,cACA,EAAA,YAAA,EAAA,EAAA,aACA,EAAA,aAAA,EAAA,EAAA,cACA,EAAA,MAAA,EAAA,EAAA,SACA,EAAA,WAAA,EAAA,EAAA,iBACA,EAAA,UAAA,EAAA,EAAA,gBACA,EAAA,SAAA,EAAA,EAAA,eACA,EAAA,IAAA,EAAA,EAAA,OACA,EAAA,OAAA,EAAA,EAAA,UACA,EAAA,QAAA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,YACA,EAAA,aAAA,EAAA,EAAA,gBACA,EAAA,aAAA,EAAA,EAAA,gBACA,EAAA,kBAAA,EAAA,EAAA,qBACA,EAAA,uBAAA,EAAA,EAAA,0BACA,EAAA,eAAA,EAAA,EAAA,kBACA,EAAA,UAAA,EAAA,EAAA,aACA,EAAA,KAAA,EAAA,EAAA,QACA,GAEA,GAAA,SAAA,EAAA,GACA,KAAA,QAAA,iBAAA,EAAA,GAAA,IAEA,oBAAA,SAAA,EAAA,GACA,KAAA,QAAA,oBAAA,EAAA,GAAA,IAEA,QAAA,SAAA,EAAA,GACA,YAAA,KAAA,QACA,KAAA,GAAA,QAAA,GAEA,KAAA,GAAA,aAAA,IAGA,WAAA,WACA,OAAA,KAAA,SAEA,KAAA,WACA,KAAA,cACA,KAAA,IAAA,SAAA,EAAA,EAAA,KAAA,WAAA,KAAA,cAEA,oBAAA,WACA,OAAA,KAAA,UAEA,cAAA,WACA,OAAA,KAAA,YAEA,eAAA,WACA,OAAA,KAAA,aAEA,MAAA,WACA,OAAA,KAAA,QAEA,OAAA,WACA,OAAA,KAAA,SAEA,YAAA,WACA,KAAA,QAAA,SAAA,cAAA,UACA,KAAA,QAAA,MAAA,KAAA,OACA,KAAA,QAAA,OAAA,KAAA,QACA,KAAA,YAAA,YAAA,KAAA,UAEA,iBAAA,WACA,OAAA,EAAA,KAAA,MAEA,QAAA,WACA,KAAA,QAAA,MAAA,EACA,KAAA,QAAA,OAAA,EACA,KAAA,QAAA,cAAA,YAAA,KAAA,SACA,KAAA,QAAA,OAGA,CACA,OAAA,EACA,iBAAA,GApOA,GAuOA,EAAA,WAEA,SAAA,EAAA,EAAA,GACA,KAAA,OAAA,EAAA,MACA,KAAA,QAAA,EAAA,OACA,KAAA,kBAAA,KAAA,OACA,KAAA,mBAAA,KAAA,QACA,KAAA,IAAA,EACA,KAAA,aAAA,EAAA,oBACA,EAAA,gBAAA,EAAA,YAAA,KAAA,cACA,KAAA,aAAA,EAAA,qBACA,EAAA,iBAAA,EAAA,aAAA,KAAA,cACA,EAAA,oBAAA,EAAA,aAAA,EAAA,kBAAA,KAAA,OAAA,KAAA,SACA,EAAA,wBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,aAAA,KAAA,cACA,KAAA,cAAA,EAAA,gBACA,KAAA,mBAwDA,OAtDA,EAAA,UAAA,CACA,MAAA,WACA,OAAA,KAAA,QAEA,OAAA,WACA,OAAA,KAAA,SAEA,KAAA,WACA,IAAA,EAAA,KAAA,IACA,EAAA,gBAAA,EAAA,YAAA,KAAA,cACA,EAAA,iBAAA,EAAA,aAAA,KAAA,cACA,KAAA,oBAAA,KAAA,QAAA,KAAA,qBAAA,KAAA,SACA,KAAA,iBAEA,EAAA,SAAA,EAAA,EAAA,KAAA,OAAA,KAAA,UAEA,aAAA,WACA,OAAA,KAAA,eAEA,iBAAA,WACA,KAAA,OACA,IAAA,EAAA,KAAA,IACA,EAAA,YAAA,EAAA,WAAA,KAAA,eACA,EAAA,WAAA,EAAA,WAAA,EAAA,EAAA,KAAA,KAAA,OAAA,KAAA,QAAA,EAAA,EAAA,KAAA,EAAA,cAAA,MACA,EAAA,qBAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,WAAA,KAAA,cAAA,GACA,EAAA,cAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,QACA,EAAA,cAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,QACA,EAAA,cAAA,EAAA,WAAA,EAAA,eAAA,EAAA,eACA,EAAA,cAAA,EAAA,WAAA,EAAA,eAAA,EAAA,eACA,EAAA,YAAA,EAAA,WAAA,MACA,KAAA,WAEA,eAAA,WACA,IAAA,EAAA,KAAA,IACA,EAAA,iBAAA,EAAA,aAAA,KAAA,cACA,EAAA,oBAAA,EAAA,aAAA,EAAA,kBAAA,KAAA,OAAA,KAAA,SACA,EAAA,YAAA,EAAA,WAAA,KAAA,eACA,EAAA,WAAA,EAAA,WAAA,EAAA,EAAA,KAAA,KAAA,OAAA,KAAA,QAAA,EAAA,EAAA,KAAA,EAAA,cAAA,MACA,EAAA,qBAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,WAAA,KAAA,cAAA,GACA,EAAA,wBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,aAAA,KAAA,cACA,EAAA,YAAA,EAAA,WAAA,MACA,KAAA,kBAAA,KAAA,OACA,KAAA,mBAAA,KAAA,SAEA,OAAA,SAAA,EAAA,GACA,KAAA,OAAA,EACA,KAAA,QAAA,GAEA,QAAA,WACA,IAAA,EAAA,KAAA,IACA,EAAA,gBAAA,EAAA,YAAA,MACA,EAAA,iBAAA,EAAA,aAAA,QAGA,EAvEA,GAyEA,EAAA,WAEA,SAAA,EAAA,GACA,KAAA,YAAA,GACA,KAAA,YAAA,EAuBA,OArBA,EAAA,UAAA,QAAA,SAAA,GAGA,IAFA,IAAA,GAAA,EACA,EAAA,KACA,EAAA,EAAA,EAAA,KAAA,YAAA,SAAA,EAAA,CACA,IACA,EADA,KAAA,YAAA,GACA,OACA,GAAA,IAAA,OAAA,GAAA,EAAA,KACA,EAAA,EACA,EAAA,GAGA,IAAA,IAAA,EAAA,CACA,IAAA,EAAA,KAAA,YAAA,GAEA,OADA,KAAA,YAAA,OAAA,EAAA,GACA,EAEA,OAAA,IAAA,KAAA,YAAA,IAEA,EAAA,UAAA,QAAA,SAAA,GACA,KAAA,YAAA,KAAA,IAEA,EA3BA,GA6BA,EAAA,WAEA,IAgMA,EACA,EA9CA,EAnJA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,SAAA,EAAA,GACA,KAAA,YAAA,EAAA,SACA,KAAA,cAAA,EAAA,SACA,KAAA,WAAA,EAAA,SACA,KAAA,UAAA,EAAA,SACA,KAAA,aAAA,EAAA,SACA,KAAA,MAAA,GACA,KAAA,KAAA,IACA,KAAA,UAAA,EACA,KAAA,QAAA,GACA,KAAA,MAAA,EACA,KAAA,MAAA,GAAA,KAAA,GAAA,IACA,KAAA,UAAA,EAAA,WAAA,EAAA,EAAA,GACA,KAAA,cAAA,EAAA,WAAA,GAAA,GAAA,IACA,KAAA,cAAA,EACA,KAAA,gBAAA,EAAA,WAAA,GAAA,EAAA,IACA,KAAA,QAAA,EAAA,SACA,KAAA,MAAA,GACA,KAAA,yBAAA,EACA,KAAA,sBAAA,EACA,KAAA,qBAAA,EACA,KAAA,kBAAA,EACA,KAAA,IAAA,EACA,KAAA,eAAA,KACA,KAAA,SAAA,EACA,KAAA,gBAAA,EAAA,cAAA,EAAA,gBAuQA,OArQA,EAAA,UAAA,CACA,kBAAA,WACA,KAAA,UAAA,EACA,KAAA,SAAA,cACA,KAAA,SAAA,IAGA,0BAAA,SAAA,GACA,KAAA,wBAAA,EACA,KAAA,qBAEA,gBAAA,SAAA,GACA,KAAA,gBAAA,IACA,KAAA,cAAA,EACA,KAAA,sBAGA,YAAA,SAAA,GACA,KAAA,EAAA,OACA,EAAA,KAAA,KAAA,UAAA,GAEA,EAAA,SAAA,KAAA,UAAA,GAEA,KAAA,qBAAA,GAEA,iBAAA,WACA,OAAA,KAAA,mBAEA,oBAAA,SAAA,GACA,GAAA,KAAA,oBAAA,EAAA,CACA,KAAA,oBACA,KAAA,kBAAA,EACA,IAAA,EAAA,KAAA,kBAAA,KAAA,OACA,EAAA,KAAA,kBAAA,KAAA,QACA,KAAA,mBAAA,IAAA,aAAA,CACA,EACA,MAIA,SAAA,WACA,MAAA,CACA,EAAA,WAAA,KAAA,UAAA,GAAA,KAAA,UAAA,GAAA,KAAA,UAAA,IACA,EAAA,WAAA,KAAA,UAAA,GAAA,KAAA,UAAA,GAAA,KAAA,UAAA,IACA,EAAA,WAAA,KAAA,UAAA,GAAA,KAAA,UAAA,GAAA,KAAA,UAAA,OAGA,aAAA,WACA,OAAA,KAAA,OAEA,gBAAA,SAAA,GACA,KAAA,MAAA,EACA,KAAA,sBAAA,GAEA,YAAA,WACA,OAAA,KAAA,OAAA,KAAA,SAEA,SAAA,WACA,OAAA,KAAA,WAEA,kBAAA,WACA,IAAA,GAAA,EA4BA,OA3BA,KAAA,sBACA,EAAA,SAAA,KAAA,eACA,EAAA,UAAA,KAAA,cAAA,KAAA,cAAA,EACA,KAAA,QAAA,IACA,KAAA,QAAA,IACA,KAAA,QAAA,KAEA,EAAA,IAAA,KAAA,cAAA,KAAA,UAAA,KAAA,eACA,EAAA,SAAA,KAAA,cACA,EAAA,UAAA,KAAA,aAAA,KAAA,aAAA,CACA,EACA,GACA,KAAA,QAEA,EAAA,IAAA,KAAA,cAAA,KAAA,aAAA,KAAA,eACA,GAAA,GAEA,KAAA,uBACA,EAAA,SAAA,KAAA,aACA,EAAA,YAAA,KAAA,YAAA,KAAA,MAAA,KAAA,OAAA,KAAA,QAAA,KAAA,MAAA,KAAA,MACA,GAAA,GAEA,KAAA,sBAAA,EACA,KAAA,qBAAA,EACA,GACA,KAAA,oBAEA,GAEA,gBAAA,SAAA,EAAA,GACA,KAAA,sBAAA,EACA,KAAA,OAAA,EACA,KAAA,QAAA,EACA,KAAA,mBAAA,IAAA,aAAA,CACA,KAAA,kBAAA,EACA,KAAA,kBAAA,KAGA,cAAA,WACA,OAAA,KAAA,QAEA,eAAA,WACA,OAAA,KAAA,SAEA,UAAA,SAAA,GACA,KAAA,qBAAA,EACA,EAAA,KAAA,KAAA,QAAA,IAEA,IAAA,SAAA,GAKA,YAJA,IAAA,GAAA,IAAA,KAAA,OACA,KAAA,KAAA,EACA,KAAA,qBAEA,KAAA,MAEA,SACA,EAAA,EAAA,SACA,SAAA,GACA,EAAA,SAAA,GACA,KAAA,qBAAA,EACA,EAAA,OAAA,EAAA,EAAA,EAAA,CACA,EACA,EACA,IAEA,EAAA,IAAA,KAAA,UAAA,EAAA,KAAA,aAGA,QAAA,WACA,IAAA,EAAA,EAAA,SACA,OAAA,SAAA,GACA,EAAA,SAAA,GACA,KAAA,qBAAA,EACA,EAAA,OAAA,EAAA,EAAA,EAAA,CACA,EACA,EACA,IAEA,EAAA,IAAA,KAAA,UAAA,EAAA,KAAA,YAVA,GAaA,QAAA,WACA,IAAA,EAAA,EAAA,SACA,OAAA,SAAA,GACA,EAAA,SAAA,GACA,KAAA,qBAAA,EACA,EAAA,OAAA,EAAA,EAAA,EAAA,CACA,EACA,EACA,IAEA,EAAA,IAAA,KAAA,UAAA,EAAA,KAAA,YAVA,GAaA,KAAA,SAAA,GACA,OAAA,KAAA,MAAA,EAAA,IAEA,KAAA,SAAA,GACA,OAAA,KAAA,MAAA,EAAA,IAEA,OACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,GACA,EAAA,UAAA,EAAA,KAAA,WACA,KAAA,qBAAA,EACA,EAAA,IAAA,GAAA,EAAA,EAAA,GACA,EAAA,cAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,KAAA,SACA,KAAA,UAAA,KAGA,WAAA,WACA,OAAA,KAAA,OAEA,UAAA,WACA,OAAA,KAAA,MAEA,WAAA,SAAA,EAAA,GACA,IAAA,KAAA,OAAA,IAAA,KAAA,OAGA,KAAA,MAAA,EACA,KAAA,KAAA,EACA,KAAA,sBAAA,IAEA,cAAA,SAAA,EAAA,GACA,KAAA,SAAA,EACA,KAAA,QAAA,EACA,KAAA,sBAAA,GAEA,QAAA,SAAA,GAGA,OAFA,KAAA,qBAAA,EACA,KAAA,MAAA,EACA,KAAA,OAEA,KAAA,SAAA,GACA,QAAA,IAAA,EACA,OAAA,KAAA,MAEA,KAAA,qBAAA,EACA,IAAA,EAAA,EAAA,GAAA,EAEA,OADA,KAAA,MAAA,KAAA,IAAA,IAAA,KAAA,IAAA,EAAA,EAAA,KAAA,QACA,KAAA,OAEA,OAAA,WACA,OAAA,KAAA,SAEA,YAAA,SAAA,GACA,KAAA,UAAA,EAAA,MAAA,IAEA,cAAA,WACA,OAAA,KAAA,gBAEA,wBAAA,WACA,KAAA,eAAA,MAEA,gBAAA,SAAA,GACA,KAAA,cAAA,EAAA,MAAA,IAEA,kBAAA,SAAA,GACA,KAAA,gBAAA,EAAA,MAAA,IAEA,KAAA,SAAA,EAAA,GACA,IAAA,GAAA,EACA,EAAA,KAAA,IAaA,GAZA,KAAA,iBAAA,IACA,KAAA,eAAA,EACA,EAAA,WAAA,GACA,GAAA,GAEA,EAAA,KAAA,qBAAA,EACA,GACA,EAAA,IAAA,KAAA,WAAA,KAAA,cAAA,GACA,EAAA,iBAAA,EAAA,WAAA,EAAA,KAAA,aAEA,EAAA,iBAAA,EAAA,WAAA,EAAA,KAAA,eAEA,KAAA,WAAA,EAAA,QAAA,CAGA,EAAA,QAAA,KAAA,SACA,EAAA,iBAAA,EAAA,YAAA,EAAA,KAAA,aACA,EAAA,UACA,EAAA,iBAAA,EAAA,UAAA,EAAA,KAAA,WAEA,EAAA,UAAA,EAAA,IAAA,KAAA,MACA,IAAA,EAAA,KAAA,MACA,EAAA,UAAA,EAAA,OAAA,KAAA,QAAA,GACA,EAAA,UAAA,EAAA,KAAA,KAAA,OACA,EAAA,UAAA,EAAA,QAAA,KAAA,SAAA,GACA,EAAA,WAAA,EAAA,SAAA,KAAA,WACA,EAAA,WAAA,EAAA,aAAA,KAAA,eACA,EAAA,WAAA,EAAA,eAAA,KAAA,iBACA,EAAA,WAAA,EAAA,kBAAA,KAAA,oBACA,EAAA,UAAA,EAAA,aAAA,KAAA,eACA,EAAA,UAAA,EAAA,uBAAA,KAAA,4BAGA,EApSA,GAsSA,EAAA,CACA,WAAA,+6BACA,SAAA,2KACA,gBAAA,2pBACA,gBAAA,2cACA,UAAA,ibACA,UAAA,siBACA,SAAA,sZACA,aAAA,gYACA,SAAA,4nBACA,aAAA,iiBACA,WAAA,2VACA,WAAA,0tBACA,QAAA,sfACA,QAAA,0WAEA,EAAA,WAEA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,SAAA,EACA,KAAA,SAAA,iBAAA,YAAA,EAAA,KAAA,KAAA,KAAA,aACA,KAAA,SAAA,iBAAA,aAAA,EAAA,KAAA,KAAA,KAAA,cACA,KAAA,SAAA,iBAAA,WAAA,EAAA,KAAA,KAAA,KAAA,YACA,KAAA,SAAA,iBAAA,cAAA,EAAA,KAAA,KAAA,KAAA,YACA,KAAA,YAAA,CACA,MAAA,EACA,SAAA,EACA,OAAA,MAEA,KAAA,eAAA,KACA,KAAA,QAAA,EACA,KAAA,KAAA,EAeA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,OAAA,KAAA,KAAA,EAAA,EAAA,EAAA,GAOA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,OAAA,KAAA,MAAA,EAAA,GAqFA,OAhFA,EAAA,UAAA,CACA,wBAAA,SAAA,EAAA,GACA,IAfA,EAAA,EACA,EAcA,EAAA,GACA,EAAA,OAlCA,SAAA,GAEA,IADA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,QACA,GAAA,EAAA,GAAA,QAIA,MAAA,CACA,EAHA,GAAA,EAAA,OAIA,EAHA,GAAA,EAAA,QA2BA,CAAA,EAAA,eACA,EAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,cAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,cAAA,GACA,EAAA,SAAA,KAAA,CACA,EAAA,EAAA,QACA,EAAA,EAAA,UAcA,OAXA,EAAA,WAAA,EAAA,cAAA,OACA,EAAA,SAAA,EACA,EAAA,MAAA,EACA,EAAA,WAAA,EACA,EAAA,cAAA,EACA,EAAA,SACA,EAAA,YAAA,CACA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,EACA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,IAGA,IAAA,EAAA,YAAA,IAAA,EAAA,WACA,GAEA,EAAA,gBACA,EAAA,gBAAA,EAAA,gBAEA,EAAA,gBAAA,EAAA,SAEA,EAAA,OA5CA,EA4CA,EAAA,gBA5CA,EA4CA,EAAA,SA3CA,EAAA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,KACA,IAAA,EAAA,EAAA,IA0CA,EAAA,WAAA,EAAA,MAAA,EAAA,MACA,EAAA,SApCA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAmCA,CAAA,EAAA,gBAAA,EAAA,UACA,EAAA,cAAA,EAAA,SAAA,EAAA,SACA,IAEA,WAAA,SAAA,GACA,EAAA,iBACA,IAAA,EAAA,KAAA,wBAAA,KAAA,YAAA,GACA,EAAA,GAAA,EAAA,WAIA,GAHA,IAAA,GACA,KAAA,KAAA,KAAA,GAEA,IAAA,EAAA,YAAA,IAAA,KAAA,YAAA,WAAA,CACA,IAAA,EAAA,KAAA,KAAA,IAAA,GAAA,KAAA,KAAA,gBAAA,KAAA,KAAA,OACA,KAAA,KAAA,MAAA,EAAA,YAAA,EAAA,EAAA,EAAA,YAAA,EAAA,GAEA,IAAA,GAAA,EAAA,cACA,KAAA,KAAA,QAAA,GACA,IAAA,EAAA,YAAA,IAAA,KAAA,YAAA,aACA,KAAA,KAAA,QAAA,KAAA,EAAA,YAAA,GACA,KAAA,KAAA,QAAA,KAAA,EAAA,YAAA,IAEA,KAAA,QAAA,gBACA,KAAA,YAAA,GAEA,YAAA,SAAA,GAEA,GADA,EAAA,iBACA,IAAA,EAAA,cAAA,OAAA,CACA,IAAA,GAAA,IAAA,MAAA,UACA,GAAA,OAAA,KAAA,eACA,EAAA,KAAA,eACA,KACA,KAAA,QAAA,kBAAA,CACA,QAAA,EAAA,cAAA,GAAA,QACA,QAAA,EAAA,cAAA,GAAA,UAIA,KAAA,eAAA,OAEA,KAAA,eAAA,KAEA,KAAA,YAAA,KAAA,wBAAA,KAAA,YAAA,IAEA,UAAA,SAAA,GACA,EAAA,mBAGA,EAhIA,GAkIA,EAAA,WAEA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,EACA,KAAA,QAAA,EACA,KAAA,KAAA,EACA,KAAA,QAAA,EACA,KAAA,eAAA,EACA,KAAA,iBAAA,KACA,KAAA,QA+GA,OA7GA,EAAA,UAAA,CACA,iBAAA,SAAA,GACA,OAAA,GAGA,KAAA,QAAA,UAAA,EAAA,MAAA,KAAA,iBAEA,SAAA,SAAA,GACA,IAAA,EAAA,KAAA,QACA,GAAA,IAAA,MAAA,UACA,IAAA,OAAA,KAAA,kBAAA,EAAA,KAAA,iBAAA,KAAA,EAAA,KAAA,mBAAA,IAAA,CACA,IAAA,EAAA,KAAA,QAAA,aAAA,wBACA,EAAA,KAAA,QAAA,KAAA,CACA,EAAA,EAAA,QAAA,EAAA,KACA,EAAA,EAAA,QAAA,EAAA,MAEA,KAAA,QAAA,eAAA,EAAA,QAAA,GAEA,KAAA,iBAAA,EACA,EAAA,oBAAA,YAAA,KAAA,sBACA,EAAA,oBAAA,YAAA,KAAA,mBACA,EAAA,oBAAA,UAAA,KAAA,kBACA,SAAA,oBAAA,UAAA,KAAA,kBACA,SAAA,oBAAA,YAAA,KAAA,sBACA,SAAA,oBAAA,YAAA,KAAA,oBAEA,OAAA,SAAA,GACA,KAAA,KAAA,GAEA,MAAA,WAOA,OANA,KAAA,kBAAA,EAAA,KAAA,KAAA,KAAA,WACA,KAAA,qBAAA,EAAA,KAAA,KAAA,KAAA,cACA,KAAA,iBAAA,EAAA,KAAA,KAAA,KAAA,UACA,KAAA,QAAA,QAAA,EAAA,KAAA,KAAA,KAAA,eAAA,EAAA,KAAA,KAAA,KAAA,cACA,KAAA,QAAA,GAAA,WAAA,EAAA,KAAA,KAAA,KAAA,oBACA,KAAA,QAAA,GAAA,YAAA,EAAA,KAAA,KAAA,KAAA,cACA,GAEA,YAAA,SAAA,GACA,KAAA,KAAA,KAAA,EAAA,WAAA,GAAA,EAAA,GACA,EAAA,iBACA,KAAA,QAAA,iBAEA,cAAA,SAAA,GACA,KAAA,KAAA,KAAA,EAAA,OAAA,EAAA,GAAA,GACA,EAAA,iBACA,KAAA,QAAA,iBAEA,kBACA,SAAA,GACA,IAAA,EAAA,KAAA,QAAA,aAAA,wBACA,EAAA,KAAA,QAAA,KAAA,CACA,EAAA,EAAA,QAAA,EAAA,KACA,EAAA,EAAA,QAAA,EAAA,MAEA,KAAA,QAAA,eAAA,EAAA,cAAA,GACA,KAAA,QAAA,iBAGA,WAAA,SAAA,GACA,IAAA,EAAA,SAGA,KAAA,oBAAA,IAAA,MAAA,UACA,EAAA,kBACA,IAAA,EAAA,UACA,KAAA,QAAA,GAAA,YAAA,KAAA,mBACA,SAAA,iBAAA,YAAA,KAAA,mBAAA,KAEA,KAAA,QAAA,GAAA,YAAA,KAAA,sBACA,SAAA,iBAAA,YAAA,KAAA,sBAAA,IAEA,KAAA,QAAA,GAAA,UAAA,KAAA,kBACA,SAAA,iBAAA,UAAA,KAAA,kBAAA,GACA,KAAA,cAAA,CACA,EAAA,EAAA,MACA,EAAA,EAAA,SAGA,aAAA,SAAA,GACA,IAAA,EAAA,CACA,EAAA,EAAA,MACA,EAAA,EAAA,OAEA,EACA,EAAA,EAAA,KAAA,cAAA,EADA,EAEA,EAAA,EAAA,KAAA,cAAA,EAGA,KAAA,KAAA,QADA,KACA,GACA,KAAA,KAAA,QAFA,KAEA,GACA,KAAA,cAAA,EACA,KAAA,QAAA,iBAEA,UAAA,SAAA,GACA,IAAA,EAAA,CACA,EAAA,EAAA,MACA,EAAA,EAAA,OAEA,EACA,EAAA,EAAA,KAAA,cAAA,EADA,EAEA,EAAA,EAAA,KAAA,cAAA,EAEA,EAAA,KAAA,KAAA,IAAA,GAAA,KAAA,KAAA,gBAAA,KAAA,KAAA,OACA,KAAA,KAAA,MAAA,EAAA,EAAA,EAAA,GACA,KAAA,cAAA,EACA,KAAA,QAAA,kBAGA,EAxHA,GA0HA,EAAA,WAEA,IAKA,EAwCA,EA7CA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,GACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,GAEA,OADA,EAAA,MAAA,EAAA,EAAA,GACA,KAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAGA,EAAA,WACA,IAAA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,GAeA,OAdA,EAAA,KAAA,EAAA,GACA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IACA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAEA,EAAA,IAAA,EAGA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IACA,EAAA,IAAA,EAEA,EAAA,IAAA,EAGA,EAAA,MAAA,EAAA,EAAA,IAjBA,GAiCA,GACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAEA,EAAA,GADA,EAAA,EAAA,GAEA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,YAAA,EAAA,EAAA,EAAA,GACA,EAAA,YAAA,EAAA,EAAA,EAAA,GACA,EAAA,YAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,KAGA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,EACA,EAAA,EAEA,GAAA,EAAA,GAAA,EAuEA,SAAA,EAAA,EAAA,GACA,KAAA,QAAA,GAAA,EAAA,SACA,KAAA,QAAA,GAAA,EAEA,IACA,EACA,EACA,EACA,EACA,EACA,EACA,EAPA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,GAGA,IAFA,IACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAFA,KAEA,EAAA,CACA,EAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,UAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,KACA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,GAAA,EAAA,GAAA,EACA,GAAA,EAAA,GAAA,EACA,GAAA,IAAA,EAAA,GACA,MAEA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,EAGA,EAAA,IAFA,GAAA,IACA,EAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,IAEA,EAAA,EAAA,KAAA,KAAA,EAAA,EAAA,GACA,GAAA,IAAA,EACA,MAMA,GAJA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,KAAA,MAAA,EAAA,GAAA,GACA,EAAA,KAAA,EACA,EAAA,GAAA,KAAA,KAAA,EAAA,EAAA,GAAA,EAAA,IACA,IAAA,EAAA,GACA,MAEA,EAAA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,GAEA,OAAA,IAGA,EAAA,UAAA,OAAA,WACA,OAAA,KAAA,SAEA,EAAA,UAAA,OAAA,WACA,OAAA,KAAA,SAEA,IAAA,EACA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EACA,EAAA,MAAA,EAAA,EAAA,GAEA,EAAA,EAAA,GAEA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,GACA,EAAA,UAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,IAoBA,MAAA,CACA,YAAA,EACA,agMA,MAAA,EACA,aAAA,EACA,iBAtKA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,GAAA,GACA,IAAA,EAAA,KACA,EAAA,EAAA,EAAA,EAAA,EAHA,EAAA,IAAA,GAKA,EADA,EACA,EAAA,QAAA,GAEA,IAAA,aAAA,GAEA,IAIA,EAAA,EAAA,EAJA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAYA,IAVA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,OAAA,GAAA,EAAA,EAAA,OAAA,IACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,KAEA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,EAAA,IAEA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CAIA,IAHA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,IACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAEA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,GASA,IAPA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,IAEA,EAAA,IAAA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAEA,IAAA,EAIA,OAHA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACA,EASA,IAPA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAEA,OAAA,GAqGA,wBAAA,EACA,mBAxBA,SAAA,EAAA,GAKA,IAJA,IAAA,EAAA,IAAA,aAAA,GAAA,EAAA,OAAA,GAAA,GACA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,CACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EACA,GAAA,GAIA,OADA,EAAA,EAAA,GAAA,EACA,GAUA,0BAAA,EACA,OAAA,EACA,cAAA,GAnPA,GAsPA,EAAA,WAEA,IAoCA,EAAA,EApCA,EAAA,EAAA,KACA,SAAA,EAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,QAAA,EACA,KAAA,SAAA,IAAA,YAAA,EAAA,EAAA,EAAA,GACA,KAAA,OAAA,IAAA,aAAA,EAAA,EAAA,GACA,IAEA,EAAA,EAFA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAEA,IAAA,EAAA,EAAA,EAAA,KAAA,UAAA,EAAA,CACA,IAAA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,EAAA,CACA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,EAAA,KAAA,IAAA,EAAA,GACA,KAAA,OAAA,GAAA,EAAA,EAAA,KAAA,QAAA,EACA,KAAA,OAAA,GAAA,EAAA,EAAA,KAAA,OAAA,GAAA,EACA,KAAA,OAAA,GAAA,EAAA,EAAA,KAAA,OAAA,GAAA,GAGA,IAAA,EAAA,EACA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,IAAA,EACA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,EACA,KAAA,SAAA,GAAA,EAAA,KAAA,MAAA,EACA,KAAA,SAAA,EAAA,GAAA,EAAA,KAAA,OAAA,EAAA,GAAA,KAAA,MACA,KAAA,SAAA,EAAA,IAAA,EAAA,GAAA,KAAA,MAAA,EACA,GAAA,EACA,KAAA,SAAA,GAAA,EAAA,KAAA,OAAA,EAAA,GAAA,KAAA,MACA,KAAA,SAAA,EAAA,IAAA,EAAA,GAAA,KAAA,OAAA,EAAA,GAAA,KAAA,MACA,KAAA,SAAA,EAAA,IAAA,EAAA,GAAA,KAAA,MAAA,EACA,GAAA,EA4BA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,iBAAA,EAAA,EAAA,OAAA,EAAA,EAAA,GAAA,GACA,KAAA,SAAA,IAAA,YAAA,EAAA,EAAA,QACA,KAAA,OAAA,EACA,KAAA,SAAA,IAAA,aAAA,EAAA,QACA,KAAA,MAAA,EAAA,OAAA,EAEA,IADA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,EAAA,KAAA,QAAA,EAAA,CACA,IAAA,EAAA,IAAA,EAAA,KAAA,MAAA,EAAA,EAAA,EACA,EAAA,IAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,KAAA,OAAA,EAAA,EAAA,GAAA,KAAA,OAAA,EAAA,EAAA,GACA,EAAA,GAAA,KAAA,OAAA,EAAA,GAAA,KAAA,OAAA,EAAA,GACA,EAAA,UAAA,EAAA,GACA,KAAA,SAAA,EAAA,GAAA,EAAA,GACA,KAAA,SAAA,EAAA,EAAA,GAAA,EAAA,GACA,KAAA,SAAA,EAAA,EAAA,GAAA,EAAA,GAEA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,EACA,KAAA,SAAA,EAAA,GAAA,EACA,KAAA,SAAA,EAAA,EAAA,GAAA,EAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,IAAA,EAAA,GAAA,KAAA,MAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,GAAA,EACA,KAAA,SAAA,EAAA,EAAA,IAAA,EAAA,GAAA,KAAA,MAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,IAAA,EAAA,GAAA,KAAA,MAmCA,SAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,SAAA,IAAA,YAAA,EAAA,EAAA,GACA,KAAA,OAAA,IAAA,aAAA,EAAA,EAAA,GACA,KAAA,SAAA,IAAA,aAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,KAAA,GAAA,KAAA,MACA,EAAA,EAAA,EAAA,KAAA,QAAA,EAAA,CACA,IAAA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,GACA,KAAA,OAAA,EAAA,GAAA,EACA,KAAA,OAAA,EAAA,EAAA,GAAA,EACA,KAAA,OAAA,EAAA,EAAA,IAAA,GACA,KAAA,OAAA,EAAA,EAAA,EAAA,GAAA,EACA,KAAA,OAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,KAAA,OAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GACA,KAAA,SAAA,EAAA,GAAA,EACA,KAAA,SAAA,EAAA,EAAA,GAAA,EACA,KAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EACA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAEA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,EACA,KAAA,SAAA,EAAA,GAAA,EAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,IAAA,EAAA,GAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,GAAA,EAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAAA,MACA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,KAAA,MAiCA,OA7IA,EAAA,UAAA,CACA,gBACA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,WACA,EAAA,EAAA,EAAA,KAAA,QAAA,KAAA,QAAA,EACA,EAAA,IAAA,EAAA,KAAA,OAAA,EAAA,GAAA,KAAA,OAAA,EAAA,EAAA,GAAA,KAAA,OAAA,EAAA,EAAA,IACA,EAAA,KAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,EACA,EAAA,YAAA,EAAA,KAAA,SAAA,EAAA,GAAA,EAAA,KAAA,SAAA,EAAA,EAAA,GAAA,EAAA,KAAA,SAAA,EAAA,EAAA,MAIA,WAAA,WACA,OAAA,KAAA,SAAA,QAEA,SAAA,WACA,OAAA,KAAA,OAAA,OAAA,IA6BA,EAAA,UAAA,CACA,eAAA,WACA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAKA,IAJA,IAAA,EAAA,KAAA,MACA,EAAA,KAAA,SACA,EAAA,KAAA,OACA,EAAA,EAAA,WAAA,EACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,cAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,cAAA,EAAA,EAAA,GACA,EAAA,UAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAGA,GAAA,IAAA,EAMA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,YAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,YAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,QAPA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,EACA,EAAA,YAAA,EAAA,KAAA,SAAA,EAAA,GAAA,EAAA,KAAA,SAAA,EAAA,EAAA,GAAA,EAAA,KAAA,SAAA,EAAA,EAAA,KApBA,IA4DA,EAAA,UAAA,CACA,SAAA,WACA,OAAA,KAAA,OAAA,OAAA,GAEA,WAAA,WACA,OAAA,KAAA,SAAA,QAEA,eAAA,WACA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAKA,IAJA,IAAA,EAAA,EAAA,WACA,EAAA,KAAA,OACA,EAAA,KAAA,SACA,EAAA,KAAA,MACA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,cAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,cAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,KAAA,SACA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EACA,EAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,KAlBA,IAuBA,CACA,YAAA,EACA,cAAA,EACA,YAAA,GApLA,GAuLA,EAAA,WAEA,SAAA,EAAA,GACA,KAAA,UAAA,GACA,KAAA,UAAA,EACA,KAAA,MAAA,MAAA,GACA,KAAA,IAAA,EACA,KAAA,OAAA,EAsCA,OApCA,EAAA,UAAA,CACA,MAAA,SAAA,GAIA,YAHA,IAAA,IACA,KAAA,OAAA,GAEA,KAAA,QAEA,IAAA,SAAA,GACA,KAAA,UAAA,KAAA,IAEA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,UAAA,OAAA,IAAA,IAAA,EACA,KAAA,UAAA,GAAA,KAAA,EAAA,EAAA,EAAA,IAGA,KAAA,WACA,KAAA,UAAA,GAEA,KAAA,WACA,KAAA,UAAA,GAEA,KAAA,SAAA,GAIA,YAHA,IAAA,IACA,KAAA,MAAA,GAEA,KAAA,OAEA,QAAA,WACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,UAAA,SAAA,EACA,KAAA,UAAA,GAAA,WAGA,QAAA,WACA,OAAA,KAAA,WAGA,EA7CA,GA+CA,EAAA,WAEA,IAAA,EAAA,EAAA,KAUA,IACA,EADA,GACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAGA,IAFA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,aAAA,EAAA,UACA,EAAA,EAAA,EAAA,EAAA,WAAA,SAAA,EAEA,IADA,IAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAEA,IADA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,WAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,WAAA,GAAA,cACA,OAAA,IAGA,EAAA,cAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,OAOA,SAAA,EAAA,GACA,EAAA,KAAA,KAAA,GACA,KAAA,UAAA,GACA,KAAA,YAAA,GACA,KAAA,aAAA,KACA,KAAA,WAAA,KA6LA,OA3LA,EAAA,OAAA,EAAA,EAAA,CACA,eAAA,SAAA,GACA,IAAA,GAAA,SAAA,GACA,OAAA,KAAA,YAAA,SAAA,GAMA,OADA,KAAA,aAAA,EACA,EALA,QAAA,MAAA,wBAAA,EAAA,sCAOA,aAAA,SAAA,GACA,GAAA,SAAA,KAAA,cACA,OAAA,KAEA,IAAA,EAAA,KAAA,YAAA,SAAA,KAAA,eACA,IAAA,EACA,OAAA,KAGA,IADA,IAAA,EAAA,EAAA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,GAAA,EAAA,GAAA,WAAA,OAAA,EACA,OAAA,EAAA,GAAA,OAAA,GAEA,GAAA,EAAA,GAAA,WAAA,OAEA,OAAA,MAEA,YAAA,WACA,OAAA,KAAA,cAEA,OAAA,SAAA,GACA,OAAA,KAAA,YAAA,OAAA,IAEA,UAAA,WACA,OAAA,KAAA,YAAA,GAAA,YAEA,gBAAA,SAAA,EAAA,GACA,OAAA,KAAA,YAAA,GAAA,gBAAA,EAAA,IAEA,WAAA,SAAA,GACA,KAAA,UAAA,KAAA,IAEA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,UAAA,SAAA,EACA,KAAA,UAAA,GAAA,WAGA,gBAAA,SAAA,GACA,IACA,EADA,KACA,YACA,EAAA,EAAA,SAFA,KAEA,eACA,OAAA,OAAA,EA5FA,SAAA,EAAA,GACA,EAAA,YAAA,SAAA,GACA,IAAA,EAAA,EAAA,cACA,OAAA,GAGA,EAAA,EAAA,EAAA,SAuFA,CAAA,EAAA,GAEA,EAAA,EAAA,EAAA,aAAA,IAEA,aAAA,SAAA,GACA,KAAA,YAAA,KAAA,IAEA,qBAAA,SAAA,GAIA,IAHA,IAAA,EAAA,KAAA,aACA,EAAA,GACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,KAAA,EAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GACA,IAAA,EAAA,EAAA,GAAA,UACA,EAAA,KAAA,EAAA,IAGA,OAAA,GAEA,qBAAA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,KAAA,qBAAA,EAAA,UACA,KAAA,gBAAA,EAAA,EAAA,EAAA,EAAA,cAGA,+BAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,KAAA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GAAA,0BAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,0BAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,KAAA,SAAA,CAGA,IAAA,EAAA,KAAA,cACA,GAAA,SAAA,EACA,OAAA,KAAA,+BAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAIA,IAFA,IACA,EADA,KAAA,YAAA,SAAA,GACA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAGA,IAFA,IAAA,EAAA,EAAA,GACA,EAAA,KAAA,qBAAA,EAAA,UACA,EAAA,EAAA,EAAA,EAAA,WAAA,SAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,OAAA,GACA,EAAA,GAAA,0BAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,MAKA,+BAAA,SAAA,EAAA,GAEA,IADA,IAAA,EAAA,KAAA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,GAAA,0BAAA,EAAA,GAEA,OAAA,GAEA,0BAAA,SAAA,EAAA,GACA,IAAA,KAAA,SACA,OAAA,EAEA,IAAA,EAAA,KAAA,cACA,GAAA,SAAA,EACA,OAAA,KAAA,+BAAA,EAAA,GAIA,IAFA,IACA,EADA,KAAA,YAAA,SAAA,GACA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAGA,IAFA,IAAA,EAAA,EAAA,GACA,EAAA,KAAA,qBAAA,EAAA,UACA,EAAA,EAAA,EAAA,EAAA,WAAA,SAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,GAAA,0BAAA,EAAA,GAIA,OAAA,GAEA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,KAAA,SAAA,CAGA,IAAA,EAAA,KAAA,sBAAA,EAAA,EAAA,GACA,GAAA,EAAA,CAGA,IAAA,EAAA,KAAA,cACA,GAAA,SAAA,EACA,OAAA,KAAA,gBAAA,EAAA,EAAA,KAAA,aAAA,MAEA,IAAA,EAAA,KAAA,YAAA,SAAA,GACA,OAAA,KAAA,qBAAA,EAAA,EAAA,MAEA,QAAA,SAAA,EAAA,GACA,QAAA,KAAA,oBACA,KAAA,QAAA,EACA,EAAA,GAAA,KAAA,YACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,YAAA,SAAA,EACA,KAAA,YAAA,GAAA,QAAA,EAAA,GAEA,QAAA,QAAA,qBAEA,WAAA,SAAA,EAAA,GACA,QAAA,KAAA,uBACA,KAAA,QAAA,EACA,EAAA,GAAA,KAAA,YACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,YAAA,SAAA,EACA,KAAA,YAAA,GAAA,WAAA,EAAA,GAEA,QAAA,QAAA,wBAEA,aAAA,SAAA,GACA,QAAA,KAAA,yBACA,KAAA,WAAA,EACA,KAAA,QAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,YAAA,SAAA,EACA,KAAA,YAAA,GAAA,aAAA,GAEA,QAAA,QAAA,0BAEA,UAAA,WAIA,OAHA,OAAA,KAAA,aACA,KAAA,WAAA,KAAA,YAAA,mBAEA,KAAA,cAGA,EArOA,GAuOA,EAAA,WAEA,IAgFA,EAhFA,EAAA,EAAA,KACA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,IAAA,EACA,KAAA,YAAA,EAAA,eACA,KAAA,kBAAA,GAAA,KACA,KAAA,QAAA,EACA,KAAA,gBAAA,KACA,IAAA,EAAA,KAAA,iBAAA,EACA,KAAA,UAAA,EAAA,QAAA,GA8GA,OA5GA,EAAA,UAAA,CACA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,iBAAA,KAAA,cACA,KAAA,UAAA,EAAA,GAAA,EACA,KAAA,UAAA,EAAA,GAAA,EACA,KAAA,UAAA,EAAA,GAAA,EACA,KAAA,UAAA,EAAA,GAAA,EACA,KAAA,QAAA,GAEA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,iBAAA,KAAA,cAKA,OAJA,EAAA,GAAA,KAAA,UAAA,EAAA,GACA,EAAA,GAAA,KAAA,UAAA,EAAA,GACA,EAAA,GAAA,KAAA,UAAA,EAAA,GACA,EAAA,GAAA,KAAA,UAAA,EAAA,GACA,GAEA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,iBAAA,KAAA,cACA,KAAA,UAAA,EAAA,GAAA,EACA,KAAA,QAAA,GAEA,YAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,iBAAA,KAAA,eACA,KAAA,UAAA,GAAA,EACA,KAAA,QAAA,GAEA,eAAA,WAIA,OAHA,KAAA,kBACA,KAAA,gBAAA,KAAA,4BAEA,KAAA,iBAEA,yBAAA,WACA,IAAA,EAAA,KAAA,WACA,GAAA,IAAA,EACA,OAAA,KAEA,IACA,EAAA,EADA,EAAA,EAAA,SAEA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,EAAA,KAAA,iBACA,EAAA,IAAA,KAAA,UAAA,EAAA,GACA,EAAA,IAAA,KAAA,UAAA,EAAA,GACA,EAAA,IAAA,KAAA,UAAA,EAAA,GAEA,EAAA,MAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,EAAA,EAAA,KAAA,iBACA,IAAA,EAAA,EAAA,GAAA,KAAA,UAAA,EAAA,GACA,EAAA,EAAA,GAAA,KAAA,UAAA,EAAA,GACA,EAAA,EAAA,GAAA,KAAA,UAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,OAAA,IAAA,EAAA,OAAA,EAAA,KAAA,KAAA,KAEA,QAAA,WACA,KAAA,IAAA,aAAA,KAAA,aACA,KAAA,kBAAA,QAAA,KAAA,YAEA,YAAA,WACA,KAAA,IAAA,WAAA,KAAA,IAAA,aAAA,KAAA,aACA,KAAA,SAGA,KAAA,IAAA,WAAA,KAAA,IAAA,aAAA,KAAA,UAAA,KAAA,IAAA,aACA,KAAA,QAAA,IAEA,2BACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,iBACA,IAAA,EACA,OAAA,EAEA,GAAA,EAEA,OADA,EAAA,cAAA,EAAA,EAAA,SAAA,GACA,KAAA,IAAA,EAAA,QAAA,EAAA,GAAA,GAEA,IAAA,EAAA,EAAA,SAAA,EAAA,SACA,OAAA,KAAA,IAAA,EAAA,QAAA,EAAA,SAAA,GAAA,EAAA,KAGA,0BAAA,WACA,IAAA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,iBACA,GAAA,EAAA,CAGA,EACA,EAAA,cAAA,EAAA,EAAA,SAAA,GAEA,EAAA,KAAA,EAAA,EAAA,UAEA,IAAA,EAAA,EAAA,IAAA,EAAA,GACA,EAAA,EAAA,IAAA,EAAA,GACA,EAAA,EAAA,IAAA,EAAA,GACA,EAAA,OAAA,EAAA,EAAA,UACA,EAAA,OAAA,EAAA,EAAA,UACA,EAAA,OAAA,EAAA,EAAA,UACA,EAAA,OAAA,EAAA,EAAA,UACA,EAAA,OAAA,EAAA,EAAA,UACA,EAAA,OAAA,EAAA,EAAA,YApBA,IAwBA,EAxHA,GA0HA,EAAA,WAEA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,EAAA,GACA,KAAA,UAAA,EACA,KAAA,eAAA,KAAA,IAAA,MAyEA,OAvEA,EAAA,OAAA,EAAA,EAAA,CACA,iBAAA,EACA,YAAA,EACA,cAAA,EACA,WAAA,EACA,eAAA,EACA,SAAA,WACA,OAAA,KAAA,WAEA,gBAAA,SAAA,GAEA,KAAA,eADA,EACA,KAAA,IAAA,OAEA,KAAA,IAAA,OAGA,SAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,iBAAA,KAAA,UACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EACA,KAAA,UAAA,KAAA,EACA,KAAA,WAAA,EACA,KAAA,QAAA,EACA,KAAA,gBAAA,MAEA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,SAAA,EAAA,EAAA,GACA,KAAA,SAAA,EAAA,EAAA,IAEA,YAAA,SAAA,GACA,KAAA,IAAA,oBAAA,EAAA,UAAA,EAAA,KAAA,IAAA,OAAA,EAAA,EAAA,KAAA,iBAAA,EAAA,KAAA,cACA,IAAA,EAAA,cACA,KAAA,IAAA,oBAAA,EAAA,YAAA,EAAA,KAAA,IAAA,OAAA,EAAA,EAAA,KAAA,iBAAA,EAAA,KAAA,eACA,KAAA,IAAA,wBAAA,EAAA,cAEA,KAAA,IAAA,wBAAA,EAAA,YACA,IAAA,EAAA,cACA,KAAA,IAAA,oBAAA,EAAA,YAAA,EAAA,KAAA,IAAA,OAAA,EAAA,EAAA,KAAA,iBAAA,EAAA,KAAA,YACA,KAAA,IAAA,wBAAA,EAAA,eAEA,IAAA,EAAA,eACA,KAAA,IAAA,oBAAA,EAAA,aAAA,EAAA,KAAA,IAAA,OAAA,EAAA,EAAA,KAAA,iBAAA,EAAA,KAAA,gBACA,KAAA,IAAA,wBAAA,EAAA,gBAGA,eAAA,SAAA,GACA,KAAA,IAAA,yBAAA,EAAA,YACA,IAAA,EAAA,aACA,KAAA,IAAA,yBAAA,EAAA,cAEA,IAAA,EAAA,aACA,KAAA,IAAA,yBAAA,EAAA,cAEA,IAAA,EAAA,cACA,KAAA,IAAA,yBAAA,EAAA,eAGA,KAAA,SAAA,GACA,KAAA,cACA,KAAA,YAAA,IAEA,KAAA,WACA,KAAA,IAAA,WAAA,KAAA,eAAA,EAAA,KAAA,cAGA,EA9EA,GAgFA,EAAA,EAAA,WAEA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,EAAA,GACA,KAAA,aAAA,EAAA,eACA,KAAA,iBAAA,EACA,KAAA,UAAA,EACA,KAAA,UAAA,EACA,KAAA,cAAA,EACA,KAAA,WAAA,EAAA,QAAA,GAoIA,OAlIA,EAAA,OAAA,EAAA,EAAA,CACA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,KAAA,IAAA,aAAA,KAAA,cACA,KAAA,iBAAA,QAAA,KAAA,aAEA,aAAA,SAAA,GACA,KAAA,QAAA,EACA,KAAA,cAAA,EAAA,OAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,KAAA,WAAA,GAAA,EAAA,IAGA,YAAA,SAAA,GACA,KAAA,QAAA,EACA,KAAA,UAAA,EAAA,OAAA,KAAA,iBACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,KAAA,UAAA,GAAA,EAAA,IAGA,SAAA,WACA,OAAA,KAAA,WAEA,SAAA,WACA,OAAA,KAAA,WAEA,WAAA,WACA,OAAA,EAAA,KAAA,eAEA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,KAAA,YAAA,KAAA,UAAA,CAIA,IAAA,EAAA,KAAA,UAAA,KAAA,iBACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EAAA,GACA,KAAA,UAAA,KAAA,EACA,KAAA,UAAA,KAAA,EACA,KAAA,WAAA,EACA,KAAA,QAAA,OAjBA,QAAA,MAAA,uCAmBA,iBAAA,GACA,gBAAA,GACA,cAAA,GACA,mBAAA,GACA,eAAA,GACA,oBAAA,GACA,cAAA,EACA,mBAAA,GACA,eAAA,EACA,oBAAA,GACA,YAAA,EACA,iBAAA,EACA,YAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,cACA,EAAA,GAAA,KAAA,WAAA,SAGA,KAAA,WAAA,KAAA,EACA,KAAA,WAAA,KAAA,EACA,KAAA,WAAA,KAAA,EACA,KAAA,eAAA,EACA,KAAA,QAAA,IAEA,YAAA,WACA,IAAA,EAAA,KAAA,OACA,EAAA,KAAA,IACA,EAAA,UAAA,YAAA,KAAA,MACA,EAAA,WAAA,EAAA,qBAAA,KAAA,cACA,GAGA,EAAA,WAAA,EAAA,qBAAA,KAAA,WAAA,EAAA,cAEA,YAAA,SAAA,GACA,IAAA,EAAA,KAAA,IACA,EAAA,KAAA,gBACA,EAAA,wBAAA,EAAA,WACA,EAAA,oBAAA,EAAA,UAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,mBACA,IAAA,EAAA,eACA,EAAA,wBAAA,EAAA,cACA,EAAA,oBAAA,EAAA,aAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,uBAEA,IAAA,EAAA,cACA,EAAA,oBAAA,EAAA,YAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,oBACA,EAAA,wBAAA,EAAA,eAEA,IAAA,EAAA,cACA,EAAA,oBAAA,EAAA,YAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,oBACA,EAAA,wBAAA,EAAA,eAEA,IAAA,EAAA,eACA,EAAA,oBAAA,EAAA,aAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,qBACA,EAAA,wBAAA,EAAA,gBAGA,eAAA,SAAA,GACA,IAAA,EAAA,KAAA,IACA,EAAA,yBAAA,EAAA,YACA,IAAA,EAAA,aACA,EAAA,yBAAA,EAAA,cAEA,IAAA,EAAA,cACA,EAAA,yBAAA,EAAA,eAEA,IAAA,EAAA,aACA,EAAA,yBAAA,EAAA,cAEA,IAAA,EAAA,cACA,EAAA,yBAAA,EAAA,eAGA,KAAA,SAAA,GACA,KAAA,cACA,KAAA,YAAA,IAEA,KAAA,WACA,IAAA,EAAA,KAAA,IACA,EAAA,aAAA,EAAA,UAAA,EAAA,KAAA,cAAA,EAAA,eAAA,MAGA,EA7IA,GA+IA,EAAA,SAAA,GAEA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,EAAA,GACA,KAAA,OAAA,EAgBA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,OAAA,EAQA,OAxBA,EAAA,OAAA,EAAA,EAAA,CACA,MAAA,WACA,OAAA,KAAA,QAEA,oBAAA,SAAA,EAAA,EAAA,GACA,KAAA,KAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,KAAA,EAAA,EAAA,IACA,KAAA,IAAA,UAAA,EAAA,MAAA,GACA,KAAA,OAEA,KAAA,eAAA,MAOA,EAAA,OAAA,EAAA,EAAA,CACA,MAAA,WACA,OAAA,KAAA,UAGA,EAAA,UAAA,oBAAA,EAAA,UAAA,oBACA,CACA,cAAA,EACA,cAAA,GAhCA,CAkCA,GAmaA,EAAA,SAAA,EAAA,EAAA,EAAA,GAEA,IA8EA,EAAA,EAAA,EA9EA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,YACA,EAAA,EAAA,YACA,EAAA,EAAA,cACA,EAAA,EAAA,iBACA,EAAA,EAAA,gBACA,EAAA,EAAA,iBACA,EAAA,GACA,EAAA,MACA,EAAA,EACA,GACA,EACA,EACA,GACA,EACA,EACA,EACA,EACA,GACA,EACA,EACA,GAEA,EAAA,EACA,EAAA,GACA,GAAA,EACA,GACA,IAAA,GACA,EAAA,EACA,EACA,IAAA,GACA,EAAA,EACA,EACA,EAAA,GACA,GAAA,EACA,EACA,EAAA,EACA,GAAA,EACA,EACA,IAAA,EACA,EAAA,EACA,GACA,IAAA,EACA,EAAA,EACA,GACA,EAAA,EACA,GAAA,EACA,GAEA,EAAA,EACA,GAAA,GACA,GAAA,EACA,GACA,IAAA,GACA,EAAA,EACA,EACA,IAAA,GACA,EAAA,EACA,EACA,GAAA,GACA,GAAA,EACA,EACA,GAAA,EACA,GAAA,EACA,EACA,IAAA,EACA,EAAA,EACA,GACA,IAAA,EACA,EAAA,EACA,GACA,GAAA,EACA,GAAA,EACA,GAEA,GACA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,GACA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,KAIA,EAAA,WACA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,OAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,YACA,EAAA,EAAA,OAAA,mBAAA,GACA,EAAA,WAAA,GACA,IAAA,EAAA,EAAA,YAAA,WACA,EAAA,EAAA,YAAA,aACA,EAAA,IAAA,EAAA,iBACA,EAAA,kBAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,sBAAA,GACA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,IAEA,EAAA,YAAA,eAAA,EAAA,EAAA,MAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,MApBA,GAwBA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,WACA,IAAA,EAAA,IAAA,EAAA,EAAA,aAAA,EAAA,cACA,EAAA,YAAA,EACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,iBAAA,EAAA,iBACA,EAAA,IAAA,EAAA,GAAA,GASA,OARA,EAAA,aAAA,GACA,EAAA,eAAA,EAAA,aACA,EAAA,MAAA,MAAA,GACA,EAAA,UAAA,SAAA,GACA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,WACA,GAEA,IAAA,EAAA,WACA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,YACA,EAAA,EACA,EAAA,SAAA,SAAA,GACA,GAAA,EAAA,QAAA,SAEA,IAAA,EAAA,EAAA,EAAA,YAAA,WAAA,EAAA,EAAA,SAAA,WACA,EAAA,EAAA,EAAA,YAAA,aAAA,EAAA,EAAA,SAAA,aACA,EAAA,kBAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,OAAA,mBAAA,GACA,EAAA,WAAA,GACA,EAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,YAAA,WAAA,EAAA,YAAA,EAAA,SAAA,WACA,EAAA,EAAA,sBAAA,GACA,EAAA,EAAA,WACA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,IAEA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,EAAA,YAAA,eAAA,EAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GACA,EAAA,SAAA,SAAA,GACA,EAAA,UAAA,GACA,EAAA,IAAA,EAAA,EAAA,MAAA,GACA,IAAA,EAAA,EAAA,OAAA,GACA,EAAA,MAAA,EAAA,EAAA,EAAA,GACA,EAAA,cAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,OACA,EAAA,MAAA,EAAA,EAAA,IACA,EAAA,SAAA,eAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,KAEA,IAAA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,MArCA,GAyCA,EAAA,eAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,kBACA,IAAA,EAAA,IAAA,EAAA,GAAA,GACA,EAAA,IAAA,EAAA,EAAA,aAAA,EAAA,cACA,EAAA,IAAA,EAAA,EAAA,WACA,EAAA,YAAA,EACA,EAAA,SAAA,EACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,iBAAA,EAAA,iBASA,OARA,EAAA,aAAA,GACA,EAAA,eAAA,EAAA,aACA,EAAA,MAAA,MAAA,GACA,EAAA,UAAA,SAAA,GACA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,kBACA,GAEA,IACA,EADA,GACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,YACA,EAAA,EAAA,OAAA,mBAAA,GACA,EAAA,WAAA,GACA,IAAA,EAAA,EAAA,kBAAA,EAAA,GACA,EAAA,iBAAA,GACA,EAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,IAEA,EAAA,SAAA,EAAA,MAAA,EAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,OAIA,EAAA,OAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,UACA,IAAA,EAAA,IAAA,EAAA,GAAA,GACA,EAAA,MAAA,MAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,kBASA,OARA,EAAA,aAAA,EAAA,WACA,EAAA,aAAA,GACA,EAAA,eAAA,EAAA,aACA,EAAA,UAAA,SAAA,GACA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,UACA,GAEA,IAAA,EAAA,WACA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,OAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,EAAA,YACA,EAAA,EAAA,OAAA,mBAAA,GACA,EAAA,WAAA,GACA,EAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,QAAA,OAEA,GADA,GAGA,IAGA,IAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,GACA,EAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,IAEA,GAAA,EAAA,QAAA,OACA,EAAA,SAAA,SAAA,GACA,EAAA,UAAA,GACA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,EAAA,QAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,SAEA,CACA,IACA,EAAA,EAAA,MACA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,EAAA,QAAA,CACA,EAAA,GAJA,GAKA,EAAA,GACA,EAAA,IACA,EAAA,CACA,EAAA,GARA,GASA,EAAA,GACA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,QAAA,CACA,EAAA,GACA,EAAA,GAdA,GAeA,EAAA,IACA,EAAA,CACA,EAAA,GACA,EAAA,GAlBA,GAmBA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,QAAA,CACA,EAAA,GACA,EAAA,GACA,EAAA,GAxBA,IAyBA,EAAA,CACA,EAAA,GACA,EAAA,GACA,EAAA,GA5BA,IA6BA,EAAA,EAAA,GAEA,IAAA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,MA9DA,GAkEA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,SACA,IAAA,EAAA,IAAA,EAAA,GAAA,GACA,EAAA,MAAA,MAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,kBASA,OARA,EAAA,aAAA,EAAA,WACA,EAAA,aAAA,GACA,EAAA,eAAA,EAAA,aACA,EAAA,UAAA,SAAA,GACA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,SACA,GAEA,IAQA,EAAA,EACA,EAAA,EAFA,GACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,WAAA,GACA,IAAA,EAAA,EAAA,iBAAA,QAAA,EAAA,EAAA,UACA,EAAA,EAAA,OAAA,mBAAA,EAAA,UACA,EAAA,WAAA,GAMA,IALA,IAIA,EAJA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,EAAA,cAAA,KAGA,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,CACA,EAAA,MAAA,SAAA,EAAA,cAAA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GACA,EAAA,MAAA,SAAA,EAAA,cAAA,GAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,EAAA,cAAA,KAEA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EACA,EAAA,KACA,IAAA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,SAAA,EAAA,EAAA,IAOA,OALA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,SAAA,GAAA,EAAA,GACA,EAAA,oBAAA,EAAA,GACA,EAAA,IAYA,EAAA,UAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,aACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,EAAA,MAAA,MAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,kBACA,EAAA,aAAA,EAAA,WACA,IAAA,EAAA,EAQA,OAPA,EAAA,UAAA,SAAA,GACA,EAjBA,SAAA,EAAA,EAAA,EAAA,EAAA,GAIA,IAHA,IAAA,EAAA,EAAA,iBACA,EAjDA,SAAA,GAEA,IADA,IAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,GAAA,EAAA,GAAA,SAAA,GAEA,OAAA,EA4CA,CAAA,GACA,EAAA,EAAA,kBAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAEA,OAAA,EAUA,CAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,aAAA,GACA,EAAA,eAAA,EAAA,aACA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,aACA,GAEA,IAOA,EAAA,WACA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAIA,EAJA,EAAA,EAAA,eAAA,GACA,EAAA,EAAA,iBAAA,QAAA,EAAA,EAAA,UACA,EAAA,EAAA,iBAAA,QAAA,EAAA,EAAA,UACA,EAAA,GAEA,EAAA,EAAA,OAAA,mBAAA,EAAA,UAEA,IADA,EAAA,WAAA,GACA,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,CACA,IAAA,EAAA,EAAA,cAAA,GACA,EAAA,YAAA,EAAA,EAAA,EAAA,UACA,EAAA,MAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,KAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,KAGA,IAAA,EAAA,EAAA,GAAA,EAAA,EACA,EAAA,EAAA,iBAAA,EAAA,EAAA,SAAA,EAAA,aAAA,EAAA,UAAA,EAAA,EAAA,kBACA,EAAA,EAAA,EAAA,EAAA,cACA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,MAAA,EAAA,aAAA,GACA,EAAA,EAAA,0BAAA,EAAA,SAAA,EAAA,ccACA,EAAA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,IACA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EACA,IAAA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,EAAA,EAAA,IAKA,OAHA,EAAA,oBAAA,EAAA,GACA,EAAA,iBAAA,QAAA,GACA,EAAA,iBAAA,QAAA,GACA,EAAA,GAvDA,GAmEA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,SACA,EAAA,MAAA,MAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,aAAA,GAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,kBACA,EAAA,aAAA,GACA,EAAA,aAAA,EAAA,WACA,EAAA,eAAA,EAAA,aACA,IAAA,EAAA,EAMA,OALA,EAAA,UAAA,SAAA,GACA,EAnBA,SAAA,EAAA,EAAA,EAAA,EAAA,GAIA,IAHA,IAAA,EAAA,EAAA,iBACA,EAnEA,SAAA,EAAA,GAEA,IADA,IAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,GAAA,GAAA,EAAA,GAAA,SAAA,GAAA,GAEA,OAAA,EA8DA,CAAA,EAAA,EAAA,cACA,EAAA,EAAA,kBAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,OAAA,EAYA,CAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,SACA,GAEA,IAAA,EAAA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,SAAA,EACA,IAAA,EAAA,GAAA,SAAA,GAAA,EAEA,OAAA,GAqBA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,SACA,EAAA,SAAA,IAAA,EAAA,EAAA,WACA,EAAA,YAAA,IAAA,EAAA,EAAA,aAAA,EAAA,cACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,iBAAA,EAAA,iBACA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,EAAA,aAAA,GACA,EAAA,eAAA,EAAA,aACA,EAAA,MAAA,MAAA,GACA,IAAA,EAAA,EAMA,OALA,EAAA,UAAA,SAAA,GACA,EAtBA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,iBACA,EAAA,EAAA,EAAA,EAAA,YAAA,WAAA,EAAA,SAAA,YACA,EAXA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,SAAA,EACA,IAAA,EAAA,GAAA,SAAA,GAAA,EAEA,OAAA,EAKA,CAAA,EAAA,EAAA,YAAA,aAAA,EAAA,SAAA,cACA,EAAA,kBAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,IAEA,OAAA,EAaA,CAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,SACA,GAEA,IAAA,EAAA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,IAAA,EAAA,GAAA,SAAA,GAAA,EAAA,GAAA,EAEA,GAAA,GADA,KAAA,MAAA,EAAA,GAAA,OACA,GAAA,EACA,GAAA,EAEA,OAAA,GAUA,EAAA,WACA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,EAAA,EAAA,GAGA,IAFA,IAAA,EAAA,IAAA,EAAA,OACA,EAAA,EAAA,SAAA,WAAA,EAAA,EAAA,YAAA,WACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,OAAA,mBAAA,EAAA,UACA,EAAA,WAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,CACA,IAAA,EAAA,EAAA,sBAAA,GACA,EAAA,EAAA,WACA,EAAA,EAAA,UAAA,GACA,EAAA,EAAA,OACA,EAAA,EAAA,KAAA,OACA,EAAA,KAMA,GAAA,QAJA,EADA,MAAA,GAAA,MAAA,GAAA,OAAA,GAAA,OAAA,EACA,EAAA,KAAA,MAEA,EAAA,KAAA,QAEA,OAAA,EAAA,CAGA,IAAA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,IAEA,EAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OACA,EAAA,MAAA,EAAA,EAAA,IACA,EAAA,MAAA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,MAAA,EAAA,OACA,IAAA,EAAA,EAAA,OAAA,GACA,EAAA,MAAA,EAAA,EAAA,EAAA,GACA,EAAA,cAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,SAAA,eAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,YAAA,eAAA,EAAA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,YAAA,eAAA,EAAA,EAAA,MAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,WACA,QAAA,OAAA,GAAA,MAAA,qBACA,EAAA,SAAA,EAAA,EAAA,EAAA,OA3CA,GAsEA,EAAA,QAAA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,WACA,EAAA,UAAA,KAAA,MAAA,EAAA,EAAA,aAAA,GACA,EAAA,YAAA,IAAA,EAAA,EAAA,EAAA,UAAA,GACA,EAAA,aAAA,IAAA,EAAA,EAAA,EAAA,UAAA,EAAA,IACA,EAAA,aAAA,IAAA,EAAA,EAAA,EAAA,UAAA,EAAA,IACA,EAAA,cAAA,IAAA,EAAA,EAAA,EAAA,UAAA,EAAA,IACA,EAAA,SAAA,IAAA,EAAA,EAAA,EAAA,WACA,EAAA,YAAA,IAAA,EAAA,EAAA,EAAA,UAAA,EAAA,EAAA,WACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,iBAAA,EAAA,iBACA,EAAA,IAAA,EAAA,EAAA,EAAA,cAAA,GACA,EAAA,aAAA,GACA,EAAA,eAAA,EAAA,aACA,EAAA,MAAA,MAAA,GACA,IAAA,EAAA,EACA,EAAA,EAAA,OAAA,CACA,OAAA,CACA,KACA,QAGA,EAAA,IAAA,EAAA,GAAA,GAOA,OANA,EAAA,aAAA,GACA,EAAA,UAAA,SAAA,GACA,EA9CA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAOA,IANA,IAAA,EAAA,EAAA,iBACA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,EAAA,cACA,EA3DA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EACA,GAAA,EAAA,EAEA,OAAA,EAqDA,CAAA,EAAA,EAAA,EAAA,UAAA,EAAA,cACA,EAAA,GACA,EAAA,EAAA,SAAA,WAAA,EAAA,EAAA,YAAA,WACA,EAAA,EAAA,SAAA,aAAA,EAAA,EAAA,YAAA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,UAAA,GAAA,iBACA,EAAA,KAAA,GACA,GAAA,EAAA,SAAA,EACA,GAAA,EAAA,SAAA,GAGA,EAAA,kBAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAGA,OADA,EAAA,EAAA,EAAA,EAAA,GACA,EA0BA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,MAAA,IAAA,GACA,QAAA,QAAA,WACA,GAEA,EAAA,QAAA,WACA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,WAAA,GAAA,GAAA,GAAA,GACA,OAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,UAAA,GACA,GAAA,EACA,IAAA,EAAA,EAAA,UAAA,GAGA,EADA,GACA,GAFA,GAAA,GAGA,EAAA,EAAA,UAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,iBAAA,EAAA,iBACA,EAAA,eAAA,QACA,IACA,EADA,EAAA,EAAA,aAAA,EAAA,EAAA,GAEA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,WAAA,EAAA,GAAA,EAAA,WAAA,EAAA,GAAA,EAAA,WAAA,EAAA,IACA,GAAA,GACA,EAAA,IAAA,EAAA,EAAA,WAAA,EAAA,GAAA,EAAA,WAAA,EAAA,GAAA,EAAA,WAAA,EAAA,IACA,GAAA,GACA,EAAA,UAAA,EAAA,EAAA,EAAA,GAGA,IADA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,UAAA,EAAA,GAAA,EAAA,EAAA,UAAA,EAAA,GAAA,EAAA,EAAA,UAAA,EAAA,GACA,GAAA,GACA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,OAAA,GA5BA,GA+BA,IACA,EACA,EAuBA,EACA,EAAA,EA1BA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,YACA,MAAA,GAAA,EAAA,UASA,EACA,EAAA,MAAA,EAAA,GAEA,EAAA,MAAA,EAAA,EAAA,GAXA,MAAA,EACA,EAAA,EAAA,aACA,MAAA,EACA,EAAA,EAAA,cACA,MAAA,IACA,EAAA,EAAA,cASA,EAAA,cAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,eAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAGA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,EAAA,KACA,EAAA,EAAA,SACA,EAAA,IAAA,EAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,EAAA,KAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,EAAA,cAAA,MAEA,EAAA,YAAA,EAAA,EAAA,EAAA,UACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,eAAA,EAAA,EAAA,EAAA,UACA,IAAA,EAAA,EAAA,cAAA,GACA,EAAA,MAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,GACA,EAAA,MAAA,EAAA,GAAA,GAEA,MAAA,EAAA,UAAA,GAAA,MAAA,EAAA,YACA,OAAA,IACA,EAAA,GAEA,EAAA,GAEA,MAAA,EAAA,UAAA,GAAA,MAAA,OAAA,IACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KACA,EAAA,MAEA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,KAAA,EAAA,MAiBA,IAAA,EAAA,WACA,IAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,CAAA,GAAA,EAAA,EAAA,UAAA,EAAA,cACA,EAAA,EAAA,iBAAA,QAAA,EAAA,EAAA,UACA,EAAA,EAAA,iBAAA,QAAA,EAAA,EAAA,UACA,EAAA,EAAA,iBAAA,QAAA,EAAA,EAAA,UACA,EAAA,GACA,EAAA,EAAA,OAAA,mBAAA,EAAA,UACA,EAAA,WAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,sBAAA,GACA,EAAA,EAAA,iBAAA,EAAA,EAAA,SAAA,EAAA,aAAA,EAAA,UAAA,EAAA,EAAA,kBACA,EAAA,EAAA,iBAAA,EAAA,EAAA,SAAA,EAAA,aAAA,EAAA,UAAA,EAAA,EAAA,kBACA,EAAA,oBAAA,EAAA,GACA,IAAA,EAAA,EAAA,QAAA,EAAA,UAAA,GAAA,cAAA,EAAA,KACA,EAAA,EAAA,EAAA,EAAA,cACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,EAAA,UAAA,EAAA,GACA,EAAA,UAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IACA,IAAA,EAAA,EAAA,WACA,EAAA,UAAA,EAAA,EACA,EAAA,IACA,EAAA,IACA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,GAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IA1CA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,GAuCA,CAAA,EAAA,EAAA,EAAA,EAAA,WACA,IAAA,EAAA,EAAA,WACA,EAAA,EACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAIA,IAHA,IAAA,EAAA,KAAA,MAAA,EAAA,aAAA,GACA,EAAA,EAAA,0BAAA,EAAA,SAAA,EAAA,cAAA,GACA,EAAA,EAAA,EAAA,UACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,EAAA,UAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,IAAA,EAAA,EACA,EAAA,KAAA,MAAA,EAAA,EAAA,cACA,EAAA,KAAA,OAAA,EAAA,GAAA,EAAA,cACA,EAAA,KAAA,OAAA,EAAA,EAAA,WAAA,EAAA,cACA,GAAA,EACA,EAAA,EAAA,UAAA,GAAA,KACA,IAAA,EAAA,UAAA,CACA,GAAA,IAAA,EAEA,GAAA,MADA,EAAA,UAAA,GAAA,OACA,MAAA,GAAA,MAAA,GAAA,CACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,UAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,WACA,EAAA,EAAA,YAAA,EAAA,EAAA,GAEA,IADA,EAAA,KAAA,MAAA,EAAA,IACA,EAAA,EAAA,YAAA,EAAA,EAAA,WAGA,GAAA,IAAA,GAAA,EAAA,EAAA,SAEA,MADA,EAAA,UAAA,GAAA,MACA,MAAA,IACA,GAAA,GAIA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,WACA,IAAA,EAAA,KAAA,OAAA,EAAA,GAAA,EAAA,cACA,EAAA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,WAAA,EAAA,EAAA,aACA,EAAA,EAAA,WACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,sBAAA,GACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAEA,IACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,WAEA,EAAA,EAAA,WACA,IAAA,EAAA,IACA,GAAA,GAEA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EACA,IACA,GAAA,EAAA,WAOA,OAJA,EAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IA7GA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,GAyGA,CAAA,EAAA,EAAA,EAAA,EAAA,WACA,EAAA,iBAAA,QAAA,GACA,EAAA,iBAAA,QAAA,GACA,EAAA,GA1GA,GA6GA,EAAA,WACA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,EAAA,SACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,OAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,IAAA,EAAA,SAAA,CAGA,IAAA,EAAA,EAAA,OAAA,mBAAA,EAAA,UACA,EAAA,WAAA,GACA,EAAA,MAAA,SAAA,EAAA,cAAA,GAAA,EAAA,GACA,IAAA,EAAA,EAAA,CAAA,GAAA,EAAA,YAAA,WAAA,EAAA,SAAA,YACA,EAAA,EACA,EAAA,EAAA,sBAAA,GACA,EAAA,EAAA,WACA,EAAA,EAAA,WACA,EAAA,MAAA,EAAA,GACA,IAAA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,EAAA,cAAA,KACA,EAAA,EACA,EAAA,YAAA,eAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GACA,IAAA,EAAA,KACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,iBAAA,QAAA,EAAA,EAAA,UACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,SAAA,WAAA,EAAA,YAAA,WACA,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,CACA,EAAA,EAAA,OAAA,CACA,KAAA,EACA,KAAA,EAAA,cAAA,KAEA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,GACA,EAAA,MAAA,SAAA,EAAA,cAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,OAAA,GACA,EAAA,MAAA,EAAA,EAAA,EAAA,GACA,EAAA,cAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,aACA,EAAA,EAAA,sBAAA,IAEA,GAAA,EACA,IAAA,EAAA,EAAA,WACA,EAAA,SAAA,eAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,WACA,IAAA,EAAA,GAAA,EACA,EAAA,YAAA,eAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GACA,EAAA,EACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EACA,EAAA,KAAA,EAAA,GAEA,EAAA,oBAAA,EAAA,GACA,EAAA,SAAA,EAAA,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,cAjEA,GAoEA,OAAA,EA55BA,CA65BA,EA/zCA,SAAA,EAAA,GAEA,IAAA,EAwGA,EAxGA,cACA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,GACA,KAAA,YAAA,GACA,KAAA,kBAAA,EACA,KAAA,iBAAA,EACA,KAAA,gBAAA,KACA,KAAA,kBAAA,KAgGA,OA9FA,EAAA,OAAA,EAAA,EAAA,CACA,sBAAA,SAAA,GACA,OAAA,KAAA,IAAA,MAAA,IAEA,kBAAA,SAAA,EAAA,EAAA,GACA,KAAA,gBAAA,EACA,KAAA,kBAAA,EACA,IAAA,EAAA,IAAA,EAAA,EAAA,OAAA,KAAA,IAAA,KAAA,sBAAA,GAAA,EAAA,KAAA,kBAAA,KAAA,kBAEA,OADA,KAAA,YAAA,KAAA,GACA,GAEA,aAAA,SAAA,EAAA,GACA,KAAA,gBAAA,EACA,KAAA,kBAAA,EACA,IAAA,EAAA,IAAA,EAAA,KAAA,IAAA,KAAA,sBAAA,GAAA,EAAA,KAAA,kBAAA,KAAA,kBAEA,OADA,KAAA,YAAA,KAAA,GACA,GAEA,sBAAA,SAAA,GACA,IAAA,EAAA,KAAA,YAAA,KAAA,YAAA,OAAA,GAEA,GADA,EAAA,WAAA,EAAA,YACA,EACA,OAAA,EAEA,KAAA,iBAAA,EAAA,WACA,KAAA,mBAAA,EAAA,aACA,EAAA,KAAA,sBAAA,KAAA,iBACA,IAAA,EAAA,KAOA,OALA,EADA,aAAA,EACA,IAAA,EAAA,EAAA,QAAA,KAAA,IAAA,EAAA,KAAA,kBAAA,KAAA,kBAAA,KAAA,kBAEA,IAAA,EAAA,KAAA,IAAA,EAAA,KAAA,kBAAA,KAAA,kBAAA,KAAA,kBAEA,KAAA,YAAA,KAAA,GACA,GAEA,UAAA,SAAA,GACA,OAAA,KAAA,YAAA,IAEA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,YAAA,SAAA,EACA,KAAA,YAAA,GAAA,UAEA,KAAA,YAAA,IAEA,SAAA,WACA,OAAA,KAAA,YAAA,GAAA,YAEA,sBAAA,SAAA,EAAA,EAAA,GACA,GAAA,WAAA,EACA,MAAA,cAAA,EACA,EAAA,UAEA,EAAA,MAGA,GAAA,WAAA,EACA,OAAA,EAAA,OAEA,GAAA,YAAA,EACA,OAAA,EAAA,QAEA,IAAA,EAAA,EAAA,GACA,YAAA,IAAA,EAAA,EAAA,MAEA,gBAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EACA,GAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GAAA,oBAAA,EAAA,EAAA,QAKA,IAFA,EAAA,KAAA,GACA,KAAA,IAAA,UAAA,EAAA,MAAA,KACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GAAA,KAAA,GACA,EAAA,GAAA,OACA,EAAA,GAAA,eAAA,IAIA,WAAA,WACA,OAAA,KAAA,aAEA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,YAAA,GACA,UAAA,EAAA,EAAA,EAAA,IAEA,YAAA,SAAA,EAAA,EAAA,GACA,KAAA,YAAA,GACA,YAAA,EAAA,EAAA,MAGA,EAzGA,CA0GA,EAAA,GACA,SAAA,GAEA,IAAA,EAyEA,EAzEA,cACA,SAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,GACA,KAAA,YAAA,GACA,KAAA,kBAAA,EACA,KAAA,WAAA,GACA,KAAA,WAAA,EAkEA,OAhEA,EAAA,OAAA,EAAA,EAAA,CACA,kBAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,OAAA,KAAA,IAAA,EAAA,KAAA,mBAEA,OADA,KAAA,YAAA,KAAA,GACA,GAEA,aAAA,SAAA,GACA,KAAA,WAAA,GAEA,aAAA,SAAA,GACA,KAAA,WAAA,GAEA,WAAA,WACA,OAAA,KAAA,aAEA,sBAAA,SAAA,EAAA,EAAA,GACA,MAAA,YAAA,EACA,EAAA,YAEA,WAAA,EACA,EAAA,OAEA,EAAA,OAEA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,YAAA,SAAA,EACA,KAAA,YAAA,GAAA,UAEA,KAAA,YAAA,IAEA,gBAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAIA,EAJA,EAAA,EAAA,mBAKA,IAJA,IAAA,EAAA,eACA,EAAA,EAAA,EAAA,oBAGA,EAMA,IALA,EAAA,KAAA,GACA,KAAA,IAAA,UAAA,EAAA,KAAA,YACA,EAAA,WACA,KAAA,IAAA,UAAA,EAAA,UAAA,EAAA,KAAA,YAEA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GAAA,oBAAA,EAAA,EAAA,QASA,IANA,EAAA,KAAA,GACA,KAAA,IAAA,UAAA,EAAA,KAAA,YACA,KAAA,IAAA,UAAA,EAAA,MAAA,KACA,EAAA,WACA,KAAA,IAAA,UAAA,EAAA,UAAA,EAAA,KAAA,YAEA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GAAA,KAAA,GACA,EAAA,GAAA,OACA,EAAA,GAAA,eAAA,IAIA,UAAA,WACA,OAAA,KAAA,OAGA,EA1EA,GA4EA,WAEA,SAAA,EAAA,EAAA,GACA,KAAA,WAAA,EACA,KAAA,QAAA,GACA,KAAA,cAAA,EA+EA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,WAAA,EACA,KAAA,QAAA,GACA,KAAA,cAAA,EACA,KAAA,eAAA,GAAA,EACA,KAAA,kBAAA,GA6IA,OA/NA,EAAA,UAAA,CACA,SAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,KAAA,CACA,KAAA,EACA,YAAA,EACA,UAAA,EACA,QAAA,KAGA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,aAAA,EAAA,EAAA,aACA,KAAA,eACA,EAAA,MAAA,KAAA,YAEA,IAAA,EAAA,GACA,EAAA,SAAA,SAAA,EAAA,GACA,EAAA,EAAA,SAAA,EACA,EAAA,SAAA,EAAA,EAAA,EAAA,KAEA,KAAA,eACA,EAAA,IAAA,KAAA,YAEA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,EAAA,EAAA,KAAA,SACA,QAAA,IAAA,EAKA,IAFA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,YACA,EAAA,EAAA,UAAA,EAAA,EAAA,UAAA,EACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,KAIA,gBAAA,SAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,GACA,GAAA,EAAA,KAAA,SAAA,EAAA,OACA,OAAA,EAAA,YAAA,SAAA,EAAA,UAAA,GAGA,OAAA,MAEA,aAAA,SAAA,GACA,IAAA,EAAA,GACA,EAAA,SAAA,SAAA,GACA,EAAA,EAAA,UAAA,IAEA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAKA,IAJA,IAAA,EAAA,KAAA,QAAA,GAEA,GAAA,IADA,EAAA,EAAA,KAAA,SACA,EAAA,EACA,EAAA,EAAA,YACA,EAAA,EAAA,UAAA,EAAA,EAAA,UAAA,EACA,EAAA,YAAA,EAAA,IAIA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,GACA,EAAA,SAAA,SAAA,GACA,EAAA,EAAA,UAAA,IAEA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,GAEA,IAAA,IADA,EAAA,EAAA,KAAA,SAKA,IADA,IAAA,EAAA,EAAA,YACA,EAAA,EAAA,UAAA,EAAA,EAAA,UAAA,EACA,EAAA,WAAA,EAAA,MAYA,EAAA,UAAA,CACA,oBAAA,SAAA,EAAA,GACA,KAAA,kBAAA,GAAA,GAEA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,KAAA,CACA,WAAA,EACA,MAAA,EACA,UAAA,EACA,QAAA,EACA,YAAA,KAGA,QAAA,SAAA,EAAA,GACA,KAAA,eACA,EAAA,MAAA,KAAA,YAEA,IACA,EAAA,EADA,EAAA,GAEA,EAAA,KAAA,WAAA,iBAEA,IADA,QAAA,OAAA,KAAA,kBAAA,yDACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,kBAAA,GACA,QAAA,OAAA,EAAA,0CACA,IAAA,EAAA,EACA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,EACA,EAAA,gBAAA,EAAA,UAAA,KAIA,EAAA,SAAA,EAAA,cAAA,GAAA,EAAA,GACA,GAAA,GAJA,GAAA,EAMA,KAAA,eAAA,EACA,EAAA,KAAA,EAAA,iBAAA,EAAA,KAAA,iBAEA,EAAA,KAAA,GAGA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,EAAA,MACA,EAAA,EAAA,EAAA,YACA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,YACA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,UAAA,EACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAGA,KAAA,eACA,EAAA,IAAA,KAAA,aAGA,gBAAA,SAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,KAAA,WAAA,iBACA,EAAA,EAAA,OAAA,UACA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,kBAAA,GACA,EAAA,EACA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,CACA,GAAA,IAAA,EAAA,UAAA,GAAA,OAKA,OAJA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAEA,GAAA,GAGA,OAAA,MAEA,aAAA,SAAA,GACA,IACA,EAAA,EADA,EAAA,GAEA,EAAA,KAAA,WAAA,iBACA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,IAAA,aAAA,KAAA,kBAAA,GAAA,QACA,EAAA,EACA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,CACA,IAAA,EAAA,EAAA,gBAAA,EAAA,UAAA,IAAA,EAAA,EACA,EAAA,GAAA,EACA,GAAA,EAEA,KAAA,eAAA,EACA,EAAA,KAAA,EAAA,mBAAA,EAAA,KAAA,iBAEA,EAAA,KAAA,GAGA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,EAAA,MAEA,EADA,EAAA,EAAA,YACA,GACA,EAAA,EAAA,YACA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,UAAA,EACA,EAAA,YAAA,EAAA,KAIA,WAAA,SAAA,EAAA,GACA,IACA,EAAA,EADA,EAAA,GAEA,EAAA,KAAA,WAAA,iBACA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,kBAAA,GACA,EAAA,EACA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,EACA,EAAA,gBAAA,EAAA,UAAA,KAIA,EAAA,EAAA,GAAA,EACA,GAAA,GAJA,GAAA,EAMA,KAAA,eAAA,EACA,EAAA,KAAA,EAAA,iBAAA,EAAA,KAAA,iBAEA,EAAA,KAAA,GAGA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,EAAA,MAEA,EADA,EAAA,EAAA,YACA,EAAA,EAAA,GACA,EAAA,EAAA,YACA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,UAAA,EACA,EAAA,WAAA,EAAA,MAKA,CACA,iBAAA,EACA,gBAAA,GAxOA,IAyoCA,EAAA,WACA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,GACA,IAAA,EAAA,GAAA,GACA,KAAA,SAAA,GACA,KAAA,SAAA,UAAA,EAAA,WAAA,OACA,KAAA,SAAA,gBAAA,EAAA,iBAAA,EACA,KAAA,SAAA,SAAA,EAAA,UAAA,GACA,KAAA,SAAA,KAAA,EAAA,MAAA,UACA,KAAA,SAAA,UAAA,EAAA,WAAA,SACA,KAAA,SAAA,UAAA,EAAA,WAAA,OACA,KAAA,OAAA,IACA,KAAA,KAAA,EACA,KAAA,mBAAA,KAAA,IAAA,eACA,KAAA,iBAAA,IAAA,aAAA,IACA,KAAA,aAAA,EAAA,EAAA,GAGA,KAAA,iBAAA,GAAA,EAAA,GACA,KAAA,iBAAA,GAAA,EAAA,GACA,KAAA,iBAAA,GAAA,EAAA,GACA,KAAA,iBAAA,IALA,GAMA,KAAA,iBAAA,IALA,GAMA,KAAA,iBAAA,GAAA,EAAA,GACA,KAAA,iBAAA,GAAA,EAAA,GACA,KAAA,iBAAA,GAAA,EAAA,GACA,KAAA,iBAAA,GAVA,GAWA,KAAA,iBAAA,GAVA,GAWA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAfA,GAgBA,KAAA,iBAAA,KAfA,GAgBA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,KApBA,GAqBA,KAAA,iBAAA,KApBA,GAqBA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,KAzBA,GA0BA,KAAA,iBAAA,IAzBA,GA0BA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IAAA,EAAA,GACA,KAAA,iBAAA,IA9BA,GA+BA,KAAA,iBAAA,IA9BA,GAgCA,SAAA,EAAA,GAEA,IADA,IAAA,EAAA,EACA,EAAA,GACA,GAAA,EAEA,OAAA,EAwFA,OAtFA,EAAA,OAAA,EAAA,EAAA,CACA,0BAAA,aAEA,0BAAA,SAAA,EAAA,GACA,OAAA,GAEA,qBAAA,SAAA,GACA,EAAA,UAAA,KAAA,SAAA,UACA,EAAA,UAAA,OACA,EAAA,aAAA,SACA,EAAA,KAAA,KAAA,SAAA,UAAA,IAAA,KAAA,SAAA,SAAA,MAAA,KAAA,SAAA,MAEA,aAAA,SAAA,EAAA,EAAA,GACA,KAAA,qBAAA,GACA,IAAA,EAAA,EAAA,YAAA,GAAA,MAEA,EAAA,MAAA,EAAA,GACA,EAAA,OAAA,EAFA,IAGA,EAAA,UAAA,KAAA,SAAA,UACA,EAAA,YAAA,KAAA,SAAA,gBACA,EAAA,SAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QACA,KAAA,qBAAA,GACA,EAAA,YAAA,EACA,EAAA,UAAA,GACA,EAAA,UAAA,OACA,EAAA,SAAA,EAAA,EAAA,EAAA,QACA,EAAA,WAAA,EAAA,EAAA,EAAA,QACA,KAAA,SAAA,KAAA,IAAA,gBACA,KAAA,mBAAA,KAAA,SAAA,GACA,KAAA,QAAA,EAAA,EAAA,MACA,KAAA,QAfA,GAeA,EAAA,OACA,KAAA,OAAA,EACA,KAAA,QAjBA,IAmBA,mBAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,IACA,EAAA,YAAA,EAAA,qBAAA,GACA,EAAA,YAAA,EAAA,WAAA,GACA,EAAA,WAAA,EAAA,WAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,cAAA,GACA,EAAA,cAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,SACA,EAAA,cAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,SACA,EAAA,eAAA,EAAA,YACA,EAAA,YAAA,EAAA,WAAA,OAEA,KAAA,WACA,IAAA,EAAA,KAAA,IACA,EAAA,WAAA,EAAA,aAAA,KAAA,oBACA,EAAA,cAAA,EAAA,UACA,EAAA,YAAA,EAAA,WAAA,KAAA,UACA,KAAA,SAGA,EAAA,WAAA,EAAA,aAAA,KAAA,iBAAA,EAAA,aACA,KAAA,QAAA,IAEA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,KAAA,UAGA,WAAA,EAAA,CAGA,IAAA,EAAA,EAAA,KACA,EAAA,KAAA,GACA,KAAA,OACA,IAAA,EAAA,KAAA,IACA,EAAA,EAAA,mBACA,EAAA,UAAA,EAAA,mBAAA,EAAA,UAAA,KAAA,SACA,EAAA,UAAA,EAAA,mBAAA,EAAA,UAAA,KAAA,SACA,EAAA,UAAA,EAAA,mBAAA,EAAA,SAAA,EAAA,EAAA,KAAA,OAAA,EAAA,iBACA,EAAA,UAAA,EAAA,mBAAA,EAAA,UAAA,EAAA,EAAA,KAAA,QAAA,EAAA,kBACA,EAAA,UAAA,EAAA,mBAAA,EAAA,WAAA,GACA,IAAA,EAAA,EAAA,kBAAA,EAAA,cACA,EAAA,wBAAA,GACA,EAAA,oBAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,kBAAA,EAAA,cACA,EAAA,oBAAA,EAAA,EAAA,EAAA,OAAA,EAAA,GAAA,IACA,EAAA,wBAAA,GACA,EAAA,OAAA,EAAA,OACA,EAAA,UAAA,EAAA,UAAA,EAAA,qBACA,EAAA,WAAA,EAAA,UAAA,EAAA,GACA,EAAA,yBAAA,GACA,EAAA,yBAAA,GACA,EAAA,QAAA,EAAA,WAGA,EA9IA,GAgJA,EAAA,SAAA,GAEA,IA+DA,EACA,EACA,EACA,EACA,EAnEA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,SAEA,SAAA,IACA,KAAA,UAAA,GACA,KAAA,WAAA,GACA,KAAA,UAAA,EAuBA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,GACA,KAAA,kBAAA,EACA,KAAA,iBAAA,EACA,KAAA,MAAA,IAAA,EACA,KAAA,aAAA,IAAA,EAAA,YAAA,EAAA,GACA,KAAA,UAAA,IAAA,EAAA,cAAA,GACA,KAAA,IAAA,KACA,KAAA,UAAA,GACA,KAAA,QAAA,EACA,KAAA,QAAA,EACA,KAAA,cAAA,KAuIA,OAvKA,EAAA,UAAA,CACA,SAAA,WACA,OAAA,KAAA,WAEA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,WAAA,EACA,KAAA,UAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAEA,YAAA,SAAA,EAAA,EAAA,GACA,KAAA,WAAA,KAAA,EAAA,EAAA,IAEA,WAAA,WACA,OAAA,KAAA,WAAA,QAEA,UAAA,WACA,OAAA,KAAA,YAEA,SAAA,WACA,OAAA,KAAA,YA6BA,EAAA,OAAA,EAAA,EAAA,CACA,0BAAA,aAEA,0BAAA,SAAA,EAAA,GACA,OAAA,GAEA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,GADA,EAAA,GAAA,IACA,OAAA,SACA,GAAA,OACA,IAAA,EAAA,MACA,EAAA,EAAA,KAEA,EAAA,IAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,OAAA,GAKA,GAJA,EAAA,UAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,IACA,EAAA,cAAA,EAAA,EAAA,EAAA,GAAA,GACA,EAAA,CACA,IAAA,EAAA,KAAA,MAAA,WACA,KAAA,MAAA,UAAA,EAAA,EACA,EAAA,IACA,EAAA,IACA,EAAA,IACA,EAAA,GA5CA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,GAyCA,CAAA,KAAA,MAAA,EAAA,GAEA,IAAA,OAAA,IAAA,EAAA,SAAA,EAAA,SAAA,KACA,QAAA,IAAA,GACA,IAAA,EAAA,KAAA,cAAA,CACA,OAAA,EACA,SAAA,EACA,KAAA,OAGA,GADA,KAAA,UAAA,eAAA,KAAA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,CACA,IAAA,EAAA,KAAA,MAAA,WACA,KAAA,MAAA,UAAA,EAAA,EAAA,EAAA,GAnDA,SAAA,EAAA,EAAA,GAEA,IADA,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,YAAA,EAAA,EAAA,EAAA,EAAA,GA+CA,CAAA,KAAA,MAAA,EAAA,EAAA,GAEA,KAAA,QAAA,IAGA,cAAA,SAAA,GAKA,OAJA,KAAA,eAAA,KAAA,cAAA,YACA,KAAA,cAAA,KAAA,QAAA,mBAzGA,KA0GA,KAAA,UAAA,KAAA,KAAA,gBAEA,KAAA,cAAA,OAAA,IAEA,QAAA,WACA,EAAA,UAAA,QAAA,KAAA,MACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,UAAA,SAAA,EACA,KAAA,UAAA,GAAA,WAGA,UAAA,SAAA,EAAA,EAAA,GAEA,IAAA,EAAA,GADA,EAAA,GAAA,IACA,OAAA,SACA,OAAA,IAAA,EAAA,SAAA,EAAA,SAAA,KACA,EAAA,KAAA,cAAA,CACA,OAAA,EACA,SAAA,EACA,KAAA,OAEA,KAAA,aAAA,eAAA,KAAA,MAAA,EAAA,EAAA,EAAA,GACA,KAAA,QAAA,GAEA,oBAAA,WACA,KAAA,QAAA,EACA,OAAA,KAAA,KACA,KAAA,IAAA,UAEA,KAAA,IAAA,IAAA,EAAA,KAAA,IAAA,KAAA,MAAA,WAAA,KAAA,MAAA,aAAA,KAAA,kBAAA,KAAA,kBACA,KAAA,IAAA,aAAA,KAAA,MAAA,aACA,KAAA,IAAA,YAAA,KAAA,MAAA,aAEA,KAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,KAAA,SAAA,CAGA,KAAA,QACA,KAAA,sBAEA,IAAA,EAAA,KAAA,sBAAA,EAAA,EAAA,GACA,GAAA,EAAA,CAGA,EAAA,KAAA,GACA,KAAA,IAAA,UAAA,EAAA,MAAA,KACA,IAAA,EAAA,KAAA,IACA,EAAA,KAAA,GACA,EAAA,OACA,EAAA,eAAA,MAEA,sBAAA,SAAA,EAAA,EAAA,GACA,GAAA,WAAA,EACA,MAAA,cAAA,EACA,EAAA,UAEA,EAAA,MAGA,GAAA,WAAA,EACA,OAAA,EAAA,OAEA,GAAA,YAAA,EACA,OAAA,EAAA,QAEA,IAAA,EAAA,EAAA,GACA,YAAA,IAAA,EAAA,EAAA,QAGA,EAlLA,CAmLA,GACA,EAAA,WAEA,IAqEA,EAgBA,EACA,EAtFA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,IAAA,EACA,KAAA,UAAA,EACA,KAAA,MAAA,EACA,KAAA,OAAA,KAAA,MACA,KAAA,UAAA,EACA,KAAA,WAAA,EAkCA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,EAAA,MAAA,GAAA,EAAA,MAAA,GAAA,GACA,KAAA,SAAA,EAAA,MAAA,GASA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,SAAA,EAAA,GACA,EAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,SAAA,EAAA,GACA,EAAA,SAAA,EAAA,GACA,KAAA,SAAA,EAAA,SACA,EAAA,KAAA,KAAA,EAAA,EAAA,GAYA,SAAA,EAAA,EAAA,GACA,EAAA,KAAA,KAAA,KAAA,KAAA,GACA,KAAA,MAAA,EAAA,MAAA,GACA,KAAA,YAAA,GACA,KAAA,eAAA,EAiBA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,GAAA,EAAA,IACA,EAAA,KAAA,KAAA,KAAA,KAAA,GACA,KAAA,MAAA,EAAA,MAAA,GACA,KAAA,YAAA,GACA,KAAA,OAAA,EACA,KAAA,WAAA,EAsBA,SAAA,IACA,KAAA,YAAA,GAsCA,OAzJA,EAAA,UAAA,CACA,WAAA,SAAA,GACA,KAAA,SAAA,GAEA,KAAA,SAAA,GACA,IAEA,EADA,EADA,KAAA,MACA,KAAA,OAEA,IAAA,KAAA,UACA,EAAA,EAEA,KAAA,SAEA,GAAA,EADA,KAAA,MAAA,EAAA,KAAA,WACA,KAAA,WAAA,KAAA,WAGA,GADA,EAAA,KAAA,IAAA,KAAA,UAAA,IACA,KAAA,UACA,KAAA,UAAA,IAAA,GAIA,OADA,KAAA,MAAA,EAAA,GACA,KAAA,WAEA,MAAA,SAAA,EAAA,GACA,IAAA,GAAA,EAAA,KAAA,IAAA,EAAA,KAAA,KAAA,EACA,KAAA,SAAA,KAAA,OAAA,EAAA,GAAA,KAAA,IAAA,EACA,EAAA,QAAA,KAAA,WAEA,SAAA,WACA,OAAA,KAAA,YAOA,EAAA,OAAA,EAAA,EAAA,CACA,MAAA,SAAA,EAAA,GACA,IAAA,GAAA,EAAA,KAAA,IAAA,EAAA,KAAA,KAAA,EACA,EAAA,KAAA,KAAA,SAAA,KAAA,MAAA,KAAA,IAAA,GACA,EAAA,UAAA,KAAA,aAeA,EAAA,OAAA,EAAA,EAAA,CACA,OACA,EAAA,EAAA,SACA,SAAA,EAAA,GACA,EAAA,MAAA,EAAA,KAAA,MAAA,KAAA,IAAA,GACA,EAAA,SAAA,KAAA,SAAA,GACA,EAAA,YAAA,KAAA,cAUA,EAAA,OAAA,EAAA,EAAA,CACA,OACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,GACA,EAAA,SAAA,EAAA,EAAA,YACA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IACA,EAAA,EAAA,KAAA,eACA,KAAA,eAAA,EACA,EAAA,aAAA,EAAA,KAAA,MAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,YAAA,OAYA,EAAA,OAAA,EAAA,EAAA,CACA,MAAA,WACA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,OAAA,SAAA,EAAA,GACA,EAAA,SAAA,EAAA,EAAA,YACA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,KAAA,YACA,KAAA,WAAA,EACA,EAAA,aAAA,EAAA,KAAA,MAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,YAAA,IATA,GAYA,SAAA,SAAA,GACA,KAAA,OAAA,GAEA,QAAA,SAAA,GACA,KAAA,MAAA,KAMA,EAAA,UAAA,CACA,IAAA,SAAA,GACA,IAAA,EAAA,KAAA,MAIA,OAHA,KAAA,YAAA,KAAA,YAAA,OAAA,SAAA,GACA,OAAA,EAAA,KAAA,EAAA,KAEA,KAAA,YAAA,OAAA,GAEA,IAAA,SAAA,GACA,KAAA,YAAA,KAAA,IAEA,OAAA,SAAA,GACA,KAAA,YAAA,KAAA,YAAA,OAAA,SAAA,GACA,OAAA,IAAA,MAuBA,CACA,iBAAA,EACA,KArBA,SAAA,EAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,EAAA,IAqBA,OAnBA,SAAA,EAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,EAAA,IAmBA,KAjBA,SAAA,EAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,EAAA,IAiBA,YAZA,WACA,OAAA,IAAA,EAAA,CACA,EACA,EACA,GACA,MAQA,KAhBA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,KA9JA,GAgLA,EAAA,WAEA,SAAA,EAAA,EAAA,GACA,KAAA,KAAA,EACA,KAAA,IAAA,EAEA,SAAA,EAAA,GACA,EAAA,GAAA,GACA,KAAA,MAAA,EAAA,MAAA,GACA,KAAA,KAAA,EAAA,KAAA,IAKA,SAAA,IACA,KAAA,KAAA,IAqBA,OAzBA,EAAA,UAAA,OAAA,WACA,OAAA,IAAA,EAAA,KAAA,MAAA,KAAA,OAKA,EAAA,UAAA,OAAA,SAAA,EAAA,GAGA,IAFA,IAAA,EAAA,EAAA,SACA,EAAA,KACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,YAGA,EAAA,EAAA,0BAAA,EAAA,IAEA,GAAA,OAAA,EACA,OAAA,KAMA,OAAA,IAAA,EADA,GADA,OAFA,EAAA,KAAA,KAAA,IACA,EAAA,UAKA,CACA,UAAA,EACA,SAAA,EACA,KAAA,GAvCA,GA0CA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IACA,EAAA,EAAA,KACA,EAAA,EAAA,KAIA,IAAA,EACA,OAAA,uBAAA,OAAA,6BAAA,OAAA,0BAAA,SAAA,GACA,OAAA,WAAA,EAAA,IAAA,KAGA,SAAA,EAAA,EAAA,GAEA,MAAA,WADA,EAAA,GAAA,QAEA,IAAA,EAAA,UAAA,GAEA,SAAA,EACA,IAAA,EAAA,SAAA,GAEA,KAEA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,KAAA,EACA,KAAA,QAAA,EACA,KAAA,MAAA,EACA,KAAA,UAAA,EACA,KAAA,cAAA,EACA,KAAA,iBAAA,EAsBA,SAAA,EAAA,EAAA,GACA,KAAA,SAAA,KAAA,aAAA,EAAA,GACA,KAAA,cAAA,EACA,KAAA,SAAA,GACA,KAAA,YAAA,EACA,KAAA,kBAAA,EACA,KAAA,SAAA,EACA,KAAA,eAAA,KACA,KAAA,iBAAA,IAAA,EACA,KAAA,MAAA,KACA,KAAA,aAAA,KACA,KAAA,YAAA,GACA,KAAA,aAAA,IAAA,EAAA,iBACA,KAAA,qBACA,KAAA,cACA,KAAA,QAAA,KAAA,SAAA,SACA,OAAA,KAAA,SAAA,OACA,KAAA,GAAA,QAAA,KAAA,SAAA,OAEA,OAAA,KAAA,SAAA,eACA,KAAA,GAAA,cAAA,KAAA,SAAA,aAEA,aAAA,SAAA,YAAA,WAAA,SAAA,YAAA,gBAAA,SAAA,WACA,KAAA,cAEA,SAAA,iBAAA,mBAAA,EAAA,KAAA,KAAA,KAAA,cAGA,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,KAAA,EACA,EAAA,GAEA,EAEA,SAAA,EAAA,GACA,OAAA,EAAA,iBACA,QAAA,KAAA,yCAAA,2BACA,EAAA,iBAEA,EAAA,mBACA,QAAA,KAAA,2CAAA,2BACA,EAAA,mBAEA,EAAA,YACA,EAAA,YAEA,SAEA,SAAA,EAAA,GACA,OAAA,EAAA,WACA,QAAA,KAAA,mCAAA,qBACA,EAAA,WAEA,EAAA,aACA,QAAA,KAAA,qCAAA,qBACA,EAAA,aAEA,EAAA,MACA,EAAA,MAEA,KAosBA,OApxBA,EAAA,UAAA,CACA,SAAA,WACA,OAAA,KAAA,WAEA,OAAA,WACA,OAAA,KAAA,SAEA,IAAA,WACA,OAAA,KAAA,MAEA,KAAA,WACA,OAAA,KAAA,OAEA,UAAA,WACA,OAAA,KAAA,kBAEA,OAAA,WACA,OAAA,KAAA,gBAiEA,EAAA,UAAA,CACA,aAAA,SAAA,EAAA,GAEA,IAAA,EAAA,CACA,OAFA,EAAA,GAAA,IAEA,OAAA,IACA,OAAA,EAAA,QAAA,IACA,YAAA,EAAA,aAAA,EACA,UAAA,EAAA,UACA,QAAA,EAAA,EAAA,UAAA,OACA,MAAA,EAAA,EAAA,QAAA,aACA,WAAA,EAAA,SAAA,EAAA,YAAA,SACA,SAAA,EAAA,EAAA,UACA,QAAA,EAAA,EAAA,WAAA,GACA,aAAA,EAAA,SAAA,EAAA,EAAA,eAAA,UACA,aAAA,EAAA,EAAA,eAAA,KACA,eAAA,EAAA,SAAA,EAAA,EAAA,iBAAA,SACA,IAAA,EAAA,EAAA,MAAA,IACA,YAAA,EAAA,GACA,MAAA,EAAA,GACA,IAAA,EAAA,EAAA,OAAA,GACA,aAAA,EAAA,EAAA,eAAA,UAEA,EAAA,EAAA,wBAOA,MANA,SAAA,EAAA,QACA,EAAA,MAAA,EAAA,OAEA,SAAA,EAAA,SACA,EAAA,OAAA,EAAA,QAEA,GAEA,YAAA,WACA,KAAA,UAGA,KAAA,SAAA,EACA,KAAA,KAAA,gBAAA,KAAA,QAAA,gBAAA,KAAA,QAAA,kBACA,KAAA,YAAA,OAAA,KAAA,SAAA,MAAA,KAAA,SAAA,UAEA,OAAA,SAAA,EAAA,GACA,IAAA,KAAA,SAAA,OAAA,IAAA,KAAA,SAAA,SAGA,KAAA,QAAA,OAAA,EAAA,GACA,KAAA,SAAA,EACA,KAAA,SAAA,MAAA,EACA,KAAA,SAAA,OAAA,EACA,KAAA,kBAEA,UAAA,WACA,IAAA,EAAA,KAAA,YAAA,wBACA,KAAA,OAAA,EAAA,MAAA,EAAA,SAEA,GAAA,WACA,OAAA,KAAA,QAAA,MAEA,GAAA,WACA,OAAA,KAAA,cAEA,QAAA,SAAA,EAAA,GACA,QAAA,IAAA,EAEA,GADA,KAAA,SAAA,GAAA,EACA,QAAA,EACA,KAAA,KAAA,IAAA,GACA,KAAA,qBACA,GAAA,QAAA,EACA,KAAA,KAAA,gBAAA,EAAA,KAAA,GAAA,UACA,GAAA,mBAAA,EACA,KAAA,KAAA,kBAAA,EAAA,SAAA,SACA,GAAA,iBAAA,EACA,KAAA,KAAA,qBAAA,EAAA,SAAA,SACA,GAAA,iBAAA,EACA,KAAA,KAAA,gBAAA,EAAA,QACA,GAAA,iBAAA,EAAA,CACA,IAAA,EAAA,eAAA,EACA,KAAA,KAAA,0BAAA,GAGA,OAAA,KAAA,SAAA,IAEA,QAAA,SAAA,GAEA,OADA,KAAA,SAAA,QAAA,EACA,SAAA,GACA,KAAA,SAAA,UAAA,EACA,KAAA,SAAA,aAAA,QACA,KAAA,SAAA,aAAA,IAGA,WAAA,GACA,KAAA,SAAA,UAAA,EACA,KAAA,SAAA,aAAA,QACA,KAAA,SAAA,aAAA,IAGA,QAAA,GACA,KAAA,SAAA,UAAA,EACA,KAAA,SAAA,aAAA,OACA,KAAA,SAAA,aAAA,SAGA,QAAA,MAAA,2BAAA,IAEA,UAAA,WACA,OAAA,KAAA,QAAA,aAEA,gBAAA,WACA,IAAA,EAAA,CACA,MAAA,KAAA,SAAA,MACA,OAAA,KAAA,SAAA,QAEA,KAAA,YAAA,IAAA,EAAA,KAAA,QAAA,KAAA,IAEA,YAAA,WACA,IAAA,KAAA,QAAA,SAKA,OAJA,KAAA,YAAA,YAAA,KAAA,QAAA,cACA,KAAA,YAAA,UAlOA,6XAmOA,KAAA,YAAA,MAAA,MAAA,KAAA,SAAA,MAAA,KACA,KAAA,YAAA,MAAA,OAAA,KAAA,SAAA,OAAA,MACA,EAEA,KAAA,kBACA,KAAA,WAAA,KAAA,eAAA,WAAA,MACA,KAAA,kBAAA,IAAA,EAAA,cACA,KAAA,iBAAA,IAAA,EAAA,aACA,KAAA,KAAA,IAAA,EAAA,KAAA,QAAA,MACA,KAAA,KAAA,oBAAA,KAAA,QAAA,uBACA,KAAA,KAAA,gBAAA,KAAA,SAAA,cACA,IAAA,EAAA,eAAA,KAAA,SAAA,aACA,KAAA,KAAA,0BAAA,GACA,KAAA,KAAA,IAAA,KAAA,SAAA,KACA,KAAA,KAAA,YAAA,KAAA,SAAA,YACA,KAAA,KAAA,gBAAA,KAAA,SAAA,cACA,KAAA,KAAA,kBAAA,KAAA,SAAA,gBACA,KAAA,KAAA,gBAAA,KAAA,SAAA,IAAA,KAAA,GAAA,KACA,KAAA,cAAA,OAAA,KAAA,MACA,IAAA,EAAA,KAAA,QACA,EAnPA,sBAAA,KAAA,UAAA,WAmPA,QAAA,UAgBA,OAfA,KAAA,eAAA,CACA,UAAA,EAAA,WAAA,EAAA,aAAA,EAAA,WAAA,EAAA,aAAA,GACA,MAAA,EAAA,WAAA,EAAA,aAAA,EAAA,WAAA,EAAA,SAAA,GACA,QAAA,EAAA,WAAA,EAAA,WAAA,EAAA,WAAA,EAAA,WAAA,GACA,MAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,SAAA,GACA,KAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,GACA,YAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,gBAAA,GACA,OAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,IAEA,KAAA,WAAA,EAAA,KAAA,KAAA,KAAA,OACA,KAAA,cAAA,IAAA,EAAA,KAAA,QAAA,aAAA,KAAA,KAAA,MACA,KAAA,eACA,KAAA,cAAA,EACA,KAAA,eAAA,CAAA,KAAA,oBAAA,cAAA,QAEA,GAEA,cAAA,WACA,KAAA,mBAGA,KAAA,kBAAA,EACA,EAAA,KAAA,cAEA,mBAAA,WACA,OAAA,KAAA,QAAA,aAAA,yBAEA,cAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,IAAA,EACA,KAAA,SAAA,GAAA,KAAA,KAAA,KAAA,KAAA,eAAA,KAAA,SAAA,MAAA,IAGA,mBAAA,WACA,IAAA,EAAA,SAAA,cAAA,OACA,EAAA,aAAA,QAAA,oCACA,KAAA,UAAA,SAAA,cAAA,YACA,KAAA,YAAA,YAAA,GACA,EAAA,YAAA,KAAA,WACA,KAAA,UAAA,SAEA,MAAA,WACA,KAAA,UAAA,SAEA,YAAA,WACA,IAAA,EAAA,CACA,UAAA,KAAA,SAAA,UACA,OAAA,KAAA,SAAA,OACA,MAAA,KAAA,SAAA,MACA,gBAAA,KAAA,SAAA,YAEA,KAAA,QAAA,IAAA,EAAA,OAAA,KAAA,YAAA,GACA,KAAA,eAAA,SAAA,cAAA,UACA,KAAA,eAAA,MAAA,QAAA,OACA,KAAA,YAAA,YAAA,KAAA,gBACA,KAAA,cAAA,IAAA,EAAA,KAAA,QAAA,KAAA,KAAA,KAAA,KAAA,SAAA,aACA,KAAA,QAAA,aAAA,iBAAA,YAAA,EAAA,KAAA,KAAA,KAAA,cAEA,WAAA,WACA,KAAA,UAAA,SAEA,YAAA,SAAA,EAAA,GAEA,GAAA,KADA,GAAA,GAIA,OAFA,KAAA,KAAA,YAAA,QACA,KAAA,gBAGA,IAAA,EACA,IAAA,EAAA,QACA,EAAA,EAAA,SACA,EAAA,SAAA,EAAA,IAEA,EAAA,EAAA,MAAA,GAEA,KAAA,aAAA,IAAA,EAAA,OAAA,KAAA,KAAA,WAAA,EAAA,IACA,KAAA,iBAEA,UAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,EACA,KAAA,UAAA,EAAA,GACA,KAAA,YAAA,EAAA,GACA,KAAA,QAAA,EAAA,IAEA,YAAA,WACA,KAAA,aAAA,IAAA,KAAA,OAEA,KAAA,iBAGA,MAAA,WACA,GAAA,OAAA,KAAA,QAAA,CAGA,KAAA,kBAAA,EACA,KAAA,cACA,KAAA,QAAA,OACA,KAAA,cACA,IAAA,EAAA,KAAA,QAAA,KACA,EAAA,MAAA,EAAA,iBAAA,EAAA,kBACA,IAAA,EAAA,KAAA,SAAA,SAAA,OAAA,KAAA,SAAA,KAAA,MACA,OAAA,GACA,KAAA,KAAA,WAAA,EAAA,KAAA,EAAA,KAEA,EAAA,OAAA,EAAA,WACA,KAAA,SAAA,UACA,EAAA,SAAA,EAAA,MACA,EAAA,OAAA,EAAA,WACA,KAAA,cAAA,YAEA,EAAA,SAAA,EAAA,OACA,EAAA,OAAA,EAAA,OACA,EAAA,UAAA,EAAA,UAAA,EAAA,qBACA,KAAA,cAAA,YAEA,UAAA,SAAA,EAAA,GAEA,KADA,GAAA,IAKA,KAAA,aAAA,IAAA,EAAA,KAAA,KAAA,KAAA,SAAA,EAAA,MAAA,GAAA,IACA,KAAA,iBAJA,KAAA,KAAA,UAAA,IAMA,QAAA,SAAA,EAAA,GAEA,KADA,GAAA,IAKA,KAAA,aAAA,IAAA,EAAA,KAAA,KAAA,KAAA,OAAA,EAAA,IACA,KAAA,iBAJA,KAAA,KAAA,QAAA,IAMA,SAAA,SAAA,EAAA,GACA,KAAA,UAAA,EAAA,SAAA,IAEA,MAAA,WACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,SAAA,EACA,KAAA,SAAA,GAAA,UAEA,KAAA,SAAA,IAEA,YAAA,SAAA,EAAA,GACA,GAAA,aAAA,GAAA,YAAA,GAAA,UAAA,EACA,QAAA,IAAA,YACA,KAAA,UAAA,iBAAA,EAAA,GAAA,OACA,CACA,IAAA,EAAA,KAAA,YAAA,GAKA,QAJA,IAAA,IACA,EAAA,GACA,KAAA,YAAA,GAAA,GAEA,WAAA,EAAA,CACA,IAAA,EAAA,EAAA,KAAA,KAAA,cAAA,KAAA,cAAA,kBACA,EAAA,KAAA,QAEA,EAAA,KAAA,GAEA,KAAA,cAAA,gBAAA,GACA,EAAA,KAAA,QAIA,eAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,YAAA,GACA,GACA,EAAA,QAAA,SAAA,GACA,EAAA,EAAA,MAIA,aAAA,CACA,QACA,QACA,QACA,YACA,UACA,OACA,UACA,iBACA,UAEA,SAAA,SAAA,EAAA,EAAA,EAAA,GAEA,IADA,IAAA,GAAA,EACA,EAAA,EAAA,EAAA,KAAA,aAAA,SAAA,EACA,GAAA,KAAA,aAAA,KAAA,EAAA,CACA,GAAA,EACA,MAGA,GAAA,EAIA,OAAA,KAAA,GAAA,EAAA,EAAA,GAHA,QAAA,MAAA,cAAA,EAAA,kBAKA,0BAAA,SAAA,EAAA,GASA,OARA,EAAA,KAAA,uBAAA,IACA,YAAA,EAAA,aAAA,OACA,EAAA,aAAA,SAAA,EAAA,aACA,OAAA,EAAA,SAAA,EAAA,eACA,QAAA,MAAA,wBAAA,EAAA,YAAA,qCACA,EAAA,YAAA,QAGA,GAEA,uBAAA,SAAA,GAKA,OAJA,EAAA,EAAA,KAAA,IACA,iBAAA,KAAA,kBACA,EAAA,gBAAA,KAAA,iBACA,EAAA,OAAA,KAAA,iBACA,GAEA,UAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,CACA,EACA,EACA,IAEA,EAAA,UAAA,EAAA,WAAA,EACA,IAAA,EAAA,EAAA,UAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,QAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,YACA,EAAA,aAAA,KAAA,QAAA,gBACA,EAAA,iBAAA,EAAA,kBAAA,EACA,IAAA,EAAA,EAAA,QAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,MAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,CACA,EACA,EACA,IAEA,EAAA,aAAA,EAAA,cAAA,KAAA,QAAA,gBACA,EAAA,SAAA,EAAA,UAAA,EACA,EAAA,UAAA,EAAA,WAAA,EACA,IAAA,EAAA,EAAA,MAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,QAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,OACA,EAAA,SAAA,EAAA,UAAA,EACA,EAAA,aAAA,EAAA,cAAA,KAAA,QAAA,gBACA,EAAA,UAAA,EAAA,WAAA,KAAA,QAAA,aACA,EAAA,OAAA,EAAA,QAAA,GACA,EAAA,UAAA,EAAA,YAAA,EACA,IAAA,EAAA,EAAA,QAAA,EAAA,KAAA,QAAA,KAAA,GAEA,OADA,KAAA,IAAA,EAAA,IAGA,QAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,uBAAA,GACA,EAAA,EAAA,QAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,KAAA,SAAA,EAAA,EAAA,GAGA,OAFA,EAAA,GAAA,IACA,WAAA,EACA,KAAA,QAAA,EAAA,EAAA,IAEA,eAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,YACA,EAAA,OAAA,EAAA,QAAA,GACA,EAAA,UAAA,GAAA,EAAA,WAAA,KAAA,QAAA,cACA,EAAA,aAAA,EAAA,cAAA,KAAA,QAAA,gBACA,IAAA,EAAA,EAAA,eAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,MAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,YACA,EAAA,UAAA,EAAA,WAAA,EACA,IAAA,EAAA,EAAA,MAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,OAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,YACA,EAAA,UAAA,EAAA,WAAA,EACA,IAAA,EAAA,EAAA,OAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,MAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,KAAA,0BAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,CACA,EACA,EACA,IAEA,EAAA,OAAA,EAAA,QAAA,GACA,EAAA,UAAA,GAAA,EAAA,WAAA,KAAA,QAAA,cACA,EAAA,aAAA,EAAA,cAAA,KAAA,QAAA,gBACA,IAAA,EAAA,EAAA,MAAA,EAAA,KAAA,QAAA,KAAA,GACA,OAAA,KAAA,IAAA,EAAA,IAEA,2BAAA,SAAA,EAAA,EAAA,GACA,EAAA,SAAA,SAAA,GAEA,IADA,IAAA,EAAA,EAAA,MACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAGA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,OAAA,MAGA,MAAA,SAAA,GACA,IAAA,EAAA,KAAA,KAAA,WACA,EAAA,CACA,IAAA,EAAA,MACA,IAAA,EAAA,MACA,IAAA,EAAA,OAEA,GAAA,aAAA,EACA,EAAA,0BAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SACA,QAAA,IAAA,EAAA,SACA,KAAA,2BAAA,EAAA,EAAA,QACA,QAAA,IAAA,EAAA,OACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,KAAA,2BAAA,EAAA,EAAA,EAAA,IAGA,KAAA,gBAAA,EAAA,IAEA,gBAAA,SAAA,EAAA,GACA,GAAA,EAAA,GAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QACA,QAAA,MAAA,uDADA,CAIA,IAAA,EAAA,EAAA,GAAA,SACA,EAAA,EAAA,GAAA,SACA,EAAA,EAAA,GAAA,SACA,EAAA,CACA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,IAEA,EAAA,KAAA,KAAA,eACA,EAAA,KAAA,KAAA,cACA,EAAA,EAAA,GAAA,SAAA,EACA,EAAA,EAAA,GAAA,SAEA,EADA,GAAA,KAAA,IAAA,EAAA,GACA,KAAA,IAAA,GAAA,GACA,EAAA,EAAA,GAAA,EAAA,GAAA,SAEA,EAAA,KAAA,IAAA,EADA,GACA,IACA,EAAA,EAAA,EAAA,EAAA,GAAA,SACA,KAAA,KAAA,WAAA,EAAA,GACA,KAAA,UAAA,KAAA,KAAA,WAAA,EAAA,EAAA,KAAA,SAAA,aACA,KAAA,kBAEA,SAAA,WACA,IAAA,EAAA,KAAA,KAAA,WACA,EAAA,CACA,IAAA,EAAA,MACA,IAAA,EAAA,MACA,IAAA,EAAA,OAEA,KAAA,QAAA,SAAA,GACA,EAAA,WAGA,EAAA,0BAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAEA,KAAA,gBAAA,EAAA,IAEA,aAAA,aAEA,SAAA,WACA,IAAA,EAAA,KAAA,SAAA,UAAA,OAAA,KAAA,SAAA,KAAA,MACA,OAAA,GACA,KAAA,KAAA,WAAA,EAAA,KAAA,EAAA,KAEA,KAAA,iBAEA,YAAA,SAAA,GACA,YAAA,IAAA,EACA,OAAA,KAAA,aAEA,GACA,OAAA,KAAA,eACA,KAAA,aAAA,EAAA,cACA,KAAA,aAAA,IAAA,KAAA,cACA,KAAA,kBAEA,IAEA,KAAA,aAAA,OAAA,KAAA,cACA,KAAA,aAAA,KACA,KAAA,iBACA,IAEA,KAAA,SAAA,EAAA,GACA,YAAA,IAAA,EACA,OAAA,KAAA,OAEA,IAAA,GACA,KAAA,aAAA,OAAA,KAAA,OACA,KAAA,MAAA,KACA,KAAA,iBACA,KAEA,IAAA,IACA,EAAA,KAAA,GAAA,GAEA,EAAA,GAAA,CACA,EACA,EACA,GAEA,OAAA,KAAA,OACA,KAAA,MAAA,EAAA,KAAA,EAAA,GACA,KAAA,aAAA,IAAA,KAAA,SAEA,KAAA,MAAA,SAAA,GACA,KAAA,MAAA,QAAA,IAEA,KAAA,iBACA,IAEA,SAAA,SAAA,EAAA,GAEA,IAAA,EAAA,EAAA,EADA,EAAA,GAAA,IAEA,EAAA,EAAA,OAAA,KAAA,SAAA,KAAA,MACA,OAAA,GACA,KAAA,KAAA,WAAA,EAAA,KAAA,EAAA,KAEA,KAAA,SAAA,SAAA,EACA,KAAA,iBAEA,MAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,KAAA,QAAA,KAAA,KAAA,eAAA,KAAA,WAAA,EAAA,EAAA,GAEA,OADA,KAAA,IAAA,EAAA,GACA,GAEA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,uBAAA,GACA,EAAA,IAAA,EAAA,EAAA,KAAA,QAAA,KAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,QAEA,OADA,KAAA,IAAA,EAAA,GACA,GAEA,kBAAA,WACA,IAAA,EAAA,KAAA,QAAA,KACA,EAAA,WAAA,EAAA,EAAA,EAAA,GACA,EAAA,QAAA,EAAA,OACA,EAAA,MAAA,EAAA,iBAAA,EAAA,kBACA,EAAA,WAAA,KAAA,SAAA,WAAA,GAAA,KAAA,SAAA,WAAA,GAAA,KAAA,SAAA,WAAA,GAAA,GACA,EAAA,SAAA,EAAA,OACA,EAAA,OAAA,EAAA,WACA,KAAA,cAAA,WAEA,KACA,SAAA,GACA,KAAA,YAAA,OACA,KAAA,oBACA,IAAA,EAAA,IAAA,WAAA,GACA,EAAA,KAAA,QAAA,KACA,EAAA,WAAA,EAAA,EAAA,KAAA,SAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,cAAA,GACA,KAAA,YAAA,UACA,EAAA,OACA,EAAA,EAAA,MAEA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,IAAA,GACA,EAAA,EAAA,GACA,EAAA,KAAA,iBAAA,YAAA,GACA,QAAA,IAAA,EACA,OAAA,KAEA,IAAA,EAAA,EAAA,SACA,EAAA,KACA,EAAA,KAcA,OAbA,MAAA,GACA,EAAA,EAAA,KACA,EAAA,EAAA,KAAA,aAAA,GACA,EAAA,cAAA,EAAA,EAAA,KAAA,MAAA,SAEA,IAAA,EAAA,MACA,EAAA,EAAA,KACA,EAAA,EAAA,KAAA,QAEA,EAAA,EAAA,SACA,EAAA,EAAA,QAGA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,IAGA,IAAA,SAAA,EAAA,GAOA,OANA,EAAA,KAAA,GACA,KAAA,SAAA,KAAA,GACA,KAAA,SAAA,KAAA,SAAA,EAAA,GACA,OAAA,EAAA,QAAA,EAAA,UAEA,KAAA,gBACA,GAEA,aAAA,SAAA,GACA,IAAA,EAAA,EAAA,QAAA,IAAA,OAAA,QAAA,IAAA,MACA,OAAA,IAAA,OAAA,IAAA,EAAA,MAEA,QAAA,WACA,IAAA,EAAA,EAAA,IACA,IAAA,UAAA,QACA,EAAA,UAAA,GACA,EAAA,UAAA,IAEA,EAAA,UAAA,GAGA,IADA,IAAA,EAAA,KAAA,aAAA,GACA,EAAA,EAAA,EAAA,KAAA,SAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,SAAA,GACA,EAAA,KAAA,EAAA,SACA,EAAA,EAAA,KAIA,IAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,SAAA,EACA,GAAA,KAAA,SAAA,GAAA,SAAA,EACA,OAAA,KAAA,SAAA,GAIA,OADA,QAAA,MAAA,kCAAA,GACA,MAEA,KAAA,SAAA,GACA,KAAA,QAAA,EAAA,SAAA,GACA,EAAA,UAGA,KAAA,SAAA,GACA,KAAA,QAAA,EAAA,SAAA,GACA,EAAA,UAGA,GAAA,SAAA,GAGA,IAFA,IAAA,EAAA,GACA,EAAA,KAAA,aAAA,GACA,EAAA,EAAA,EAAA,KAAA,SAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,SAAA,GACA,EAAA,KAAA,EAAA,QAGA,EAAA,UAFA,EAAA,KAAA,GAKA,KAAA,SAAA,GAEA,IAAA,WACA,OAAA,KAAA,UAEA,iBAAA,WACA,OAAA,KAAA,QAAA,oBAEA,QAAA,WACA,KAAA,QACA,KAAA,QAAA,UACA,KAAA,QAAA,OAGA,EAAA,UAAA,GAAA,EAAA,UAAA,YACA,CACA,OAAA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,IAEA,iBAAA,EAAA,kBAvzBA,CAyzBA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,WAEA,SAAA,EAAA,EAAA,GACA,KAAA,QAAA,GAAA,GACA,KAAA,UAAA,GAAA,GAmBA,SAAA,EAAA,GACA,KAAA,MAAA,EACA,KAAA,YAAA,GAgBA,OAnCA,EAAA,UAAA,CACA,SAAA,SAAA,GACA,KAAA,QAAA,KAAA,IAEA,OAAA,WACA,OAAA,KAAA,SAEA,UAAA,SAAA,GACA,KAAA,UAAA,KAAA,IAEA,SAAA,WACA,OAAA,KAAA,WAEA,OAAA,SAAA,GACA,OAAA,KAAA,UAAA,KAOA,EAAA,UAAA,CACA,KAAA,WACA,OAAA,KAAA,OAEA,WAAA,WACA,OAAA,KAAA,aAEA,UAAA,SAAA,GACA,OAAA,KAAA,YAAA,IAEA,aAAA,SAAA,GACA,KAAA,YAAA,KAAA,KAGA,CACA,aAAA,EACA,SAAA,GA3CA,GAmiBA,EAAA,SAAA,EAAA,GAEA,IAAA,EAAA,EAAA,KACA,EAAA,EAAA,QACA,EAAA,EAAA,YACA,SAAA,EAAA,EAAA,GACA,OAAA,GAAA,EAAA,EAAA,WAAA,GAEA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,MAAA,EAAA,MAEA,SAAA,EAAA,GACA,MAAA,CACA,IAAA,WACA,OAAA,IAIA,SAAA,KAsFA,SAAA,EAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,WAAA,EACA,KAAA,MAAA,EACA,KAAA,cAAA,GACA,KAAA,UAAA,GACA,KAAA,eAAA,EAEA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAQA,GAPA,GACA,EAAA,EAAA,KAAA,KACA,EAAA,EAAA,KAAA,OAEA,EAAA,EAAA,KAAA,OACA,EAAA,EAAA,KAAA,MAEA,EAAA,cAAA,GACA,OAAA,EAEA,IAAA,EAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OACA,OAAA,KAAA,IAAA,EAAA,MAAA,EAEA,SAAA,EAAA,EAAA,GACA,EAAA,SAAA,GAGA,EAAA,KAAA,GAEA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,IAAA,EAAA,OACA,OAAA,EAEA,IAAA,EACA,OAAA,EAEA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,WACA,EAAA,EAAA,EAAA,OAAA,GAEA,OADA,EAAA,EAAA,MAAA,EAAA,WACA,EAwEA,SAAA,EAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,OAAA,EACA,KAAA,UAAA,GACA,KAAA,SAAA,EACA,KAAA,YAAA,GACA,KAAA,eAAA,EAsEA,OA/QA,EAAA,UAAA,CACA,SAAA,SAAA,EAAA,GACA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,UAAA,OAAA,GAAA,EAEA,IAAA,KADA,EAAA,KAAA,UAAA,GAAA,SAAA,EAAA,IAEA,OAAA,EAGA,OAAA,GAEA,UAAA,WAGA,IAFA,IAAA,EAAA,EACA,EAAA,KAAA,WACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,QAAA,OAEA,OAAA,GAEA,YAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,UAAA,OAAA,GAAA,EACA,IAAA,IAAA,EAAA,KAAA,UAAA,IACA,OAAA,GAIA,SAAA,WACA,OAAA,KAAA,WAEA,UAAA,WACA,OAAA,KAAA,YAEA,OAAA,WACA,IAAA,EAAA,KAAA,YAAA,kBAEA,OADA,EAAA,SAAA,MAAA,GACA,GAEA,cAAA,SAAA,GACA,IAAA,EAAA,KAAA,WACA,GAAA,KAAA,cAAA,CACA,IAAA,EAAA,EAAA,aAAA,EAAA,EAAA,GAAA,GACA,OAAA,IAAA,EACA,KAEA,EAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,QAAA,EACA,OAAA,EAAA,GAGA,OAAA,MAGA,oBAAA,SAAA,EAAA,GACA,IACA,EAAA,EADA,EAAA,GAEA,EAAA,KAAA,WACA,IAAA,IAAA,KAAA,cAAA,CACA,IAAA,EAAA,EAAA,0BAAA,EAAA,EAAA,GAAA,GACA,IAAA,IAAA,EACA,OAAA,EAEA,IAAA,EAAA,EAAA,0BAAA,EAAA,EAAA,GAAA,GACA,IAAA,IAAA,EACA,OAAA,EAEA,IAAA,EAAA,EAAA,GAAA,IAAA,EACA,EAAA,KAAA,KAAA,UAAA,SAGA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,EAAA,OAAA,GACA,EAAA,KAAA,GAIA,OAAA,GAEA,KAAA,SAAA,GACA,OAAA,KAAA,OA4CA,EAAA,OAAA,EAAA,EAAA,CACA,KAAA,WACA,OAAA,KAAA,OAEA,KAAA,WACA,OAAA,MAEA,WAAA,SAAA,EAAA,EAAA,GAEA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EADA,EAAA,GAAA,MAIA,OAFA,KAAA,cAAA,EAAA,KAAA,UAAA,KAAA,cAAA,GACA,KAAA,UAAA,KAAA,GACA,GAEA,SAAA,SAAA,EAAA,EAAA,GAGA,IAFA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,KAAA,UAAA,OAAA,IAAA,EAAA,CACA,IAAA,EAAA,KAAA,UAAA,GACA,EAAA,EAAA,EAAA,MAAA,EAAA,WACA,GAAA,GAAA,GAAA,GAGA,EAAA,MAAA,KAGA,kBAAA,SAAA,GACA,KAAA,uBACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,cAAA,SAAA,EACA,EAAA,KAAA,cAAA,KAGA,qBAAA,WACA,KAAA,KAAA,cAAA,OAAA,GAAA,CAKA,IAFA,IAAA,EAAA,IAAA,EAAA,cACA,EAAA,KACA,EAAA,EAAA,EAAA,KAAA,UAAA,OAAA,GAAA,EAAA,CACA,IAAA,EAAA,KAAA,UAAA,GACA,EAAA,EAAA,cACA,EAAA,EAAA,eACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,OAAA,IAAA,IAAA,EACA,EAAA,KAAA,cAAA,GACA,EAAA,KACA,EAAA,IAAA,EAAA,mBAGA,GAAA,IAAA,EAAA,SAMA,EAAA,EADA,KAAA,UAAA,EAAA,GACA,KACA,EAAA,KAAA,cAAA,GACA,EAAA,IAAA,EAAA,eAEA,EAAA,KAAA,QATA,EAAA,KAAA,GACA,EAAA,EAAA,cAUA,EAAA,KAAA,cAAA,KAEA,eAAA,WACA,IAAA,EAAA,GAIA,OAHA,KAAA,kBAAA,SAAA,GACA,EAAA,KAAA,KAEA,KAWA,EAAA,OAAA,EAAA,EAAA,CACA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,QAIA,GAHA,KAAA,cAAA,EAAA,KAAA,UAAA,KAAA,cAAA,GACA,KAAA,UAAA,KAAA,GACA,KAAA,YAAA,EAAA,OAAA,SAAA,EACA,EAEA,IADA,IAAA,EAAA,EAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,QAAA,EAAA,GAAA,QAAA,GAGA,OAAA,GAEA,QAAA,SAAA,GACA,IAAA,EAAA,KAAA,YAAA,EAAA,UAAA,OAAA,SAIA,YAHA,IAAA,IACA,EAAA,KAAA,WAAA,EAAA,YAEA,EAAA,QAAA,GAAA,IAEA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,YAAA,EAAA,UAAA,OAAA,SACA,QAAA,IAAA,EACA,OAAA,EAEA,IAAA,EAAA,EAAA,WAAA,GAOA,OANA,GAAA,IAAA,EAAA,QAAA,QAAA,WACA,KAAA,YAAA,EAAA,UAAA,OAAA,SACA,KAAA,UAAA,KAAA,UAAA,OAAA,SAAA,GACA,OAAA,IAAA,KAGA,GAEA,gBAAA,SAAA,GACA,IAAA,EAAA,KAAA,YAAA,EAAA,OAAA,SACA,YAAA,IAAA,GAGA,EAAA,SAAA,EAAA,QAEA,kBAAA,SAAA,GAEA,IADA,IAAA,EAAA,KAAA,OAAA,iBACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAEA,IADA,IAAA,EAAA,EAAA,GAAA,QAAA,KAAA,WACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,KAIA,eAAA,WACA,IAAA,EAAA,GAIA,OAHA,KAAA,kBAAA,SAAA,GACA,EAAA,KAAA,KAEA,GAEA,KAAA,WACA,OAAA,KAAA,QAEA,KAAA,WACA,OAAA,KAAA,OAAA,QAEA,UAAA,WACA,OAAA,KAAA,YAGA,CACA,MAAA,EACA,UAAA,GArSA,CA7WA,SAAA,GAEA,IAAA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,SACA,SAAA,KAoEA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,MAAA,EACA,KAAA,KAAA,EACA,KAAA,SAAA,EACA,KAAA,OAAA,GACA,KAAA,IAAA,IACA,KAAA,OAAA,EACA,KAAA,cAAA,EACA,KAAA,eAAA,EACA,KAAA,OAAA,EAAA,WAAA,OA2CA,SAAA,EAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,WAAA,EACA,KAAA,OAAA,GACA,KAAA,SAAA,EA+DA,OA1LA,EAAA,UAAA,CACA,KAAA,SAAA,GACA,OAAA,KAAA,MAEA,QAAA,WACA,MAAA,QAAA,KAAA,QAAA,QAAA,KAAA,QAEA,SAAA,SAAA,EAAA,GACA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,OAAA,OAAA,GAAA,EAAA,CACA,IAAA,IAAA,EAAA,KAAA,OAAA,GAAA,GACA,OAAA,EAEA,GAAA,EAEA,OAAA,GAEA,cAAA,WACA,IAAA,EAAA,KAAA,QAAA,OAAA,IAAA,KAAA,OAAA,KAAA,MACA,MAAA,OAAA,KAAA,UACA,EAEA,EAAA,KAAA,WAEA,KAAA,SAAA,GACA,GAAA,iBAAA,EAAA,CACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,OAAA,SAAA,EACA,GAAA,KAAA,OAAA,GAAA,SAAA,EACA,OAAA,KAAA,OAAA,GAGA,OAAA,KAEA,OAAA,GAAA,KAAA,OAAA,QAAA,EAAA,EACA,KAEA,KAAA,OAAA,IAEA,YAAA,WACA,OAAA,KAAA,cACA,KAAA,KAAA,MAEA,KAAA,eACA,KAAA,KAAA,OAEA,MAEA,OAAA,WACA,IAAA,EAAA,EACA,EAAA,EAAA,SAQA,OAPA,KAAA,SAAA,SAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,OACA,GAAA,IAEA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,EAAA,GAEA,GAEA,YAAA,WACA,OAAA,KAAA,cAEA,aAAA,WACA,OAAA,KAAA,gBAeA,EAAA,OAAA,EAAA,EAAA,CACA,YAAA,WACA,KAAA,cAAA,OAAA,KAAA,KAAA,MAAA,OAAA,KAAA,KAAA,OACA,KAAA,aAAA,OAAA,KAAA,KAAA,MAAA,OAAA,KAAA,KAAA,OAAA,OAAA,KAAA,KAAA,MAAA,OAAA,KAAA,KAAA,MAEA,KAAA,WACA,OAAA,KAAA,OAEA,QAAA,WACA,OAAA,KAAA,UAEA,IAAA,WACA,OAAA,KAAA,MAEA,KAAA,WACA,OAAA,MAEA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,YAAA,gBAAA,EAAA,EAAA,GAEA,OADA,KAAA,OAAA,KAAA,GACA,GAEA,GAAA,WACA,OAAA,KAAA,KAEA,MAAA,SAAA,GACA,KAAA,IAAA,GAEA,MAAA,WACA,OAAA,KAAA,QAEA,MAAA,WACA,OAAA,KAAA,QAEA,MAAA,WACA,OAAA,KAAA,QAEA,UAAA,WACA,OAAA,KAAA,OAAA,eASA,EAAA,OAAA,EAAA,EAAA,CACA,QAAA,SAAA,EAAA,GACA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,OAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,OAAA,GACA,GAAA,EAAA,UAAA,EAAA,QACA,OAAA,EAIA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,QAEA,OADA,KAAA,OAAA,KAAA,GACA,GAEA,WAAA,SAAA,GACA,IAAA,EAAA,KAAA,OAAA,OAIA,OAHA,KAAA,OAAA,KAAA,OAAA,OAAA,SAAA,GACA,OAAA,EAAA,UAAA,EAAA,UAEA,IAAA,KAAA,OAAA,QAEA,KAAA,WACA,OAAA,KAAA,UAEA,IAAA,WACA,OAAA,KAAA,SAAA,OAEA,QAAA,WACA,OAAA,KAAA,SAAA,WAEA,GAAA,WACA,OAAA,KAAA,SAAA,MAEA,MAAA,WACA,OAAA,KAAA,SAAA,SAEA,MAAA,WACA,OAAA,KAAA,YAEA,KAAA,WACA,OAAA,KAAA,SAAA,QAEA,MAAA,WACA,OAAA,KAAA,QAEA,cAAA,WACA,OAAA,KAAA,SAAA,iBAEA,gBAAA,SAAA,GACA,OAAA,KAAA,SAAA,SAAA,EAAA,QAEA,YAAA,WACA,OAAA,KAAA,SAAA,eAEA,aAAA,WACA,OAAA,KAAA,SAAA,gBAEA,QAAA,WACA,OAAA,KAAA,SAAA,aAGA,CACA,YAAA,EACA,QAAA,GAnMA,CAxIA,WAEA,IAAA,EAAA,EAAA,KACA,SAAA,KA4BA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,SAAA,EACA,KAAA,OAAA,GACA,KAAA,YAAA,EACA,KAAA,MAAA,EACA,KAAA,KAAA,EACA,KAAA,OAAA,EACA,KAAA,SAAA,EACA,KAAA,gBAAA,IAAA,EAAA,EAAA,KACA,KAAA,iBAAA,IAAA,EAAA,EAAA,KAiDA,SAAA,EAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,SAAA,EACA,KAAA,MAAA,EACA,KAAA,OAAA,GAqCA,OA9HA,EAAA,UAAA,CACA,UAAA,WACA,OAAA,KAAA,QAAA,QAEA,SAAA,SAAA,GAEA,IADA,IAAA,EAAA,KAAA,QACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EACA,EAAA,EAAA,KAGA,cAAA,SAAA,GACA,GAAA,OAAA,EACA,OAAA,EAKA,IAHA,IAAA,EAAA,EAAA,OACA,EAAA,KAAA,OACA,EAAA,KAAA,QACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,GAAA,EAAA,aAAA,GAAA,EAAA,aAAA,GAAA,EAAA,aAAA,GAAA,EAAA,aAAA,EACA,OAAA,EAGA,OAAA,IAeA,EAAA,OAAA,EAAA,EAAA,CACA,QAAA,SAAA,GACA,KAAA,OAAA,KAAA,IAEA,KAAA,WACA,OAAA,KAAA,OAEA,MAAA,WACA,OAAA,KAAA,QAEA,QAAA,WACA,OAAA,KAAA,UAEA,UAAA,WACA,OAAA,KAAA,SAAA,aAEA,KAAA,WACA,OAAA,MAEA,cAAA,WACA,OAAA,KAAA,UAAA,gBAAA,IAAA,KAAA,QAEA,IAAA,WACA,OAAA,KAAA,MAEA,OAAA,SAAA,GACA,EAAA,KAAA,KAAA,KAAA,IAEA,QAAA,WACA,OAAA,KAAA,UAEA,MAAA,WACA,OAAA,KAAA,QAEA,KAAA,SAAA,GACA,OAAA,KAAA,MAEA,UAAA,WACA,OAAA,KAAA,YAEA,WAAA,WACA,OAAA,KAAA,aAEA,SAAA,WACA,OAAA,KAAA,aASA,EAAA,OAAA,EAAA,EAAA,CACA,KAAA,WACA,OAAA,KAAA,OAEA,KAAA,WACA,OAAA,KAAA,MAAA,QAEA,IAAA,WACA,OAAA,KAAA,MAAA,OAEA,QAAA,WACA,OAAA,KAAA,MAAA,WAEA,QAAA,WACA,OAAA,KAAA,UAEA,MAAA,WACA,OAAA,KAAA,MAAA,SAEA,MAAA,WACA,OAAA,KAAA,MAAA,SAEA,UAAA,WACA,OAAA,KAAA,MAAA,aAEA,WAAA,WACA,OAAA,KAAA,MAAA,cAEA,cAAA,WACA,OAAA,KAAA,MAAA,iBAEA,SAAA,WACA,OAAA,KAAA,MAAA,cAGA,CACA,KAAA,EACA,SAAA,GArIA,IA8UA,WAEA,IA8BA,EACA,EAyEA,EACA,EAzGA,EAAA,EAAA,KACA,SAAA,IACA,KAAA,OAAA,GA8EA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,WAAA,EACA,KAAA,gBAAA,EACA,KAAA,cAAA,EACA,KAAA,aAAA,IAAA,KAAA,gBACA,KAAA,aAAA,KAAA,WAAA,WAAA,KAAA,cACA,IAAA,EAAA,KAAA,cAAA,KAAA,gBACA,KAAA,gBACA,EAEA,KAAA,iBACA,EACA,KAAA,iBAAA,GAEA,KAAA,QAAA,EAkEA,OA5JA,EAAA,UAAA,CACA,KAAA,SAAA,GACA,KAAA,OAAA,KAAA,IAEA,OAAA,WACA,OAAA,KAAA,OAAA,QAEA,UAAA,SAAA,GACA,OAAA,KAAA,OAAA,IAEA,MAAA,SAAA,EAAA,GAEA,OADA,EAAA,KAAA,EAAA,KAAA,OAAA,GAAA,cAAA,OACA,GAEA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,OAAA,GAKA,OAJA,EAAA,eACA,EAAA,IAAA,EAAA,EAAA,KAAA,KAAA,MAAA,EAAA,KAAA,KAAA,OAEA,EAAA,UAAA,EAAA,GACA,GAEA,cAAA,SAAA,GACA,OAAA,KAAA,OAAA,GAAA,eAEA,WACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,GACA,EAAA,EACA,KAAA,MAAA,EAAA,EAAA,GAEA,KAAA,MAAA,EAAA,GAEA,EAAA,KAAA,OAAA,OAAA,EACA,KAAA,MAAA,EAAA,EAAA,GAEA,KAAA,MAAA,EAAA,GAEA,EAAA,IAAA,EAAA,EAAA,KAGA,eAAA,SAAA,GACA,OAAA,GAEA,QAAA,SAAA,GAGA,IAFA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,GACA,EAAA,EAAA,QAAA,EAAA,KAAA,OAAA,QAAA,CAEA,IADA,IAAA,EAAA,EAAA,GAAA,OAAA,QACA,KAAA,OAAA,OAAA,GAAA,KAAA,OAAA,GAAA,QAAA,KACA,EAEA,GAAA,GAAA,KAAA,OAAA,OACA,MAGA,IADA,IAAA,EAAA,KAAA,OAAA,GAAA,QACA,EAAA,OAAA,GAAA,EAAA,GAAA,OAAA,QAAA,KACA,EAEA,GAAA,GAAA,EAAA,OACA,MAGA,IADA,IAAA,EAAA,EACA,EAAA,OAAA,GAAA,KAAA,OAAA,OAAA,GAAA,EAAA,GAAA,OAAA,UAAA,KAAA,OAAA,GAAA,WACA,IACA,EAEA,IAAA,EAAA,EACA,EAAA,KAAA,IAAA,EAAA,KAAA,EAAA,IAEA,OAAA,IAGA,EAAA,UAAA,YAAA,EAAA,UAAA,MACA,EAAA,UAAA,eAAA,EAAA,UAAA,SAiBA,EAAA,UAAA,CACA,OAAA,WACA,OAAA,KAAA,SAEA,UAAA,SAAA,GACA,OAAA,KAAA,WAAA,UAAA,KAAA,gBAAA,IAEA,cACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,GAMA,OALA,KAAA,UAAA,EAAA,GACA,KAAA,UAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,MAAA,EAAA,EAAA,GACA,EAAA,wBAAA,EAAA,KAAA,cAAA,GAAA,MAAA,EAAA,KAAA,cAAA,GAAA,MAAA,EAAA,GAAA,GACA,IAGA,YACA,SAAA,EAAA,EAAA,GACA,GAAA,IAAA,IAAA,KAAA,aACA,OAAA,KAAA,aAAA,EAAA,EAAA,EAAA,EAAA,GAEA,GAAA,IAAA,KAAA,QAAA,IAAA,KAAA,aACA,OAAA,KAAA,aAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,KAAA,cAAA,GAEA,OADA,EAAA,KAAA,EAAA,EAAA,OACA,GAGA,eACA,SAAA,EAAA,GAEA,OADA,KAAA,WAAA,SAAA,EAAA,EAAA,KAAA,iBACA,GAGA,MAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,cAAA,GACA,EAAA,KAYA,OAXA,EAAA,KAAA,EAAA,EAAA,OACA,IAAA,GAAA,KAAA,eACA,EAAA,KAAA,cAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,OACA,EAAA,MAAA,EAAA,EAAA,KAEA,IAAA,KAAA,QAAA,GAAA,KAAA,eACA,EAAA,KAAA,cAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,OACA,EAAA,MAAA,EAAA,EAAA,KAEA,GAEA,cAAA,SAAA,GACA,OAAA,KAAA,UAAA,GAAA,eAEA,eAAA,SAAA,GACA,OAAA,KAAA,gBAAA,GAEA,UAAA,SAAA,EAAA,GACA,OAAA,KAAA,WAAA,UAAA,EAAA,EAAA,KAAA,mBAGA,CACA,YAAA,EACA,cAAA,GApKA,IAidA,EAAA,EAAA,KAFA,EAyBA,CAAA,KAtBA,SAAA,EAAA,GACA,IAAA,EAAA,CACA,SAAA,EACA,SAAA,GAEA,MAAA,CACA,SAAA,WACA,OAAA,EAAA,UAEA,SAAA,WACA,OAAA,EAAA,UAEA,UAAA,SAAA,GAMA,OALA,IACA,EAAA,EAAA,UAEA,EAAA,IAAA,EAAA,EAAA,SAAA,MAAA,EAAA,SAAA,OACA,EAAA,MAAA,EAAA,EAAA,IACA,MAMA,EAAA,WACA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,IAAA,EAAA,GAAA,GACA,OAAA,EAGA,OAAA,EAwFA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,YACA,EAAA,EAAA,oBAAA,EAAA,UAAA,GAAA,EAAA,UAAA,KAEA,IAAA,EAAA,EAAA,EAAA,GACA,QAAA,IAAA,EAAA,YAAA,CACA,IAAA,EAAA,EAAA,YAAA,GAAA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,EAAA,YAAA,IAAA,GAAA,IAAA,EACA,EAAA,KAAA,EAAA,IAEA,OAAA,EAEA,GAAA,EAAA,eACA,IAAA,EAAA,SAAA,OAAA,CAEA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,SAAA,EACA,EAAA,KAAA,EAAA,EAAA,SAAA,KAEA,OAAA,EAGA,OAAA,EAsCA,MAAA,CAAA,KApCA,SAAA,EAAA,EAAA,GACA,IAAA,EArFA,SAAA,GACA,IAAA,EAAA,GAiBA,QAhBA,IAAA,EAAA,OACA,EAAA,KAAA,SAAA,GACA,OAAA,EAAA,SAAA,EAAA,aAGA,IAAA,EAAA,QACA,EAAA,KAAA,SAAA,GAEA,IADA,IAAA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,OAAA,SAAA,EACA,GAAA,IAAA,EAAA,OAAA,GACA,OAAA,EAGA,OAAA,SAGA,IAAA,EAAA,MAAA,CAEA,IADA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,MAAA,SAAA,EACA,EAAA,EAAA,MAAA,KAAA,EAEA,EAAA,KAAA,SAAA,GACA,IAAA,EAAA,EAAA,MACA,OAAA,IAAA,EAAA,KAQA,YALA,IAAA,EAAA,MACA,EAAA,KAAA,SAAA,GACA,OAAA,EAAA,QAAA,EAAA,OAGA,EAoDA,CAAA,GACA,EA/GA,SAAA,GACA,IAAA,EAAA,GAsBA,YArBA,IAAA,EAAA,OACA,EAAA,KAAA,SAAA,GACA,OAAA,EAAA,SAAA,EAAA,aAGA,IAAA,EAAA,QACA,EAAA,KAAA,SAAA,GACA,OAAA,EAAA,aAAA,EAAA,cAGA,IAAA,EAAA,QACA,EAAA,KAAA,SAAA,GAEA,IADA,IAAA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,OAAA,SAAA,EACA,GAAA,IAAA,EAAA,OAAA,GACA,OAAA,EAGA,OAAA,IAGA,EAwFA,CAAA,GACA,EApDA,SAAA,GACA,IAAA,EAAA,GAuBA,YAtBA,IAAA,EAAA,QACA,EAAA,MAAA,EAAA,YAEA,IAAA,EAAA,SACA,EAAA,OAAA,EAAA,aAEA,IAAA,EAAA,OACA,EAAA,KAAA,SAAA,GACA,OAAA,EAAA,SAAA,EAAA,aAGA,IAAA,EAAA,QACA,EAAA,KAAA,SAAA,GAEA,IADA,IAAA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,OAAA,SAAA,EACA,GAAA,IAAA,EAAA,OAAA,GACA,OAAA,EAGA,OAAA,IAGA,EA4BA,CAAA,GACA,EAAA,SACA,EAAA,SAAA,CAAA,EAAA,SAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,QAAA,GACA,GAAA,EAAA,EAAA,GAKA,IAFA,IAAA,EAAA,EAAA,EAAA,GACA,EAAA,KACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,EAAA,GAAA,GAAA,CAGA,IACA,EAAA,EAAA,SAAA,GAAA,IAIA,IAFA,IAAA,EAAA,KACA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,GAAA,KAGA,IACA,EAAA,EAAA,WAAA,EAAA,IAAA,IAEA,EAAA,QAAA,EAAA,MAIA,OAAA,IAxJA,GA4JA,EAAA,SAAA,EAAA,EAAA,GAEA,IAqTA,EArTA,EAAA,EAAA,KACA,EAAA,EAAA,MACA,EAAA,EAAA,UACA,EAAA,EAAA,KACA,EAAA,CACA,EAAA,IACA,GAAA,IACA,GAAA,KACA,GAAA,IACA,EAAA,IACA,EAAA,IACA,EAAA,IACA,EAAA,IACA,EAAA,IACA,GAAA,IACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,EAAA,KACA,EAAA,KACA,GAAA,KACA,GAAA,KACA,EAAA,KACA,GAAA,KACA,GAAA,IACA,GAAA,IACA,EAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,IACA,GAAA,KACA,GAAA,IACA,GAAA,IACA,GAAA,KACA,GAAA,IACA,GAAA,KACA,EAAA,IACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,EAAA,KACA,GAAA,IACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,IACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,IACA,EAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,IACA,GAAA,IACA,GAAA,IACA,GAAA,IACA,GAAA,KACA,GAAA,KACA,GAAA,KACA,GAAA,EACA,EAAA,KACA,GAAA,IACA,GAAA,KACA,GAAA,IACA,GAAA,MAEA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,eACA,YAAA,IAAA,EACA,EAEA,IAsBA,SAAA,KA2OA,SAAA,IACA,EAAA,KAAA,MACA,KAAA,QAAA,GACA,KAAA,YAAA,GACA,KAAA,eAAA,EAqFA,SAAA,EAAA,GACA,EAAA,KAAA,MACA,KAAA,KAAA,EACA,KAAA,QAAA,GA6EA,OAlZA,EAAA,UAAA,CACA,YAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,OAAA,GAAA,EACA,IAAA,IAAA,KAAA,QAAA,GAAA,YAAA,GACA,OAAA,GAIA,SAAA,SAAA,EAAA,GACA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,OAAA,GAAA,EAEA,IAAA,KADA,EAAA,KAAA,QAAA,GAAA,SAAA,EAAA,IAEA,OAAA,GAIA,aAAA,WAGA,IAFA,IAAA,EAAA,KAAA,SACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,WAAA,OAEA,OAAA,GAEA,UAAA,SAAA,GAEA,IADA,IAAA,EAAA,KAAA,SACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,IAAA,IAAA,EAAA,EAAA,IACA,QAIA,UAAA,WAGA,IAFA,IAAA,EAAA,KAAA,SACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,YAEA,OAAA,GAEA,MAAA,WACA,IAAA,EAAA,GAIA,OAHA,KAAA,SAAA,SAAA,GACA,EAAA,KAAA,KAEA,GAEA,KAAA,SAAA,GACA,IAAA,EAAA,EAAA,MAAA,KACA,EAAA,KAAA,MAAA,EAAA,IACA,GAAA,OAAA,EACA,OAAA,KAEA,IAAA,EAAA,EAAA,cAAA,SAAA,EAAA,GAAA,KACA,OAAA,OAAA,EACA,KAEA,EAAA,KAAA,EAAA,KAEA,OAAA,WACA,IAAA,EAAA,EAAA,SACA,EAAA,EAQA,OAPA,KAAA,SAAA,SAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,OACA,GAAA,IAEA,GACA,EAAA,MAAA,EAAA,EAAA,EAAA,GAEA,GAEA,eAAA,WACA,IAAA,EAAA,KAAA,SACA,EAAA,EAIA,OAHA,KAAA,SAAA,SAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,UAEA,IAAA,EAAA,OAAA,EAAA,KAAA,KAAA,KAEA,eAAA,WAGA,IAFA,IAAA,EAAA,KAAA,SACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,MAAA,UAAA,KAAA,MAAA,EAAA,EAAA,GAAA,kBAEA,OAAA,GAEA,OAAA,SAAA,GACA,MAAA,YAAA,EACA,KAAA,cAAA,SAAA,GACA,OAAA,EAAA,gBAGA,UAAA,EACA,KAAA,cAAA,SAAA,GACA,OAAA,EAAA,YAGA,WAAA,EACA,KAAA,cAAA,SAAA,GACA,OAAA,EAAA,gBAAA,EAAA,YAGA,EAAA,KAAA,KAAA,IAAA,EAAA,MAAA,GAAA,KAEA,cAAA,SAAA,GACA,QAAA,KAAA,qBAEA,IADA,IAAA,EAAA,IAAA,EAAA,KAAA,QACA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAIA,IAHA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,KACA,EAAA,EAAA,WACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,MACA,IACA,EAAA,EAAA,SAAA,GAAA,IAEA,EAAA,WAAA,EAAA,IAAA,IAKA,OADA,QAAA,QAAA,qBACA,GAEA,WAAA,SAAA,GACA,QAAA,KAAA,kBAEA,IADA,IAAA,EAAA,IAAA,EAAA,KAAA,QACA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAIA,IAHA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,KACA,EAAA,EAAA,WACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAIA,IAHA,IAAA,EAAA,KACA,EAAA,EAAA,GACA,EAAA,EAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,MAGA,IACA,EAAA,EAAA,SAAA,GAAA,IAEA,IACA,EAAA,EAAA,WAAA,GAAA,IAEA,EAAA,QAAA,EAAA,KAKA,OADA,QAAA,QAAA,kBACA,GAEA,SAAA,SAAA,GAEA,IADA,IAAA,EAAA,KAAA,aACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,GAAA,EAAA,GAAA,SAAA,EACA,OAAA,EAAA,GAGA,OAAA,MAEA,aAAA,SAAA,GAGA,IAFA,IAAA,EAAA,GACA,EAAA,KAAA,SACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,GAAA,QAAA,EAAA,GAGA,IADA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,EAAA,SACA,IAAA,GACA,EAAA,KAAA,GAGA,OAAA,GAEA,cACA,EAAA,EAAA,SACA,SAAA,EAAA,GACA,QAAA,KAAA,oBAEA,IAAA,GADA,EAAA,GAAA,IACA,QAAA,EACA,EAAA,EAAA,EACA,IAAA,EAAA,cACA,EAAA,GACA,EAAA,SAAA,SAAA,GACA,EAAA,KAAA,KAMA,IAJA,IAAA,EAAA,IAAA,EAAA,KAAA,QACA,EAAA,KAAA,EAAA,KACA,EAAA,KAAA,SACA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GAAA,WACA,EAAA,KACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,EAAA,KACA,GAAA,EAEA,IADA,IAAA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,EAAA,EAAA,SACA,IADA,EAIA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAEA,GADA,EAAA,IAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,SACA,EAAA,OAAA,GAAA,GAAA,CASA,GANA,IACA,EAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAEA,IACA,EAAA,EAAA,WAAA,EAAA,GAAA,OAAA,IAEA,EAAA,CACA,GAAA,EACA,MAEA,EAAA,QAAA,EAAA,GAAA,QACA,QAMA,OADA,QAAA,QAAA,oBACA,IAGA,gBAAA,WACA,OAAA,IAAA,EAAA,KAAA,UASA,EAAA,OAAA,EAAA,EAAA,CACA,YAAA,SAAA,GACA,KAAA,YAAA,KAAA,IAEA,cAAA,SAAA,GACA,KAAA,YAAA,GAEA,WAAA,WACA,OAAA,KAAA,aAEA,OAAA,WACA,OAAA,KAAA,SAEA,KAAA,WACA,OAAA,MAEA,gBAAA,SAAA,GACA,OAAA,EAAA,OAAA,cAAA,MAEA,YAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EACA,GAAA,KAAA,QAAA,GAAA,SAAA,EACA,OAAA,KAAA,QAAA,GAGA,OAAA,MAEA,MAAA,SAAA,GACA,OAAA,KAAA,YAAA,IAEA,cAAA,WACA,IAAA,EAAA,KAAA,eAEA,OADA,KAAA,gBAAA,EACA,GAEA,SAAA,SAAA,GACA,IAAA,EAAA,IAAA,EAAA,KAAA,GAEA,OADA,KAAA,QAAA,KAAA,GACA,GAEA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAGA,OAFA,EAAA,QAAA,GACA,EAAA,QAAA,GACA,GAEA,mBAAA,WACA,QAAA,KAAA,0BACA,IAAA,EAAA,KACA,EAAA,KACA,KAAA,YAAA,SAAA,GAIA,IAHA,IAAA,EAxTA,EAAA,EACA,EACA,EAuTA,EAAA,EAAA,QACA,EAAA,EAAA,OACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAIA,IAHA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,MACA,EAAA,EAAA,EAAA,WACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,WAEA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAFA,EAAA,EAAA,QAAA,EAAA,EAAA,QAGA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,QAAA,EAAA,GAIA,EAAA,cACA,OAAA,IACA,EAAA,eAAA,EAAA,gBA5UA,EA6UA,EA7UA,EA6UA,EA5UA,EA4UA,EA5UA,KAAA,KACA,EAAA,EAAA,KAAA,KACA,GAAA,GACA,EAAA,QAAA,EAAA,MAAA,EAAA,OACA,IAAA,KACA,EAAA,QAAA,EAAA,IAyUA,EAAA,gBAAA,EAAA,gBArUA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,KAAA,OACA,EAAA,EAAA,KAAA,KACA,GAAA,GACA,EAAA,QAAA,EAAA,MAAA,EAAA,OACA,IAAA,KACA,EAAA,QAAA,EAAA,GAgUA,CAAA,EAAA,EAAA,IAGA,EAAA,IAEA,QAAA,QAAA,6BAQA,EAAA,OAAA,EAAA,EAAA,CACA,KAAA,WACA,OAAA,KAAA,MAEA,WAAA,WACA,OAAA,KAAA,KAAA,cAEA,SAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,QAEA,GADA,KAAA,QAAA,KAAA,GACA,EAEA,IADA,IAAA,EAAA,EAAA,WACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,WAAA,EAAA,IAAA,GAGA,OAAA,GAEA,QAAA,SAAA,GACA,IAAA,EAAA,KAAA,MAAA,EAAA,UAAA,QAAA,QAIA,OAHA,OAAA,IACA,EAAA,KAAA,SAAA,EAAA,UAAA,UAEA,EAAA,QAAA,IAEA,WAAA,SAAA,EAAA,GACA,GAAA,OAAA,EACA,OAAA,EAEA,IAAA,EAAA,KAAA,MAAA,EAAA,UAAA,QAAA,QACA,GAAA,OAAA,EACA,OAAA,EAEA,IAAA,EAAA,EAAA,WAAA,EAAA,GAMA,OALA,GAAA,IAAA,EAAA,WAAA,SACA,KAAA,QAAA,KAAA,QAAA,OAAA,SAAA,GACA,OAAA,IAAA,KAGA,GAEA,gBAAA,SAAA,GACA,IAAA,EACA,OAAA,EAEA,IAAA,EAAA,KAAA,MAAA,EAAA,QAAA,QACA,QAAA,GAGA,EAAA,gBAAA,IAEA,YAAA,SAAA,EAAA,GACA,IAAA,EAAA,KACA,EAAA,GAQA,OAPA,EAAA,QAAA,SAAA,GACA,IAAA,EAAA,EAAA,QAAA,YACA,IAAA,EAAA,KACA,EAAA,GAAA,EAAA,SAAA,EAAA,SAAA,IAEA,EAAA,GAAA,WAAA,EAAA,KAEA,GAEA,OAAA,WACA,OAAA,KAAA,SAEA,MAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EACA,GAAA,KAAA,QAAA,GAAA,SAAA,EACA,OAAA,KAAA,QAAA,GAGA,OAAA,QAGA,CACA,QAAA,EACA,IAAA,GAzhBA,CA2hBA,EAAA,EAAA,GACA,EAAA,WAsQA,OArQA,SAAA,GACA,IAAA,EACA,EAAA,KAAA,IAAA,GAAA,IACA,EAAA,MAAA,EAEA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,OACA,EAAA,EAAA,GAAA,OACA,GAAA,EAAA,EACA,KAAA,8BACA,IAAA,EAAA,IAAA,MAAA,GACA,EAAA,IAAA,MAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,GAAA,EACA,IAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,GAEA,IADA,EAAA,KAAA,IACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,KAAA,GAEA,EAAA,KAAA,GAEA,SAAA,EAAA,EAAA,GAGA,OAFA,EAAA,KAAA,IAAA,KACA,EAAA,KAAA,IAAA,IAEA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EACA,EACA,EAAA,KAAA,KAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAIA,IAHA,EAAA,GAAA,EACA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GACA,GAAA,GAAA,EACA,EAAA,OAQA,IANA,EAAA,EAAA,GAAA,GACA,EAAA,KAAA,KAAA,GACA,GAAA,IACA,GAAA,GACA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IAAA,CAEA,IADA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAEA,IADA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAKA,IAFA,EAAA,GAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GACA,GAAA,GAAA,EACA,EAAA,MACA,CAOA,IANA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,KAAA,KAAA,GACA,GAAA,IACA,GAAA,GACA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,GAAA,GAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAEA,IADA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,EAAA,KAGA,EAAA,KAAA,IAAA,EAAA,IAAA,KAAA,IAAA,EAAA,KACA,IACA,EAAA,GAEA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,CACA,GAAA,GAAA,EAAA,CAEA,IADA,EAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAEA,IADA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,IAGA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,GAAA,EACA,EAAA,GAAA,GAAA,EAEA,EAAA,GAAA,GAAA,EACA,EAAA,EAAA,GACA,EAAA,EAEA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,CAGA,IAFA,EAAA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,GAAA,EACA,GAAA,GAAA,EAAA,CAEA,IADA,EAAA,EAAA,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,IAAA,CAEA,IADA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAEA,IADA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,GAEA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,OAEA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,GAAA,EACA,EAAA,GAAA,IAAA,EAGA,IADA,GAAA,EACA,EAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAxIA,GAwIA,IAAA,CACA,IAAA,GAAA,EACA,IAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,CACA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,CACA,GAAA,EACA,MAEA,GAAA,KAAA,IAAA,EAAA,EAAA,KAAA,EACA,MAEA,IAAA,EAAA,CACA,EAAA,EACA,EAAA,EACA,IAAA,EAAA,EAAA,EACA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,KACA,KAAA,IAAA,IAAA,IAHA,IAUA,IAJA,EAAA,EAAA,EADA,EAAA,EAAA,IAEA,EAAA,GAAA,EACA,EAAA,EAAA,EACA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAKA,GADA,EAAA,EAAA,GACA,GAAA,EAAA,CACA,GAAA,EAAA,EAEA,IADA,EAAA,IAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,IAAA,EAAA,GAAA,GAEA,MAEA,GAAA,GAAA,GACA,KAAA,yBAaA,IAZA,EAAA,EAAA,GAKA,EAAA,EADA,KAHA,EAAA,EAAA,EAAA,IAGA,IAAA,EAAA,KAFA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,MACA,EAAA,KAAA,EAAA,EAAA,GACA,GAEA,EADA,EAAA,IACA,EAAA,IAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,IAEA,EAAA,IAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAaA,IAZA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,GAAA,EACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAGA,EAAA,GAFA,EAAA,EAAA,GAEA,GADA,EAAA,EAAA,GAEA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAQA,IANA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GAAA,EAGA,GAFA,EAAA,EAAA,GAEA,GADA,EAAA,EAAA,GACA,EACA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAGA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EAGA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,IACA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IACA,GAAA,EAAA,GAAA,EAAA,GAAA,CAIA,IAHA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAEA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAEA,EAAA,EAIA,MAAA,CACA,EAAA,EACA,EAAA,EACA,EAAA,IAnQA,GAwQA,EAAA,WAEA,IAeA,EACA,EA6BA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EApDA,EAAA,EAAA,KACA,EAAA,EAAA,KAEA,GADA,EAAA,KACA,SAAA,EAAA,GAEA,GADA,EAAA,IAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,OAAA,CAGA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,OAEA,EAAA,MAAA,EAAA,EAAA,EAAA,EAAA,WAEA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,EAAA,IAAA,EAAA,EAAA,GAAA,MAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,MAAA,GACA,IAAA,EAAA,EACA,EAAA,EACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,IAAA,EAAA,GAAA,EAAA,MA8FA,SAAA,EAAA,GACA,GAAA,MAAA,GAAA,QAAA,EACA,OAAA,KAEA,GAAA,aAAA,EACA,MAAA,CACA,IAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,GAGA,QAAA,IAAA,EAAA,OAAA,CAGA,IAFA,IAAA,EAAA,GACA,EAAA,EAAA,MAAA,KACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,GAAA,SAAA,EAEA,OAAA,EAGA,IADA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,EAAA,KAAA,EAEA,OAAA,EAGA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAGA,IAFA,IAAA,EAAA,EAAA,QACA,EAAA,EAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,GAAA,OAAA,IAAA,IAAA,EAAA,EAAA,QAGA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,GAAA,EAAA,SAAA,EAAA,OAAA,CACA,EAAA,KAAA,GACA,EAAA,KAAA,GACA,SAKA,SAAA,EAAA,EAAA,EAAA,EAAA,GAKA,IAJA,IAAA,EAAA,EAAA,OAAA,kBACA,EAAA,EAAA,OAAA,kBACA,EAAA,KAAA,IAAA,EAAA,SAAA,OAAA,EAAA,SAAA,QACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,SAAA,GACA,EAAA,EAAA,SAAA,GACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,GAAA,EAAA,SAAA,EAAA,OAEA,OADA,QAAA,MAAA,SAAA,EAAA,OAAA,OAAA,EAAA,OAAA,gDACA,KAIA,IAFA,IAAA,EAAA,EAAA,SAAA,GACA,EAAA,EAAA,SAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,GAAA,EAAA,GAEA,GADA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,OAKA,IAFA,IAAA,EAAA,EAAA,WAAA,GACA,EAAA,EAAA,WAAA,GACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,QAAA,EAAA,IACA,EAAA,QAAA,EAAA,KAIA,MAAA,CACA,EACA,GA4BA,MAAA,CACA,WAtMA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,QACA,EAAA,EAAA,QAGA,GAFA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,SAAA,EAAA,OAEA,OADA,QAAA,MAAA,6BAAA,EAAA,OAAA,mBAAA,EAAA,OAAA,mBACA,EAEA,GAAA,EAAA,OAAA,EAEA,OADA,QAAA,MAAA,oDACA,EAEA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,CACA,CACA,EAAA,GACA,EAAA,GACA,EAAA,IAEA,CACA,EAAA,GACA,EAAA,GACA,EAAA,IAEA,CACA,EAAA,GACA,EAAA,GACA,EAAA,KAamCACA,EAAA,IAAA,EACA,EAAA,IAAA,EAAA,EAAA,IAEA,QAAA,IAAA,EAAA,IAAA,IACA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,GAAA,GAEA,IADA,IAAA,EAAA,EAAA,OAAA,QACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,MAAA,GACA,EAAA,cAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAEA,OAAA,IAiHA,mBAnBA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,GAGA,IAFA,IAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,WACA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,cAAA,EAAA,GAAA,OACA,OAAA,IACA,EAAA,KAAA,EAAA,IACA,EAAA,KAAA,IAGA,MAAA,CACA,EACA,MAOA,qBA5BA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,GACA,MAAA,CACA,EAAA,WACA,EAAA,eAyBA,eAAA,EACA,sBAAA,GAzPA,GA4PA,EAAA,SAAA,GAEA,IAEA,EACA,EAHA,EAAA,EAAA,KACA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,GAAA,IAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,KAAA,EAAA,GAAA,EAAA,UAAA,CAGA,IAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,MAAA,EAAA,EAAA,IACA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EACA,OAAA,EAIA,OAAA,IAGA,EAAA,SAAA,EAAA,GAOA,OAAA,EAAA,EAAA,EANA,CACA,KACA,KACA,MAEA,MAGA,EAAA,SAAA,EAAA,GAOA,OAAA,EAAA,EAAA,EANA,CACA,IACA,KACA,IAEA,OAGA,SAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,WAAA,EACA,EAAA,EAAA,GACA,EAAA,UAAA,GAAA,MAAA,KAGA,EAAA,EAAA,GACA,EAAA,UAAA,GAAA,MAAA,KAGA,EAAA,UAAA,GAAA,MAAA,KAYA,MAAA,CACA,IAAA,EAAA,IACA,QAAA,EAAA,QACA,iBAZA,SAAA,GACA,QAAA,KAAA,wBAEA,IADA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,EAAA,EAAA,SAAA,EACA,EAAA,GACA,kBAAA,GAEA,QAAA,QAAA,yBAMA,UAAA,EAAA,UACA,qBAAA,EAAA,qBACA,mBAAA,EAAA,oBAnEA,CAqEA,GACA,EAAA,SAAA,GAEA,IAAA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,SAAA,IACA,KAAA,YAAA,GACA,KAAA,SAAA,KA4DA,SAAA,EAAA,GACA,GAAA,MAAA,EAAA,GAAA,CACA,IAAA,EAAA,EAAA,OACA,GAAA,IAAA,EAAA,OAAA,CAGA,IAFA,IAAA,EAAA,EACA,EAAA,EAAA,WAAA,GACA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,OACA,EACA,EAAA,EAAA,WAAA,GAEA,OAAA,EAAA,GAEA,IAAA,EAAA,EAAA,WAAA,GACA,OAAA,GAAA,IAAA,GAAA,GACA,EAAA,GAEA,EAAA,OAAA,EAAA,GAEA,OAAA,EAAA,GAEA,SAAA,EAAA,GACA,KAAA,SAAA,GACA,KAAA,QAAA,GACA,KAAA,QAAA,GACA,KAAA,iBAAA,GACA,KAAA,WAAA,IAAA,EAAA,IACA,KAAA,iBAAA,IAAA,EACA,KAAA,WAAA,KACA,KAAA,SAAA,KACA,KAAA,UAAA,KACA,KAAA,SAAA,GACA,KAAA,SAAA,gBAAA,EAAA,cAwLA,SAAA,EAAA,GACA,OAAA,EAAA,MAAA,eAEA,SAAA,EAAA,EAAA,GACA,QAAA,KAAA,OAKA,IAJA,IAAA,EAAA,GAAA,GACA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,GACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,YAAA,EAAA,IACA,GAAA,IAAA,EAAA,MAEA,OADA,QAAA,QAAA,OACA,KAEA,GAAA,IAAA,EAAA,SAAA,CAGA,IAAA,EAAA,EAAA,SAIA,GAHA,OAAA,GACA,EAAA,KAAA,GAEA,IAAA,EAAA,iBAAA,EAAA,cAGA,OAEA,IAAA,EAAA,EAAA,SAKA,OAJA,OAAA,GACA,EAAA,KAAA,GAEA,QAAA,QAAA,OACA,EAAA,cACA,EAEA,EAAA,GAEA,SAAA,IACA,KAAA,WAAA,IAAA,EAAA,IACA,KAAA,SACA,KAAA,SAAA,EA0FA,SAAA,EAAA,GACA,QAAA,KAAA,OAGA,IAFA,IAAA,EAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,QACA,EAAA,YAAA,EAAA,IADA,KAKA,IAAA,EAAA,EAAA,SAEA,OADA,QAAA,QAAA,OACA,EAEA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,IAAA,eACA,EAAA,KAAA,MAAA,GAAA,GACA,EAAA,OAAA,WACA,EAAA,UACA,EAAA,EAAA,WAGA,EAAA,KAAA,MAcA,OAtbA,EAAA,UAAA,CACA,WAAA,WACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,KAAA,YACA,KAAA,YAAA,eAAA,IACA,EAAA,KAAA,KAAA,YAAA,IAGA,OAAA,GAEA,SAAA,SAAA,GACA,OAAA,KAAA,YAAA,IAEA,SAAA,SAAA,GAEA,GAAA,OADA,EAAA,EAAA,OAAA,KACA,IAAA,iBAAA,EAAA,OAAA,EAAA,IAAA,CACA,IAAA,EAAA,EAAA,OAAA,IAAA,OAGA,OAFA,KAAA,iBAAA,IAAA,EAAA,SAAA,QACA,KAAA,YAAA,GAAA,KAAA,kBAGA,GAAA,mCAAA,EAAA,OAAA,EAAA,KAAA,mCAAA,EAAA,OAAA,EAAA,KAeA,GAAA,YAAA,EAAA,OAAA,EAAA,GAAA,CAGA,IAFA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EACA,EAAA,EACA,MAAA,EAAA,GAAA,IACA,GAAA,EAEA,IAAA,EAAA,WAAA,EAAA,OAAA,GAAA,EAAA,IACA,EAAA,WAAA,EAAA,OAAA,GAAA,EAAA,IACA,EAAA,WAAA,EAAA,OAAA,GAAA,EAAA,IACA,EAAA,WAAA,EAAA,OAAA,GAAA,EAAA,KASA,OARA,KAAA,eAAA,EAAA,GAAA,EACA,KAAA,eAAA,EAAA,GAAA,EACA,KAAA,eAAA,EAAA,GAAA,EACA,KAAA,eAAA,GAAA,GAAA,OACA,IAAA,IACA,KAAA,eAAA,UAAA,KAAA,gBACA,KAAA,eAAA,EAAA,gBA/BA,CACA,IAAA,EAAA,EAAA,OAAA,IAAA,MAAA,KACA,MAAA,EAAA,KACA,KAAA,eAAA,IAAA,EAAA,aACA,KAAA,iBAAA,aAAA,KAAA,iBAEA,KAAA,eAAA,EAAA,SACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,CACA,IAAA,EAAA,EAAA,GAAA,OACA,EAAA,QACA,KAAA,eAAA,SAAA,OA4DA,EAAA,UAAA,CACA,SAAA,EACA,eAAA,EACA,SAAA,EACA,MAAA,EACA,iBAAA,SAAA,GACA,IAAA,EAAA,SAAA,EAAA,OAAA,GAAA,GAAA,IACA,EAAA,MAAA,EAAA,IAAA,KAAA,EAAA,IACA,EAAA,SAAA,EAAA,OAAA,GAAA,GAAA,IACA,EAAA,MAAA,EAAA,IAAA,KAAA,EAAA,IACA,EAAA,EAAA,IAYA,OAXA,KAAA,SAAA,KAAA,CACA,MAAA,CACA,EACA,GAEA,KAAA,CACA,EACA,GAEA,UAAA,KAEA,GAEA,iBAAA,SAAA,GACA,IAAA,EAAA,SAAA,EAAA,OAAA,GAAA,GAAA,IACA,EAAA,MAAA,EAAA,IAAA,KAAA,EAAA,IACA,EAAA,SAAA,EAAA,OAAA,GAAA,GAAA,IACA,EAAA,MAAA,EAAA,IAAA,KAAA,EAAA,IACA,EAAA,EAAA,IAYA,OAXA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,EACA,GAEA,KAAA,CACA,EACA,GAEA,UAAA,KAEA,GAEA,gBAAA,SAAA,GACA,IAAA,EAAA,EAAA,IACA,GAAA,MAAA,GAAA,MAAA,EACA,OAAA,EAEA,IAAA,EAAA,MAAA,EAAA,GACA,EAAA,EAAA,IACA,EAAA,EAAA,OAAA,GAAA,GAAA,OACA,EAAA,EAAA,OAAA,GAAA,GACA,EAAA,EAAA,OACA,EAAA,SAAA,EAAA,OAAA,GAAA,GAAA,IACA,GAAA,IACA,EAAA,GAEA,IAAA,EAAA,MAAA,EAAA,IAAA,KAAA,EAAA,IACA,GAAA,EACA,GAAA,EACA,KAAA,YAAA,KAAA,WAAA,SAAA,IACA,GAAA,EACA,GAAA,GAEA,KAAA,UAAA,KAAA,SAAA,QAAA,GAAA,KAAA,SAAA,YAAA,IACA,GAAA,GAEA,IACA,KAAA,WAAA,KAAA,WAAA,MAAA,IAAA,KAAA,WAAA,SAAA,IAEA,IACA,KAAA,SAAA,KAAA,WAAA,WAAA,EAAA,EAAA,IAGA,IADA,IAAA,EAAA,EAAA,SACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,GAAA,WAAA,EAAA,OAAA,GAAA,EAAA,EAAA,IAEA,IAAA,EAAA,EAAA,OAAA,GAAA,GAAA,OACA,KAAA,IACA,EAAA,EAAA,IAEA,IAAA,EAAA,WAAA,EAAA,OAAA,GAAA,GAAA,QACA,EAAA,WAAA,EAAA,OAAA,GAAA,GAAA,QACA,EAAA,KAAA,SAAA,QAAA,EAAA,EAAA,EAAA,EAAA,MAAA,GAAA,KAAA,EAAA,MAAA,GAAA,KAAA,GACA,GAAA,KAAA,SAAA,cAAA,CACA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,OAAA,IACA,KAAA,iBAAA,GAAA,EAEA,OAAA,GAEA,kBAAA,SAAA,GAGA,IAFA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,OAAA,IACA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EAAA,CACA,IAAA,EAAA,SAAA,EAAA,OAAA,GAAA,EAAA,EAAA,GAAA,OAAA,IACA,MAAA,KAGA,EAAA,GAGA,EAAA,KAAA,IAMA,OAJA,KAAA,QAAA,KAAA,CACA,KAAA,EACA,GAAA,KAEA,GAEA,YAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,EAAA,GACA,MAAA,WAAA,GAAA,WAAA,EACA,KAAA,gBAAA,GAAA,KAAA,SAAA,KAAA,MAEA,WAAA,GAEA,QADA,EAAA,OAAA,EAAA,IAEA,KAAA,iBAAA,SAAA,GAEA,KAAA,UAEA,WAAA,EACA,KAAA,iBAAA,GAAA,KAAA,SAAA,KAAA,MAEA,WAAA,EACA,KAAA,iBAAA,GAAA,KAAA,SAAA,KAAA,MAEA,KAAA,SAAA,eAAA,WAAA,EACA,KAAA,kBAAA,GAAA,KAAA,SAAA,KAAA,MAEA,WAAA,EACA,KAAA,SAEA,WAAA,EACA,KAAA,eAEA,KAAA,UAEA,OAAA,WACA,GAAA,OAAA,KAAA,WACA,OAAA,KAEA,IACA,EADA,EAAA,KAEA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,QAAA,IACA,EAAA,KAAA,WAAA,MAAA,EAAA,aAEA,EAAA,SAAA,EAAA,MAAA,EAAA,KAAA,KAGA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,SAAA,IACA,EAAA,KAAA,WAAA,MAAA,EAAA,aAEA,EAAA,SAAA,EAAA,MAAA,EAAA,KAAA,KAGA,KAAA,WAAA,cAAA,KAAA,iBAAA,cACA,KAAA,SAAA,eACA,KAAA,8BAAA,KAAA,YAEA,KAAA,WAAA,qBACA,QAAA,IAAA,WAAA,KAAA,WAAA,SAAA,OAAA,YAAA,KAAA,WAAA,eAAA,cACA,IAAA,EAAA,KAAA,WAKA,OAJA,KAAA,WAAA,IAAA,EAAA,IACA,KAAA,WAAA,KACA,KAAA,SAAA,KACA,KAAA,UAAA,KACA,GAEA,8BAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,SAAA,EAGA,IAFA,IAAA,EAAA,KAAA,QAAA,GACA,EAAA,KAAA,iBAAA,EAAA,MACA,EAAA,EAAA,EAAA,EAAA,GAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,iBAAA,EAAA,GAAA,IACA,EAAA,QAAA,EAAA,MA+CA,EAAA,UAAA,CACA,YAAA,SAAA,GACA,IAAA,EAAA,KAAA,OACA,GAAA,EAAA,EAAA,CACA,GAAA,IAAA,EAAA,CACA,IAAA,EAAA,EAAA,OACA,GAAA,IAAA,EAAA,OACA,OAAA,EAEA,KAAA,OAAA,EAIA,OAFA,KAAA,SAAA,EACA,KAAA,UACA,EAEA,GAAA,IAAA,EAAA,CAGA,GAFA,KAAA,mBAAA,SAAA,EAAA,OAAA,EAAA,GAAA,OAAA,IACA,KAAA,mBAAA,SAAA,EAAA,OAAA,EAAA,GAAA,OAAA,IACA,MAAA,KAAA,qBAAA,MAAA,KAAA,oBAEA,OADA,QAAA,MAAA,4BACA,EAEA,KAAA,SACA,IAAA,EAAA,IAAA,KAAA,WAAA,SAAA,OAAA,GACA,KAAA,cAAA,KAAA,WAAA,SAAA,GACA,KAAA,gBAAA,KAAA,cAAA,WAAA,KAAA,OAAA,GAEA,GAAA,IAAA,EAAA,CAMA,IALA,IAAA,EAAA,CACA,EACA,EACA,GAEA,EAAA,EAAA,EAAA,IAAA,EAEA,GADA,EAAA,GAAA,WAAA,EAAA,OAAA,GAAA,EAAA,IAAA,QACA,MAAA,EAAA,IAEA,OADA,QAAA,MAAA,0BACA,EAGA,IAAA,EAAA,EAAA,OAAA,GAAA,GAAA,OACA,KAAA,gBAAA,QAAA,EAAA,EAAA,GAAA,GACA,KAAA,aACA,KAAA,aAAA,KAAA,oBACA,KAAA,SAGA,GAAA,IAAA,EAAA,CACA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,OAAA,IAAA,EACA,EAAA,SAAA,EAAA,OAAA,EAAA,GAAA,OAAA,IAAA,EACA,GAAA,MAAA,IAAA,MAAA,GAEA,OADA,QAAA,MAAA,4BACA,EAEA,IAAA,EAAA,KAAA,gBAAA,QACA,KAAA,WAAA,QAAA,EAAA,GAAA,EAAA,IACA,KAAA,aACA,KAAA,aAAA,KAAA,oBACA,KAAA,SAUA,MAPA,WAAA,EAAA,OAAA,EAAA,KACA,KAAA,SAAA,EACA,KAAA,UAEA,SAAA,EAAA,OAAA,EAAA,IACA,KAAA,UAEA,GAEA,OAAA,WACA,KAAA,OAAA,EACA,KAAA,gBAAA,KACA,KAAA,cAAA,KACA,KAAA,mBAAA,KACA,KAAA,kBAAA,KACA,KAAA,WAAA,EACA,KAAA,WAAA,EACA,KAAA,OAAA,IAEA,OAAA,WACA,OAAA,KAAA,QAIA,KAAA,YAHA,QAAA,MAAA,sBACA,QAwCA,CACA,IAAA,EACA,IAAA,EACA,gBAAA,EACA,SAhBA,SAAA,EAAA,EAAA,GACA,EAAA,EAAA,SAAA,GACA,IAAA,EAAA,EAAA,EAAA,GACA,EAAA,MAcA,SAXA,SAAA,EAAA,GACA,EAAA,EAAA,SAAA,GACA,IAAA,EAAA,EAAA,GACA,EAAA,MASA,yBAAA,GApcA,CAscA,GACA,EAAA,WAEA,IAGA,EACA,EAqCA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAjDA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,GACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EACA,EAAA,gBAAA,SAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,GAAA,IAEA,IAAA,IAGA,EAAA,MAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,gBAAA,SAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,IAEA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,MAiEA,MAAA,CAAA,eA7DA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,EAAA,EAAA,SACA,SAAA,GACA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,aAAA,GACA,EAAA,SAAA,EAAA,GACA,IAAA,GAAA,EACA,EAAA,gBAAA,SAAA,EAAA,GACA,EAAA,cAAA,EAAA,EAAA,GACA,GACA,EAAA,KAAA,EAAA,GACA,EAAA,KAAA,EAAA,GACA,GAAA,IAEA,EAAA,IAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,MAGA,EAAA,IAAA,EAAA,EAAA,GACA,IAAA,EAAA,CACA,CACA,EAAA,GACA,GAEA,CACA,EAAA,GACA,GAEA,CACA,EAAA,GACA,IAGA,EAAA,KAAA,SAAA,EAAA,GACA,OAAA,EAAA,GAAA,EAAA,KAEA,IAAA,EAAA,EAAA,GAAA,GACA,EAAA,EAAA,GAAA,GACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,MAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,SAUA,OATA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,KArGA,GA4GA,CACA,OAAA,EAAA,OACA,iBAAA,EAAA,iBACA,GAAA,EACA,MAAA,EACA,IAAA,EACA,IAAA,CACA,gBAAA,EAAA,gBACA,QAAA,EAAA,SAEA,KAAA,EAAA,KACA,KAAA,EAAA,KACA,KAAA,EAAA,KACA,KAAA,EAAA,KACA,KAAA,EAAA,KACA,UAAA;;AC//SA,aAHA,IAAA,EAAA,EAAA,QAAA,WAGA,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EADAA,OAAOC,cAAgBD,OAAOC,eAAiB,GAC/CD,OAAOC,cAAcC,KAAO,SAAUC,GAC9BC,IAAAA,EAAWD,EAAQE,MAAMD,SACzBE,EAASC,EAAGC,OAAOC,SAASC,eAAeP,EAAQQ,QAAQ,IAAK,CAChEC,QAASR,EAASS,IAAI,WACtBC,MAAO,OACPC,OAAQ,OACRC,WAAW,EACXC,SAAS,IAETC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOjB,EAAQkB,QAAQC,cAChCJ,EAAIK,OAAS,WACLL,GAAe,MAAfA,EAAIM,OAAgB,CAGOC,IAFvBC,IAAAA,EAAYnB,EAAGoB,GAAGC,IAAIV,EAAIW,UAC1BC,EAAiB,GACML,EAAAA,EAAAA,EAAAA,OAAOM,QAAQ3B,EAAS4B,YAAa,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAApDC,EAAoD,EAAA,GAA/CC,EAA+C,EAAA,GAC5DJ,EAAeG,EAAIE,QAAQ,UAAW,KAAOD,EAEjD5B,EAAO8B,QACP9B,EAAO+B,SAAS,UAAWX,EAAWI,EAAeQ,KAAMR,GAC3DxB,EAAOiC,SAASb,GAChBpB,EAAOkC,WACPrC,EAAQE,MAAMoC,MAAM,KAAM,gBAC1BtC,EAAQuC,QAAQC,eAEhBxC,EAAQE,MAAMoC,MAAM,KAAM,4BAC1BtC,EAAQuC,QAAQC,WAGxBzB,EAAI0B,OACJ5C,OAAO6C,SAAW,WACdvC,EAAOwC","file":"pv.js","sourceRoot":"../../src","sourcesContent":["/**\n * PV - WebGL protein viewer v1.8.1\n * http://biasmv.github.io/pv\n * \n * Copyright 2013-2015 Marco Biasini\n * Released under the MIT license\n */\n\n  (function (root, factory) {\n      if (typeof define === 'function' && define.amd) {\n          define([], factory);\n      } else if (typeof exports === 'object') { \n        exports = factory(); \n        if (typeof module === 'object') { \n          module.exports = exports; \n        } \n      } else {\n          var pv = factory();\n          root.pv = pv;\n          root.io = pv.io;\n          root.mol = pv.mol;\n          root.color = pv.color;\n          root.rgb = pv.rgb;\n          root.viewpoint = pv.viewpoint;\n          root.vec3 = pv.vec3;\n          root.vec4 = pv.vec4;\n          root.mat3 = pv.mat3;\n          root.mat4 = pv.mat4;\n          root.quat = pv.quat;\n      }\n  }(this, function () {\n      // modules will be inlined here\n  var glMatrix, color, uniqueObjectIdPool, utils, gfxCanvas, gfxFramebuffer, bufferAllocators, gfxCam, gfxShaders, touch, mouse, geom, gfxGeomBuilders, gfxSceneNode, gfxBaseGeom, gfxVertexArrayBase, gfxVertexArray, gfxIndexedVertexArray, gfxChainData, gfxMeshGeom, gfxLineGeom, gfxVertAssoc, gfxRender, gfxLabel, gfxCustomMesh, gfxAnimation, slab, viewer, molSymmetry, molAtom, molResidue, molTrace, molChain, molBond, molSelect, molMol, svd, molSuperpose, molAll, io, viewpoint, pv, SceneNode, VertexArrayBase, IndexedVertexArray, BaseGeom, mol;\nglMatrix = function () {\n  var exports = {};\n  if (!GLMAT_EPSILON) {\n    var GLMAT_EPSILON = 0.000001;\n  }\n  if (!GLMAT_ARRAY_TYPE) {\n    var GLMAT_ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\n  }\n  if (!GLMAT_RANDOM) {\n    var GLMAT_RANDOM = Math.random;\n  }\n  var glMatrix = {};\n  glMatrix.setMatrixArrayType = function (type) {\n    GLMAT_ARRAY_TYPE = type;\n  };\n  exports.glMatrix = glMatrix;\n  var vec3 = {};\n  vec3.create = function () {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n  };\n  vec3.clone = function (a) {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n  };\n  vec3.fromValues = function (x, y, z) {\n    var out = new GLMAT_ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n  };\n  vec3.copy = function (out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n  };\n  vec3.set = function (out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n  };\n  vec3.add = function (out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n  };\n  vec3.subtract = function (out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n  };\n  vec3.sub = vec3.subtract;\n  vec3.multiply = function (out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n  };\n  vec3.mul = vec3.multiply;\n  vec3.divide = function (out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n  };\n  vec3.div = vec3.divide;\n  vec3.min = function (out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n  };\n  vec3.max = function (out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n  };\n  vec3.scale = function (out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n  };\n  vec3.scaleAndAdd = function (out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    return out;\n  };\n  vec3.distance = function (a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  };\n  vec3.dist = vec3.distance;\n  vec3.squaredDistance = function (a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];\n    return x * x + y * y + z * z;\n  };\n  vec3.sqrDist = vec3.squaredDistance;\n  vec3.length = function (a) {\n    var x = a[0], y = a[1], z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  };\n  vec3.len = vec3.length;\n  vec3.squaredLength = function (a) {\n    var x = a[0], y = a[1], z = a[2];\n    return x * x + y * y + z * z;\n  };\n  vec3.sqrLen = vec3.squaredLength;\n  vec3.negate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n  };\n  vec3.normalize = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n    var len = x * x + y * y + z * z;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      out[0] = a[0] * len;\n      out[1] = a[1] * len;\n      out[2] = a[2] * len;\n    }\n    return out;\n  };\n  vec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  };\n  vec3.cross = function (out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n  };\n  vec3.lerp = function (out, a, b, t) {\n    var ax = a[0], ay = a[1], az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n  };\n  vec3.random = function (out, scale) {\n    scale = scale || 1;\n    var r = GLMAT_RANDOM() * 2 * Math.PI;\n    var z = GLMAT_RANDOM() * 2 - 1;\n    var zScale = Math.sqrt(1 - z * z) * scale;\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n  };\n  vec3.transformMat4 = function (out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];\n    return out;\n  };\n  vec3.transformMat3 = function (out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n  };\n  vec3.transformQuat = function (out, a, q) {\n    var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n  };\n  vec3.forEach = function () {\n    var vec = vec3.create();\n    return function (a, stride, offset, count, fn, arg) {\n      var i, l;\n      if (!stride) {\n        stride = 3;\n      }\n      if (!offset) {\n        offset = 0;\n      }\n      if (count) {\n        l = Math.min(count * stride + offset, a.length);\n      } else {\n        l = a.length;\n      }\n      for (i = offset; i < l; i += stride) {\n        vec[0] = a[i];\n        vec[1] = a[i + 1];\n        vec[2] = a[i + 2];\n        fn(vec, vec, arg);\n        a[i] = vec[0];\n        a[i + 1] = vec[1];\n        a[i + 2] = vec[2];\n      }\n      return a;\n    };\n  }();\n  vec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n  };\n  exports.vec3 = vec3;\n  var vec4 = {};\n  vec4.create = function () {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n  };\n  vec4.clone = function (a) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n  vec4.fromValues = function (x, y, z, w) {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  };\n  vec4.copy = function (out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n  };\n  vec4.set = function (out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  };\n  vec4.add = function (out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n  };\n  vec4.subtract = function (out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n  };\n  vec4.sub = vec4.subtract;\n  vec4.multiply = function (out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n  };\n  vec4.mul = vec4.multiply;\n  vec4.divide = function (out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n  };\n  vec4.div = vec4.divide;\n  vec4.min = function (out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n  };\n  vec4.max = function (out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n  };\n  vec4.scale = function (out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n  };\n  vec4.scaleAndAdd = function (out, a, b, scale) {\n    out[0] = a[0] + b[0] * scale;\n    out[1] = a[1] + b[1] * scale;\n    out[2] = a[2] + b[2] * scale;\n    out[3] = a[3] + b[3] * scale;\n    return out;\n  };\n  vec4.distance = function (a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  };\n  vec4.dist = vec4.distance;\n  vec4.squaredDistance = function (a, b) {\n    var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];\n    return x * x + y * y + z * z + w * w;\n  };\n  vec4.sqrDist = vec4.squaredDistance;\n  vec4.length = function (a) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  };\n  vec4.len = vec4.length;\n  vec4.squaredLength = function (a) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    return x * x + y * y + z * z + w * w;\n  };\n  vec4.sqrLen = vec4.squaredLength;\n  vec4.negate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n  };\n  vec4.normalize = function (out, a) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    var len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      out[0] = a[0] * len;\n      out[1] = a[1] * len;\n      out[2] = a[2] * len;\n      out[3] = a[3] * len;\n    }\n    return out;\n  };\n  vec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  };\n  vec4.lerp = function (out, a, b, t) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n  };\n  vec4.random = function (out, scale) {\n    scale = scale || 1;\n    out[0] = GLMAT_RANDOM();\n    out[1] = GLMAT_RANDOM();\n    out[2] = GLMAT_RANDOM();\n    out[3] = GLMAT_RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n  };\n  vec4.transformMat4 = function (out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n  };\n  vec4.transformQuat = function (out, a, q) {\n    var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n  };\n  vec4.forEach = function () {\n    var vec = vec4.create();\n    return function (a, stride, offset, count, fn, arg) {\n      var i, l;\n      if (!stride) {\n        stride = 4;\n      }\n      if (!offset) {\n        offset = 0;\n      }\n      if (count) {\n        l = Math.min(count * stride + offset, a.length);\n      } else {\n        l = a.length;\n      }\n      for (i = offset; i < l; i += stride) {\n        vec[0] = a[i];\n        vec[1] = a[i + 1];\n        vec[2] = a[i + 2];\n        vec[3] = a[i + 3];\n        fn(vec, vec, arg);\n        a[i] = vec[0];\n        a[i + 1] = vec[1];\n        a[i + 2] = vec[2];\n        a[i + 3] = vec[3];\n      }\n      return a;\n    };\n  }();\n  vec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n  };\n  exports.vec4 = vec4;\n  var mat3 = {};\n  mat3.create = function () {\n    var out = new GLMAT_ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  };\n  mat3.fromMat4 = function (out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n  };\n  mat3.clone = function (a) {\n    var out = new GLMAT_ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  };\n  mat3.copy = function (out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n  };\n  mat3.identity = function (out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n  };\n  mat3.transpose = function (out, a) {\n    if (out === a) {\n      var a01 = a[1], a02 = a[2], a12 = a[5];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a01;\n      out[5] = a[7];\n      out[6] = a02;\n      out[7] = a12;\n    } else {\n      out[0] = a[0];\n      out[1] = a[3];\n      out[2] = a[6];\n      out[3] = a[1];\n      out[4] = a[4];\n      out[5] = a[7];\n      out[6] = a[2];\n      out[7] = a[5];\n      out[8] = a[8];\n    }\n    return out;\n  };\n  mat3.invert = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b01 = a22 * a11 - a12 * a21, b11 = -a22 * a10 + a12 * a20, b21 = a21 * a10 - a11 * a20, det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n      return null;\n    }\n    det = 1 / det;\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  };\n  mat3.adjoint = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];\n    out[0] = a11 * a22 - a12 * a21;\n    out[1] = a02 * a21 - a01 * a22;\n    out[2] = a01 * a12 - a02 * a11;\n    out[3] = a12 * a20 - a10 * a22;\n    out[4] = a00 * a22 - a02 * a20;\n    out[5] = a02 * a10 - a00 * a12;\n    out[6] = a10 * a21 - a11 * a20;\n    out[7] = a01 * a20 - a00 * a21;\n    out[8] = a00 * a11 - a01 * a10;\n    return out;\n  };\n  mat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n  };\n  mat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n  };\n  mat3.mul = mat3.multiply;\n  mat3.translate = function (out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n  };\n  mat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n  };\n  mat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;\n    out[0] = 1 - (yy + zz);\n    out[3] = xy + wz;\n    out[6] = xz - wy;\n    out[1] = xy - wz;\n    out[4] = 1 - (xx + zz);\n    out[7] = yz + wx;\n    out[2] = xz + wy;\n    out[5] = yz - wx;\n    out[8] = 1 - (xx + yy);\n    return out;\n  };\n  mat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    return out;\n  };\n  mat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n  };\n  exports.mat3 = mat3;\n  var mat4 = {};\n  mat4.create = function () {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  };\n  mat4.fromValues = function (m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m10;\n    out[2] = m20, out[3] = m30;\n    out[4] = m01;\n    out[5] = m11;\n    out[6] = m21;\n    out[7] = m31;\n    out[8] = m02;\n    out[9] = m12;\n    out[10] = m22;\n    out[11] = m32;\n    out[12] = m03;\n    out[13] = m13;\n    out[14] = m23;\n    out[15] = m33;\n    return out;\n  };\n  mat4.clone = function (a) {\n    var out = new GLMAT_ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  };\n  mat4.copy = function (out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  };\n  mat4.identity = function (out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  };\n  mat4.transpose = function (out, a) {\n    if (out === a) {\n      var a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a01;\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a02;\n      out[9] = a12;\n      out[11] = a[14];\n      out[12] = a03;\n      out[13] = a13;\n      out[14] = a23;\n    } else {\n      out[0] = a[0];\n      out[1] = a[4];\n      out[2] = a[8];\n      out[3] = a[12];\n      out[4] = a[1];\n      out[5] = a[5];\n      out[6] = a[9];\n      out[7] = a[13];\n      out[8] = a[2];\n      out[9] = a[6];\n      out[10] = a[10];\n      out[11] = a[14];\n      out[12] = a[3];\n      out[13] = a[7];\n      out[14] = a[11];\n      out[15] = a[15];\n    }\n    return out;\n  };\n  mat4.invert = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (!det) {\n      return null;\n    }\n    det = 1 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n  };\n  mat4.adjoint = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n    return out;\n  };\n  mat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  };\n  mat4.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n  };\n  mat4.fromMat3 = function (out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = 0;\n    out[4] = a[3];\n    out[5] = a[4];\n    out[6] = a[5];\n    out[7] = 0;\n    out[8] = a[6];\n    out[9] = a[7];\n    out[10] = a[8];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  };\n  mat4.mul = mat4.multiply;\n  mat4.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2], a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;\n    if (a === out) {\n      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n      a00 = a[0];\n      a01 = a[1];\n      a02 = a[2];\n      a03 = a[3];\n      a10 = a[4];\n      a11 = a[5];\n      a12 = a[6];\n      a13 = a[7];\n      a20 = a[8];\n      a21 = a[9];\n      a22 = a[10];\n      a23 = a[11];\n      out[0] = a00;\n      out[1] = a01;\n      out[2] = a02;\n      out[3] = a03;\n      out[4] = a10;\n      out[5] = a11;\n      out[6] = a12;\n      out[7] = a13;\n      out[8] = a20;\n      out[9] = a21;\n      out[10] = a22;\n      out[11] = a23;\n      out[12] = a00 * x + a10 * y + a20 * z + a[12];\n      out[13] = a01 * x + a11 * y + a21 * z + a[13];\n      out[14] = a02 * x + a12 * y + a22 * z + a[14];\n      out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n    return out;\n  };\n  mat4.scale = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n  };\n  mat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;\n    if (Math.abs(len) < GLMAT_EPSILON) {\n      return null;\n    }\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    if (a !== out) {\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n    return out;\n  };\n  mat4.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad), a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    if (a !== out) {\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      out[3] = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n  };\n  mat4.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n    if (a !== out) {\n      out[4] = a[4];\n      out[5] = a[5];\n      out[6] = a[6];\n      out[7] = a[7];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n  };\n  mat4.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n    if (a !== out) {\n      out[8] = a[8];\n      out[9] = a[9];\n      out[10] = a[10];\n      out[11] = a[11];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n  };\n  mat4.fromRotationTranslation = function (out, q, v) {\n    var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n  };\n  mat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n  };\n  mat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left), tb = 1 / (top - bottom), nf = 1 / (near - far);\n    out[0] = near * 2 * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = near * 2 * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = far * near * 2 * nf;\n    out[15] = 0;\n    return out;\n  };\n  mat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1 / Math.tan(fovy / 2), nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n  };\n  mat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n  };\n  mat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];\n    if (Math.abs(eyex - centerx) < GLMAT_EPSILON && Math.abs(eyey - centery) < GLMAT_EPSILON && Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n      return mat4.identity(out);\n    }\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n    return out;\n  };\n  mat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n  };\n  exports.mat4 = mat4;\n  var quat = {};\n  quat.create = function () {\n    var out = new GLMAT_ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  };\n  quat.rotationTo = function () {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1, 0, 0);\n    var yUnitVec3 = vec3.fromValues(0, 1, 0);\n    return function (out, a, b) {\n      var dot = vec3.dot(a, b);\n      if (dot < -0.999999) {\n        vec3.cross(tmpvec3, xUnitVec3, a);\n        if (vec3.length(tmpvec3) < 0.000001)\n          vec3.cross(tmpvec3, yUnitVec3, a);\n        vec3.normalize(tmpvec3, tmpvec3);\n        quat.setAxisAngle(out, tmpvec3, Math.PI);\n        return out;\n      } else if (dot > 0.999999) {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = 0;\n        out[3] = 1;\n        return out;\n      } else {\n        vec3.cross(tmpvec3, a, b);\n        out[0] = tmpvec3[0];\n        out[1] = tmpvec3[1];\n        out[2] = tmpvec3[2];\n        out[3] = 1 + dot;\n        return quat.normalize(out, out);\n      }\n    };\n  }();\n  quat.setAxes = function () {\n    var matr = mat3.create();\n    return function (out, view, right, up) {\n      matr[0] = right[0];\n      matr[3] = right[1];\n      matr[6] = right[2];\n      matr[1] = up[0];\n      matr[4] = up[1];\n      matr[7] = up[2];\n      matr[2] = view[0];\n      matr[5] = view[1];\n      matr[8] = view[2];\n      return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n  }();\n  quat.clone = vec4.clone;\n  quat.fromValues = vec4.fromValues;\n  quat.copy = vec4.copy;\n  quat.set = vec4.set;\n  quat.identity = function (out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n  };\n  quat.setAxisAngle = function (out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n  };\n  quat.add = vec4.add;\n  quat.multiply = function (out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n  };\n  quat.mul = quat.multiply;\n  quat.scale = vec4.scale;\n  quat.rotateX = function (out, a, rad) {\n    rad *= 0.5;\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n  };\n  quat.rotateY = function (out, a, rad) {\n    rad *= 0.5;\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3], by = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n  };\n  quat.rotateZ = function (out, a, rad) {\n    rad *= 0.5;\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bz = Math.sin(rad), bw = Math.cos(rad);\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n  };\n  quat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = -Math.sqrt(Math.abs(1 - x * x - y * y - z * z));\n    return out;\n  };\n  quat.dot = vec4.dot;\n  quat.lerp = vec4.lerp;\n  quat.slerp = function (out, a, b, t) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];\n    var omega, cosom, sinom, scale0, scale1;\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    if (cosom < 0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    if (1 - cosom > 0.000001) {\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      scale0 = 1 - t;\n      scale1 = t;\n    }\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    return out;\n  };\n  quat.invert = function (out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3, invDot = dot ? 1 / dot : 0;\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n  };\n  quat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n  };\n  quat.length = vec4.length;\n  quat.len = quat.length;\n  quat.squaredLength = vec4.squaredLength;\n  quat.sqrLen = quat.squaredLength;\n  quat.normalize = vec4.normalize;\n  quat.fromMat3 = function () {\n    var s_iNext = typeof Int8Array !== 'undefined' ? new Int8Array([\n      1,\n      2,\n      0\n    ]) : [\n      1,\n      2,\n      0\n    ];\n    return function (out, m) {\n      var fTrace = m[0] + m[4] + m[8];\n      var fRoot;\n      if (fTrace > 0) {\n        fRoot = Math.sqrt(fTrace + 1);\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[0] = (m[7] - m[5]) * fRoot;\n        out[1] = (m[2] - m[6]) * fRoot;\n        out[2] = (m[3] - m[1]) * fRoot;\n      } else {\n        var i = 0;\n        if (m[4] > m[0])\n          i = 1;\n        if (m[8] > m[i * 3 + i])\n          i = 2;\n        var j = s_iNext[i];\n        var k = s_iNext[j];\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[k * 3 + j] - m[j * 3 + k]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n      }\n      return out;\n    };\n  }();\n  quat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n  };\n  exports.quat = quat;\n  return exports;\n}();\ncolor = function () {\n  \n  var vec4 = glMatrix.vec4;\n  var exports = {};\n  exports.rgb = {};\n  var rgb = exports.rgb;\n  exports.rgb.create = vec4.create;\n  exports.rgb.scale = vec4.scale;\n  exports.rgb.copy = vec4.copy;\n  exports.rgb.fromValues = vec4.fromValues;\n  exports.rgb.mix = function (out, colorOne, colorTwo, t) {\n    var oneMinusT = 1 - t;\n    out[0] = colorOne[0] * t + colorTwo[0] * oneMinusT;\n    out[1] = colorOne[1] * t + colorTwo[1] * oneMinusT;\n    out[2] = colorOne[2] * t + colorTwo[2] * oneMinusT;\n    out[3] = colorOne[3] * t + colorTwo[3] * oneMinusT;\n    return out;\n  };\n  var COLORS = {\n    white: rgb.fromValues(1, 1, 1, 1),\n    black: rgb.fromValues(0, 0, 0, 1),\n    grey: rgb.fromValues(0.5, 0.5, 0.5, 1),\n    lightgrey: rgb.fromValues(0.8, 0.8, 0.8, 1),\n    darkgrey: rgb.fromValues(0.3, 0.3, 0.3, 1),\n    red: rgb.fromValues(1, 0, 0, 1),\n    darkred: rgb.fromValues(0.5, 0, 0, 1),\n    lightred: rgb.fromValues(1, 0.5, 0.5, 1),\n    green: rgb.fromValues(0, 1, 0, 1),\n    darkgreen: rgb.fromValues(0, 0.5, 0, 1),\n    lightgreen: rgb.fromValues(0.5, 1, 0.5, 1),\n    blue: rgb.fromValues(0, 0, 1, 1),\n    darkblue: rgb.fromValues(0, 0, 0.5, 1),\n    lightblue: rgb.fromValues(0.5, 0.5, 1, 1),\n    yellow: rgb.fromValues(1, 1, 0, 1),\n    darkyellow: rgb.fromValues(0.5, 0.5, 0, 1),\n    lightyellow: rgb.fromValues(1, 1, 0.5, 1),\n    cyan: rgb.fromValues(0, 1, 1, 1),\n    darkcyan: rgb.fromValues(0, 0.5, 0.5, 1),\n    lightcyan: rgb.fromValues(0.5, 1, 1, 1),\n    magenta: rgb.fromValues(1, 0, 1, 1),\n    darkmagenta: rgb.fromValues(0.5, 0, 0.5, 1),\n    lightmagenta: rgb.fromValues(1, 0.5, 1, 1),\n    orange: rgb.fromValues(1, 0.5, 0, 1),\n    darkorange: rgb.fromValues(0.5, 0.25, 0, 1),\n    lightorange: rgb.fromValues(1, 0.75, 0.5, 1)\n  };\n  exports.hex2rgb = function (color) {\n    var r, g, b, a;\n    if (color.length === 4 || color.length === 5) {\n      r = parseInt(color[1], 16);\n      g = parseInt(color[2], 16);\n      b = parseInt(color[3], 16);\n      a = 15;\n      if (color.length === 5) {\n        a = parseInt(color[4], 16);\n      }\n      var oneOver15 = 1 / 15;\n      return rgb.fromValues(oneOver15 * r, oneOver15 * g, oneOver15 * b, oneOver15 * a);\n    }\n    if (color.length === 7 || color.length === 9) {\n      r = parseInt(color.substr(1, 2), 16);\n      g = parseInt(color.substr(3, 2), 16);\n      b = parseInt(color.substr(5, 2), 16);\n      a = 255;\n      if (color.length === 9) {\n        a = parseInt(color.substr(7, 2), 16);\n      }\n      var oneOver255 = 1 / 255;\n      return rgb.fromValues(oneOver255 * r, oneOver255 * g, oneOver255 * b, oneOver255 * a);\n    }\n  };\n  exports.setColorPalette = function (customColors) {\n    console.log('setting colors');\n    COLORS = customColors;\n    exports.initGradients();\n  };\n  exports.forceRGB = function (color) {\n    if (typeof color === 'string') {\n      var lookup = COLORS[color];\n      if (lookup !== undefined) {\n        return lookup;\n      }\n      if (color.length > 0 && color[0] === '#') {\n        return exports.hex2rgb(color);\n      }\n    }\n    if (color.length === 3) {\n      return [\n        color[0],\n        color[1],\n        color[2],\n        1\n      ];\n    }\n    return color;\n  };\n  function Gradient(colors, stops) {\n    this._colors = colors;\n    for (var i = 0; i < this._colors.length; ++i) {\n      this._colors[i] = exports.forceRGB(this._colors[i]);\n    }\n    this._stops = stops;\n  }\n  Gradient.prototype = {\n    colorAt: function (out, value) {\n      if (value <= this._stops[0]) {\n        return vec4.copy(out, this._colors[0]);\n      }\n      if (value >= this._stops[this._stops.length - 1]) {\n        return vec4.copy(out, this._colors[this._stops.length - 1]);\n      }\n      var lowerIndex = 0;\n      for (var i = 1; i < this._stops.length; ++i) {\n        if (this._stops[i] > value) {\n          break;\n        }\n        lowerIndex = i;\n      }\n      var upperIndex = lowerIndex + 1;\n      var lowerStop = this._stops[lowerIndex];\n      var upperStop = this._stops[upperIndex];\n      var t = (value - lowerStop) / (upperStop - lowerStop);\n      return rgb.mix(out, this._colors[upperIndex], this._colors[lowerIndex], t);\n    }\n  };\n  var GRADIENTS = {};\n  exports.gradient = function (colors, stops) {\n    if (typeof colors === 'string') {\n      return GRADIENTS[colors];\n    }\n    stops = stops || 'equal';\n    if (stops === 'equal') {\n      stops = [];\n      for (var i = 0; i < colors.length; ++i) {\n        stops.push(i * 1 / (colors.length - 1));\n      }\n    }\n    return new Gradient(colors, stops);\n  };\n  var gradient = exports.gradient;\n  exports.initGradients = function () {\n    GRADIENTS.rainbow = gradient([\n      'red',\n      'yellow',\n      'green',\n      'blue'\n    ]);\n    GRADIENTS.reds = gradient([\n      'lightred',\n      'darkred'\n    ]);\n    GRADIENTS.greens = gradient([\n      'lightgreen',\n      'darkgreen'\n    ]);\n    GRADIENTS.blues = gradient([\n      'lightblue',\n      'darkblue'\n    ]);\n    GRADIENTS.trafficlight = gradient([\n      'green',\n      'yellow',\n      'red'\n    ]);\n    GRADIENTS.heatmap = gradient([\n      'red',\n      'white',\n      'blue'\n    ]);\n  };\n  function ColorOp(colorFunc, beginFunc, endFunc) {\n    this.colorFor = colorFunc;\n    this._beginFunc = beginFunc;\n    this._endFunc = endFunc;\n  }\n  ColorOp.prototype = {\n    begin: function (obj) {\n      if (this._beginFunc) {\n        this._beginFunc(obj);\n      }\n    },\n    end: function (obj) {\n      if (this._endFunc) {\n        this._endFunc(obj);\n      }\n    }\n  };\n  exports.ColorOp = ColorOp;\n  exports.uniform = function (color) {\n    color = exports.forceRGB(color || 'white');\n    return new ColorOp(function (atom, out, index) {\n      out[index + 0] = color[0];\n      out[index + 1] = color[1];\n      out[index + 2] = color[2];\n      out[index + 3] = color[3];\n    }, null, null);\n  };\n  var CPK_TABLE = {\n    H: [\n      1,\n      1,\n      1\n    ],\n    C: [\n      0.83,\n      0.83,\n      0.83\n    ],\n    N: [\n      0.13,\n      0.2,\n      1\n    ],\n    O: [\n      1,\n      0.13,\n      0\n    ],\n    F: [\n      0.12,\n      0.94,\n      0.12\n    ],\n    CL: [\n      0.12,\n      0.94,\n      0.12\n    ],\n    BR: [\n      0.6,\n      0.13,\n      0\n    ],\n    I: [\n      0.4,\n      0,\n      0.73\n    ],\n    HE: [\n      0,\n      1,\n      1\n    ],\n    NE: [\n      0,\n      1,\n      1\n    ],\n    AR: [\n      0,\n      1,\n      1\n    ],\n    XE: [\n      0,\n      1,\n      1\n    ],\n    KR: [\n      0,\n      1,\n      1\n    ],\n    P: [\n      1,\n      0.6,\n      0\n    ],\n    S: [\n      0.87,\n      0.87,\n      0\n    ],\n    B: [\n      1,\n      0.67,\n      0.47\n    ],\n    LI: [\n      0.47,\n      0,\n      1\n    ],\n    NA: [\n      0.47,\n      0,\n      1\n    ],\n    K: [\n      0.47,\n      0,\n      1\n    ],\n    RB: [\n      0.47,\n      0,\n      1\n    ],\n    CS: [\n      0.47,\n      0,\n      1\n    ],\n    FR: [\n      0.47,\n      0,\n      1\n    ],\n    BE: [\n      0,\n      0.47,\n      0\n    ],\n    MG: [\n      0,\n      0.47,\n      0\n    ],\n    SR: [\n      0,\n      0.47,\n      0\n    ],\n    BA: [\n      0,\n      0.47,\n      0\n    ],\n    RA: [\n      0,\n      0.47,\n      0\n    ],\n    TI: [\n      0.6,\n      0.6,\n      0.6\n    ],\n    FE: [\n      0.87,\n      0.47,\n      0\n    ]\n  };\n  exports.byElement = function () {\n    return new ColorOp(function (atom, out, index) {\n      var ele = atom.element();\n      var color = CPK_TABLE[ele];\n      if (color !== undefined) {\n        out[index] = color[0];\n        out[index + 1] = color[1];\n        out[index + 2] = color[2];\n        out[index + 3] = 1;\n        return out;\n      }\n      out[index] = 1;\n      out[index + 1] = 0;\n      out[index + 2] = 1;\n      out[index + 3] = 1;\n      return out;\n    }, null, null);\n  };\n  exports.bySS = function () {\n    return new ColorOp(function (atom, out, index) {\n      switch (atom.residue().ss()) {\n      case 'C':\n        out[index] = 0.8;\n        out[index + 1] = 0.8;\n        out[index + 2] = 0.8;\n        out[index + 3] = 1;\n        return;\n      case 'H':\n        out[index] = 0.6;\n        out[index + 1] = 0.6;\n        out[index + 2] = 0.9;\n        out[index + 3] = 1;\n        return;\n      case 'E':\n        out[index] = 0.2;\n        out[index + 1] = 0.8;\n        out[index + 2] = 0.2;\n        out[index + 3] = 1;\n        return;\n      }\n    }, null, null);\n  };\n  exports.rainbow = function (grad) {\n    if (!grad) {\n      grad = gradient('rainbow');\n    }\n    var colorFunc = new ColorOp(function (a, out, index) {\n      var t = 0;\n      var limits = this.chainLimits[a.residue().chain().name()];\n      if (limits !== undefined) {\n        var idx = a.residue().index();\n        t = (idx - limits[0]) / (limits[1] - limits[0]);\n      }\n      var x = [\n        1,\n        1,\n        1,\n        1\n      ];\n      grad.colorAt(x, t);\n      out[index] = x[0];\n      out[index + 1] = x[1];\n      out[index + 2] = x[2];\n      out[index + 3] = x[3];\n    }, function (obj) {\n      var chains = obj.chains();\n      this.chainLimits = {};\n      for (var i = 0; i < chains.length; ++i) {\n        var bb = chains[i].backboneTraces();\n        if (bb.length === 0) {\n          continue;\n        }\n        var minIndex = bb[0].residueAt(0).index(), maxIndex = bb[0].residueAt(bb[0].length() - 1).index();\n        for (var j = 1; j < bb.length; ++j) {\n          var bbj = bb[j];\n          minIndex = Math.min(minIndex, bbj.residueAt(0).index());\n          maxIndex = Math.max(maxIndex, bbj.residueAt(bbj.length() - 1).index());\n        }\n        if (minIndex !== maxIndex) {\n          this.chainLimits[chains[i].name()] = [\n            minIndex,\n            maxIndex\n          ];\n        }\n      }\n    }, function () {\n      this.chainLimits = null;\n    });\n    return colorFunc;\n  };\n  exports.ssSuccession = function (grad, coilColor) {\n    if (!grad) {\n      grad = gradient('rainbow');\n    }\n    if (!coilColor) {\n      coilColor = exports.forceRGB('lightgrey');\n    }\n    var colorFunc = new ColorOp(function (a, out, index) {\n      var idx = a.residue().index();\n      var limits = this.chainLimits[a.residue().chain().name()];\n      var ssIndex = limits.indices[idx];\n      if (ssIndex === -1) {\n        out[index] = coilColor[0];\n        out[index + 1] = coilColor[1];\n        out[index + 2] = coilColor[2];\n        out[index + 3] = coilColor[3];\n        return;\n      }\n      var t = 0;\n      if (limits.max === null) {\n      }\n      if (limits.max !== null) {\n        t = ssIndex / (limits.max > 0 ? limits.max : 1);\n      }\n      var x = [\n        0,\n        0,\n        0,\n        0\n      ];\n      grad.colorAt(x, t);\n      out[index] = x[0];\n      out[index + 1] = x[1];\n      out[index + 2] = x[2];\n      out[index + 3] = x[3];\n    }, function (obj) {\n      var chains = obj.chains();\n      this.chainLimits = {};\n      for (var i = 0; i < chains.length; ++i) {\n        var residues = chains[i].residues();\n        var maxIndex = null;\n        var indices = {};\n        var ssIndex = 0;\n        var lastSS = 'C';\n        for (var j = 0; j < residues.length; ++j) {\n          var ss = residues[j].ss();\n          if (ss === 'C') {\n            if (lastSS !== 'C') {\n              ssIndex++;\n            }\n            indices[residues[j].index()] = -1;\n          } else {\n            maxIndex = ssIndex;\n            indices[residues[j].index()] = ssIndex;\n          }\n          lastSS = ss;\n        }\n        this.chainLimits[chains[i].name()] = {\n          indices: indices,\n          max: maxIndex\n        };\n      }\n    }, function () {\n      this.chainLimits = null;\n    });\n    return colorFunc;\n  };\n  exports.byChain = function (grad) {\n    if (!grad) {\n      grad = gradient('rainbow');\n    }\n    var colorFunc = new ColorOp(function (a, out, index) {\n      var chainIndex = this.chainIndices[a.residue().chain().name()];\n      var t = chainIndex * this.scale;\n      var x = [\n        0,\n        0,\n        0,\n        0\n      ];\n      grad.colorAt(x, t);\n      out[index + 0] = x[0];\n      out[index + 1] = x[1];\n      out[index + 2] = x[2];\n      out[index + 3] = x[3];\n    }, function (obj) {\n      var chains = obj.chains();\n      this.chainIndices = {};\n      for (var i = 0; i < chains.length; ++i) {\n        this.chainIndices[chains[i].name()] = i;\n      }\n      this.scale = chains.length > 1 ? 1 / (chains.length - 1) : 1;\n    }, function () {\n      this.chainIndices = null;\n    });\n    return colorFunc;\n  };\n  function getMinMaxRange(obj, iter, propName) {\n    var min = null;\n    var max = null;\n    obj[iter](function (item) {\n      var value = item.prop(propName);\n      if (min === null && max === null) {\n        min = max = value;\n        return;\n      }\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    });\n    return {\n      min: min,\n      max: max\n    };\n  }\n  var gradColor = function () {\n    var color = vec4.create();\n    return function (out, index, grad, t) {\n      grad.colorAt(color, t);\n      out[index + 0] = color[0];\n      out[index + 1] = color[1];\n      out[index + 2] = color[2];\n      out[index + 3] = color[3];\n    };\n  }();\n  function colorByItemProp(propName, grad, range, iter, item) {\n    if (!grad) {\n      grad = gradient('rainbow');\n    }\n    return new ColorOp(function (a, out, index) {\n      var t = 0;\n      if (this._min !== this._max) {\n        t = (item(a).prop(propName) - this._min) / (this._max - this._min);\n      }\n      gradColor(out, index, grad, t);\n    }, function (obj) {\n      if (range !== undefined) {\n        this._min = range[0];\n        this._max = range[1];\n        return;\n      }\n      range = getMinMaxRange(obj, iter, propName);\n      this._min = range.min;\n      this._max = range.max;\n    }, function () {\n    });\n  }\n  exports.byAtomProp = function (propName, grad, range) {\n    return colorByItemProp(propName, grad, range, 'eachAtom', function (a) {\n      return a;\n    });\n  };\n  exports.byResidueProp = function (propName, grad, range) {\n    return colorByItemProp(propName, grad, range, 'eachResidue', function (a) {\n      return a.residue();\n    });\n  };\n  exports.interpolateColor = function (colors, num) {\n    var out = new Float32Array((num * (colors.length / 4 - 1) + 1) * 4);\n    var index = 0;\n    var bf = vec4.create(), af = vec4.create();\n    var delta = 1 / num;\n    for (var i = 0; i < colors.length / 4 - 1; ++i) {\n      vec4.set(bf, colors[4 * i + 0], colors[4 * i + 1], colors[4 * i + 2], colors[4 * i + 3]);\n      vec4.set(af, colors[4 * i + 4], colors[4 * i + 5], colors[4 * i + 6], colors[4 * i + 7]);\n      for (var j = 0; j < num; ++j) {\n        var t = delta * j;\n        out[index + 0] = bf[0] * (1 - t) + af[0] * t;\n        out[index + 1] = bf[1] * (1 - t) + af[1] * t;\n        out[index + 2] = bf[2] * (1 - t) + af[2] * t;\n        out[index + 3] = bf[3] * (1 - t) + af[3] * t;\n        index += 4;\n      }\n    }\n    out[index + 0] = af[0];\n    out[index + 1] = af[1];\n    out[index + 2] = af[2];\n    out[index + 3] = af[3];\n    return out;\n  };\n  exports.initGradients();\n  return exports;\n}();\nuniqueObjectIdPool = function () {\n  \n  function ContinuousIdRange(pool, start, end) {\n    this._pool = pool;\n    this._start = start;\n    this._next = start;\n    this._end = end;\n  }\n  ContinuousIdRange.prototype = {\n    nextId: function (obj) {\n      var id = this._next;\n      console.assert(this._next < this._end);\n      this._next++;\n      this._pool._objects[id] = obj;\n      return id;\n    },\n    hasLeft: function () {\n      return this._next < this._end;\n    },\n    recycle: function () {\n      this._pool.recycle(this);\n    },\n    length: function () {\n      return this._end - this._start;\n    }\n  };\n  function UniqueObjectIdPool() {\n    this.clear();\n  }\n  UniqueObjectIdPool.prototype = {\n    MAX_ID: 16777216,\n    getContinuousRange: function (num) {\n      var bestIndex = -1;\n      var bestLength = null;\n      for (var i = 0; i < this._free.length; ++i) {\n        var free = this._free[i];\n        var length = free.length();\n        if (length >= num && (bestLength === null || length < bestLength)) {\n          bestLength = length;\n          bestIndex = i;\n        }\n      }\n      if (bestIndex !== -1) {\n        var result = this._free[bestIndex];\n        this._free.splice(bestIndex, 1);\n        this._usedCount++;\n        return result;\n      }\n      var start = this._unusedRangeStart;\n      var end = start + num;\n      if (end > this.MAX_ID) {\n        console.error('not enough free object ids.');\n        return null;\n      }\n      this._unusedRangeStart = end;\n      var newRange = new ContinuousIdRange(this, start, end);\n      this._usedCount++;\n      return newRange;\n    },\n    clear: function () {\n      this._objects = {};\n      this._unusedRangeStart = 1;\n      this._free = [];\n      this._usedCount = 0;\n    },\n    recycle: function (range) {\n      for (var i = range._start; i < range._next; ++i) {\n        delete this._objects[i];\n      }\n      range._next = range._start;\n      this._free.push(range);\n      this._usedCount--;\n      console.assert(this._usedCount >= 0);\n      if (this._free.length > 0 && this._usedCount === 0) {\n        this.clear();\n      }\n    },\n    objectForId: function (id) {\n      return this._objects[id];\n    }\n  };\n  return UniqueObjectIdPool;\n}();\nutils = function () {\n  \n  var exports = {};\n  exports.derive = function (subclass, baseclass, extensions) {\n    for (var prop in baseclass.prototype) {\n      subclass.prototype[prop] = baseclass.prototype[prop];\n    }\n    if (extensions === undefined) {\n      return;\n    }\n    for (var ext in extensions) {\n      subclass.prototype[ext] = extensions[ext];\n    }\n  };\n  exports.bind = function (obj, fn) {\n    return function () {\n      return fn.apply(obj, arguments);\n    };\n  };\n  exports.copy = function (src) {\n    src = src || {};\n    var cloned = {};\n    for (var prop in src) {\n      if (src.hasOwnProperty(prop)) {\n        cloned[prop] = src[prop];\n      }\n    }\n    return cloned;\n  };\n  function defaultComp(lhs, rhs) {\n    return lhs < rhs;\n  }\n  exports.binarySearch = function (values, value, comp) {\n    if (values.length === 0) {\n      return -1;\n    }\n    comp = comp || defaultComp;\n    var low = 0, high = values.length;\n    var mid = low + high >> 1;\n    while (true) {\n      var midValue = values[mid];\n      if (comp(value, midValue)) {\n        high = mid;\n      } else if (comp(midValue, value)) {\n        low = mid;\n      } else {\n        return mid;\n      }\n      var newMid = low + high >> 1;\n      if (newMid === mid) {\n        return -1;\n      }\n      mid = newMid;\n    }\n    return -1;\n  };\n  exports.indexFirstLargerEqualThan = function (values, value, comp) {\n    comp = comp || defaultComp;\n    if (values.length === 0 || comp(values[values.length - 1], value)) {\n      return -1;\n    }\n    var low = 0, high = values.length;\n    var mid = low + high >> 1;\n    while (true) {\n      var midValue = values[mid];\n      if (comp(value, midValue)) {\n        high = mid;\n      } else if (comp(midValue, value)) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n      var newMid = low + high >> 1;\n      if (newMid === mid) {\n        return mid;\n      }\n      mid = newMid;\n    }\n  };\n  exports.indexLastSmallerThan = function (values, value, comp) {\n    comp = comp || defaultComp;\n    if (values.length === 0 || comp(values[values.length - 1], value)) {\n      return values.length - 1;\n    }\n    if (comp(value, values[0]) || !comp(values[0], value)) {\n      return -1;\n    }\n    var low = 0, high = values.length;\n    var mid = low + high >> 1;\n    while (true) {\n      var midValue = values[mid];\n      if (comp(value, midValue) || !comp(midValue, value)) {\n        high = mid;\n      } else {\n        low = mid;\n      }\n      var newMid = low + high >> 1;\n      if (newMid === mid) {\n        return mid;\n      }\n      mid = newMid;\n    }\n  };\n  exports.indexLastSmallerEqualThan = function (values, value, comp) {\n    comp = comp || defaultComp;\n    if (values.length === 0 || comp(values[values.length - 1], value)) {\n      return values.length - 1;\n    }\n    if (comp(value, values[0])) {\n      return -1;\n    }\n    var low = 0, high = values.length;\n    var mid = low + high >> 1;\n    while (true) {\n      var midValue = values[mid];\n      if (comp(value, midValue)) {\n        high = mid;\n      } else {\n        low = mid;\n      }\n      var newMid = low + high >> 1;\n      if (newMid === mid) {\n        return mid;\n      }\n      mid = newMid;\n    }\n  };\n  function Range(min, max) {\n    if (min === undefined || max === undefined) {\n      this._empty = true;\n      this._min = this._max = null;\n    } else {\n      this._empty = false;\n      this._min = min;\n      this._max = max;\n    }\n  }\n  Range.prototype = {\n    min: function () {\n      return this._min;\n    },\n    max: function () {\n      return this._max;\n    },\n    length: function () {\n      return this._max - this._min;\n    },\n    empty: function () {\n      return this._empty;\n    },\n    center: function () {\n      return (this._max + this._min) * 0.5;\n    },\n    extend: function (amount) {\n      this._min -= amount;\n      this._max += amount;\n    },\n    update: function (val) {\n      if (!this._empty) {\n        if (val < this._min) {\n          this._min = val;\n        } else if (val > this._max) {\n          this._max = val;\n        }\n        return;\n      }\n      this._min = this._max = val;\n      this._empty = false;\n    }\n  };\n  exports.Range = Range;\n  return exports;\n}();\ngfxCanvas = function () {\n  \n  function isWebGLSupported(gl) {\n    if (document.readyState !== 'complete' && document.readyState !== 'loaded' && document.readyState !== 'interactive') {\n      console.error('isWebGLSupported only works after DOMContentLoaded');\n      return false;\n    }\n    if (gl === undefined) {\n      try {\n        var canvas = document.createElement('canvas');\n        return !!(window.WebGLRenderingContext && canvas.getContext('experimental-webgl'));\n      } catch (e) {\n        return false;\n      }\n    }\n    return !!gl;\n  }\n  function Canvas(parentElement, options) {\n    this._width = options.width;\n    this._antialias = options.antialias;\n    this._height = options.height;\n    this._resize = false;\n    this._lastTimestamp = null;\n    this._domElement = parentElement;\n    this._initCanvas();\n    this._backgroundColor = options.backgroundColor;\n    this._forceManualAntialiasing = options.forceManualAntialiasing;\n  }\n  Canvas.prototype = {\n    _ensureSize: function () {\n      if (!this._resize) {\n        return;\n      }\n      this._resize = false;\n      var realWidth = this._width * this._samples;\n      var realHeight = this._height * this._samples;\n      this._realWidth = realWidth;\n      this._realHeight = realHeight;\n      this._gl.viewport(0, 0, realWidth, realHeight);\n      this._canvas.width = realWidth;\n      this._canvas.height = realHeight;\n      if (this._samples > 1) {\n        this._initManualAntialiasing(this._samples);\n      }\n    },\n    resize: function (width, height) {\n      if (width === this._width && height === this._height) {\n        return;\n      }\n      this._resize = true;\n      this._width = width;\n      this._height = height;\n    },\n    fitParent: function () {\n      var parentRect = this._domElement.getBoundingClientRect();\n      this.resize(parentRect.width, parentRect.height);\n    },\n    gl: function () {\n      return this._gl;\n    },\n    imageData: function () {\n      return this._canvas.toDataURL();\n    },\n    _initContext: function () {\n      try {\n        var contextOpts = {\n          antialias: this._antialias && !this._forceManualAntialiasing,\n          preserveDrawingBuffer: true\n        };\n        this._gl = this._canvas.getContext('experimental-webgl', contextOpts);\n      } catch (err) {\n        console.error('WebGL not supported', err);\n        return false;\n      }\n      if (!this._gl) {\n        console.error('WebGL not supported');\n        return false;\n      }\n      return true;\n    },\n    _initManualAntialiasing: function (samples) {\n      var scale_factor = 1 / samples;\n      var trans_x = -(1 - scale_factor) * 0.5 * this._realWidth;\n      var trans_y = -(1 - scale_factor) * 0.5 * this._realHeight;\n      var translate = 'translate(' + trans_x + 'px, ' + trans_y + 'px)';\n      var scale = 'scale(' + scale_factor + ', ' + scale_factor + ')';\n      var transform = translate + ' ' + scale;\n      this._canvas.style.webkitTransform = transform;\n      this._canvas.style.transform = transform;\n      this._canvas.style.ieTransform = transform;\n      this._canvas.width = this._realWidth;\n      this._canvas.height = this._realHeight;\n    },\n    initGL: function () {\n      var samples = 1;\n      if (!this._initContext()) {\n        return false;\n      }\n      var gl = this._gl;\n      if ((!gl.getContextAttributes().antialias || this._forceManualAntialiasing) && this._antialias) {\n        samples = 2;\n      }\n      this._realWidth = this._width * samples;\n      this._realHeight = this._height * samples;\n      this._samples = samples;\n      if (samples > 1) {\n        this._initManualAntialiasing(samples);\n      }\n      gl.viewportWidth = this._realWidth;\n      gl.viewportHeight = this._realHeight;\n      gl.clearColor(this._backgroundColor[0], this._backgroundColor[1], this._backgroundColor[2], 1);\n      gl.lineWidth(2);\n      gl.cullFace(gl.FRONT);\n      gl.enable(gl.CULL_FACE);\n      gl.enable(gl.DEPTH_TEST);\n      return true;\n    },\n    _shaderFromString: function (shader_code, type, precision) {\n      var shader;\n      var gl = this._gl;\n      if (type === 'fragment') {\n        shader = gl.createShader(gl.FRAGMENT_SHADER);\n      } else if (type === 'vertex') {\n        shader = gl.createShader(gl.VERTEX_SHADER);\n      } else {\n        console.error('could not determine type for shader');\n        return null;\n      }\n      var code = shader_code.replace('${PRECISION}', precision);\n      gl.shaderSource(shader, code);\n      gl.compileShader(shader);\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.log(code);\n        console.error(gl.getShaderInfoLog(shader));\n        return null;\n      }\n      return shader;\n    },\n    initShader: function (vert_shader, frag_shader, precision) {\n      var gl = this._gl;\n      var fs = this._shaderFromString(frag_shader, 'fragment', precision);\n      var vs = this._shaderFromString(vert_shader, 'vertex', precision);\n      var shaderProgram = gl.createProgram();\n      gl.attachShader(shaderProgram, vs);\n      gl.attachShader(shaderProgram, fs);\n      gl.linkProgram(shaderProgram);\n      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        console.error('could not initialise shaders');\n        console.error(gl.getShaderInfoLog(shaderProgram));\n        return null;\n      }\n      var getAttribLoc = utils.bind(gl, gl.getAttribLocation);\n      var getUniformLoc = utils.bind(gl, gl.getUniformLocation);\n      shaderProgram.posAttrib = getAttribLoc(shaderProgram, 'attrPos');\n      shaderProgram.colorAttrib = getAttribLoc(shaderProgram, 'attrColor');\n      shaderProgram.normalAttrib = getAttribLoc(shaderProgram, 'attrNormal');\n      shaderProgram.objIdAttrib = getAttribLoc(shaderProgram, 'attrObjId');\n      shaderProgram.selectAttrib = getAttribLoc(shaderProgram, 'attrSelect');\n      shaderProgram.symId = getUniformLoc(shaderProgram, 'symId');\n      shaderProgram.projection = getUniformLoc(shaderProgram, 'projectionMat');\n      shaderProgram.modelview = getUniformLoc(shaderProgram, 'modelviewMat');\n      shaderProgram.rotation = getUniformLoc(shaderProgram, 'rotationMat');\n      shaderProgram.fog = getUniformLoc(shaderProgram, 'fog');\n      shaderProgram.fogFar = getUniformLoc(shaderProgram, 'fogFar');\n      shaderProgram.fogNear = getUniformLoc(shaderProgram, 'fogNear');\n      shaderProgram.fogColor = getUniformLoc(shaderProgram, 'fogColor');\n      shaderProgram.outlineColor = getUniformLoc(shaderProgram, 'outlineColor');\n      shaderProgram.outlineWidth = getUniformLoc(shaderProgram, 'outlineWidth');\n      shaderProgram.relativePixelSize = getUniformLoc(shaderProgram, 'relativePixelSize');\n      shaderProgram.screenDoorTransparency = getUniformLoc(shaderProgram, 'screenDoorTransparency');\n      shaderProgram.selectionColor = getUniformLoc(shaderProgram, 'selectionColor');\n      shaderProgram.pointSize = getUniformLoc(shaderProgram, 'pointSize');\n      shaderProgram.zoom = getUniformLoc(shaderProgram, 'zoom');\n      return shaderProgram;\n    },\n    on: function (name, handler) {\n      this._canvas.addEventListener(name, handler, false);\n    },\n    removeEventListener: function (name, listener) {\n      this._canvas.removeEventListener(name, listener, false);\n    },\n    onWheel: function (firefoxHandler, handler) {\n      if ('onwheel' in this._canvas) {\n        this.on('wheel', firefoxHandler);\n      } else {\n        this.on('mousewheel', handler);\n      }\n    },\n    domElement: function () {\n      return this._canvas;\n    },\n    bind: function () {\n      this._ensureSize();\n      this._gl.viewport(0, 0, this._realWidth, this._realHeight);\n    },\n    superSamplingFactor: function () {\n      return this._samples;\n    },\n    viewportWidth: function () {\n      return this._realWidth;\n    },\n    viewportHeight: function () {\n      return this._realHeight;\n    },\n    width: function () {\n      return this._width;\n    },\n    height: function () {\n      return this._height;\n    },\n    _initCanvas: function () {\n      this._canvas = document.createElement('canvas');\n      this._canvas.width = this._width;\n      this._canvas.height = this._height;\n      this._domElement.appendChild(this._canvas);\n    },\n    isWebGLSupported: function () {\n      return isWebGLSupported(this._gl);\n    },\n    destroy: function () {\n      this._canvas.width = 1;\n      this._canvas.height = 1;\n      this._canvas.parentElement.removeChild(this._canvas);\n      this._canvas = null;\n    }\n  };\n  return {\n    Canvas: Canvas,\n    isWebGLSupported: isWebGLSupported\n  };\n}();\ngfxFramebuffer = function () {\n  \n  function FrameBuffer(gl, options) {\n    this._width = options.width;\n    this._height = options.height;\n    this._colorBufferWidth = this._width;\n    this._colorBufferHeight = this._height;\n    this._gl = gl;\n    this._colorHandle = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._colorHandle);\n    this._depthHandle = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthHandle);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this._width, this._height);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depthHandle);\n    this._colorTexture = gl.createTexture();\n    this._initColorBuffer();\n  }\n  FrameBuffer.prototype = {\n    width: function () {\n      return this._width;\n    },\n    height: function () {\n      return this._height;\n    },\n    bind: function () {\n      var gl = this._gl;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._colorHandle);\n      gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthHandle);\n      if (this._colorBufferWidth !== this._width || this._colorBufferHeight !== this._height) {\n        this._resizeBuffers();\n      }\n      gl.viewport(0, 0, this._width, this._height);\n    },\n    colorTexture: function () {\n      return this._colorTexture;\n    },\n    _initColorBuffer: function () {\n      this.bind();\n      var gl = this._gl;\n      gl.bindTexture(gl.TEXTURE_2D, this._colorTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this._width, this._height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._colorTexture, 0);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      this.release();\n    },\n    _resizeBuffers: function () {\n      var gl = this._gl;\n      gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthHandle);\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this._width, this._height);\n      gl.bindTexture(gl.TEXTURE_2D, this._colorTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this._width, this._height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._colorTexture, 0);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depthHandle);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      this._colorBufferWidth = this._width;\n      this._colorBufferHeight = this._height;\n    },\n    resize: function (width, height) {\n      this._width = width;\n      this._height = height;\n    },\n    release: function () {\n      var gl = this._gl;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    }\n  };\n  return FrameBuffer;\n}();\nbufferAllocators = function () {\n  \n  function PoolAllocator(bufferType) {\n    this._freeArrays = [];\n    this._bufferType = bufferType;\n  }\n  PoolAllocator.prototype.request = function (requestedLength) {\n    var bestIndex = -1;\n    var bestLength = null;\n    for (var i = 0; i < this._freeArrays.length; ++i) {\n      var free = this._freeArrays[i];\n      var length = free.length;\n      if (length >= requestedLength && (bestLength === null || length < bestLength)) {\n        bestLength = length;\n        bestIndex = i;\n      }\n    }\n    if (bestIndex !== -1) {\n      var result = this._freeArrays[bestIndex];\n      this._freeArrays.splice(bestIndex, 1);\n      return result;\n    }\n    return new this._bufferType(requestedLength);\n  };\n  PoolAllocator.prototype.release = function (buffer) {\n    this._freeArrays.push(buffer);\n  };\n  return PoolAllocator;\n}();\ngfxCam = function () {\n  \n  var vec3 = glMatrix.vec3;\n  var mat4 = glMatrix.mat4;\n  function Cam(gl) {\n    this._projection = mat4.create();\n    this._camModelView = mat4.create();\n    this._modelView = mat4.create();\n    this._rotation = mat4.create();\n    this._translation = mat4.create();\n    this._near = 0.1;\n    this._far = 4000;\n    this._fogNear = -5;\n    this._fogFar = 50;\n    this._fog = true;\n    this._fovY = Math.PI * 45 / 180;\n    this._fogColor = vec3.fromValues(1, 1, 1);\n    this._outlineColor = vec3.fromValues(0.1, 0.1, 0.1);\n    this._outlineWidth = 1;\n    this._selectionColor = vec3.fromValues(0.1, 1, 0.1);\n    this._center = vec3.create();\n    this._zoom = 50;\n    this._screenDoorTransparency = false;\n    this._updateProjectionMat = true;\n    this._updateModelViewMat = true;\n    this._upsamplingFactor = 1;\n    this._gl = gl;\n    this._currentShader = null;\n    this._stateId = 0;\n    this.setViewportSize(gl.viewportWidth, gl.viewportHeight);\n  }\n  Cam.prototype = {\n    _incrementStateId: function () {\n      this._stateId += 1;\n      if (this._stateId > 68719476735) {\n        this._stateId = 0;\n      }\n    },\n    setScreenDoorTransparency: function (value) {\n      this._screenDoorTransparency = value;\n      this._incrementStateId();\n    },\n    setOutlineWidth: function (value) {\n      if (this._outlineWidth !== value) {\n        this._outlineWidth = value;\n        this._incrementStateId();\n      }\n    },\n    setRotation: function (rot) {\n      if (rot.length === 16) {\n        mat4.copy(this._rotation, rot);\n      } else {\n        mat4.fromMat3(this._rotation, rot);\n      }\n      this._updateModelViewMat = true;\n    },\n    upsamplingFactor: function () {\n      return this._upsamplingFactor;\n    },\n    setUpsamplingFactor: function (val) {\n      if (this._upsamplingFactor !== val) {\n        this._incrementStateId();\n        this._upsamplingFactor = val;\n        var x = this._upsamplingFactor / this._width;\n        var y = this._upsamplingFactor / this._height;\n        this._relativePixelSize = new Float32Array([\n          x,\n          y\n        ]);\n      }\n    },\n    mainAxes: function () {\n      return [\n        vec3.fromValues(this._rotation[0], this._rotation[4], this._rotation[8]),\n        vec3.fromValues(this._rotation[1], this._rotation[5], this._rotation[9]),\n        vec3.fromValues(this._rotation[2], this._rotation[6], this._rotation[10])\n      ];\n    },\n    fieldOfViewY: function () {\n      return this._fovY;\n    },\n    setFieldOfViewY: function (value) {\n      this._fovY = value;\n      this._updateProjectionMat = true;\n    },\n    aspectRatio: function () {\n      return this._width / this._height;\n    },\n    rotation: function () {\n      return this._rotation;\n    },\n    _updateIfRequired: function () {\n      var updated = false;\n      if (this._updateModelViewMat) {\n        mat4.identity(this._camModelView);\n        mat4.translate(this._camModelView, this._camModelView, [\n          -this._center[0],\n          -this._center[1],\n          -this._center[2]\n        ]);\n        mat4.mul(this._camModelView, this._rotation, this._camModelView);\n        mat4.identity(this._translation);\n        mat4.translate(this._translation, this._translation, [\n          0,\n          0,\n          -this._zoom\n        ]);\n        mat4.mul(this._camModelView, this._translation, this._camModelView);\n        updated = true;\n      }\n      if (this._updateProjectionMat) {\n        mat4.identity(this._projection);\n        mat4.perspective(this._projection, this._fovY, this._width / this._height, this._near, this._far);\n        updated = true;\n      }\n      this._updateProjectionMat = false;\n      this._updateModelViewMat = false;\n      if (updated) {\n        this._incrementStateId();\n      }\n      return updated;\n    },\n    setViewportSize: function (width, height) {\n      this._updateProjectionMat = true;\n      this._width = width;\n      this._height = height;\n      this._relativePixelSize = new Float32Array([\n        this._upsamplingFactor / width,\n        this._upsamplingFactor / height\n      ]);\n    },\n    viewportWidth: function () {\n      return this._width;\n    },\n    viewportHeight: function () {\n      return this._height;\n    },\n    setCenter: function (point) {\n      this._updateModelViewMat = true;\n      vec3.copy(this._center, point);\n    },\n    fog: function (value) {\n      if (value !== undefined && value !== this._fog) {\n        this._fog = value;\n        this._incrementStateId();\n      }\n      return this._fog;\n    },\n    rotateZ: function () {\n      var tm = mat4.create();\n      return function (delta) {\n        mat4.identity(tm);\n        this._updateModelViewMat = true;\n        mat4.rotate(tm, tm, delta, [\n          0,\n          0,\n          1\n        ]);\n        mat4.mul(this._rotation, tm, this._rotation);\n      };\n    }(),\n    rotateX: function () {\n      var tm = mat4.create();\n      return function (delta) {\n        mat4.identity(tm);\n        this._updateModelViewMat = true;\n        mat4.rotate(tm, tm, delta, [\n          1,\n          0,\n          0\n        ]);\n        mat4.mul(this._rotation, tm, this._rotation);\n      };\n    }(),\n    rotateY: function () {\n      var tm = mat4.create();\n      return function (delta) {\n        mat4.identity(tm);\n        this._updateModelViewMat = true;\n        mat4.rotate(tm, tm, delta, [\n          0,\n          1,\n          0\n        ]);\n        mat4.mul(this._rotation, tm, this._rotation);\n      };\n    }(),\n    panX: function (delta) {\n      return this.panXY(delta, 0);\n    },\n    panY: function (delta) {\n      return this.panXY(0, delta);\n    },\n    panXY: function () {\n      var invertRotation = mat4.create();\n      var newCenter = vec3.create();\n      return function (deltaX, deltaY) {\n        mat4.transpose(invertRotation, this._rotation);\n        this._updateModelViewMat = true;\n        vec3.set(newCenter, -deltaX, deltaY, 0);\n        vec3.transformMat4(newCenter, newCenter, invertRotation);\n        vec3.add(newCenter, newCenter, this._center);\n        this.setCenter(newCenter);\n      };\n    }(),\n    nearOffset: function () {\n      return this._near;\n    },\n    farOffset: function () {\n      return this._far;\n    },\n    setNearFar: function (near, far) {\n      if (near === this._near && far === this._far) {\n        return;\n      }\n      this._near = near;\n      this._far = far;\n      this._updateProjectionMat = true;\n    },\n    setFogNearFar: function (near, far) {\n      this._fogNear = near;\n      this._fogFar = far;\n      this._updateProjectionMat = true;\n    },\n    setZoom: function (zoom) {\n      this._updateModelViewMat = true;\n      this._zoom = zoom;\n      return this._zoom;\n    },\n    zoom: function (delta) {\n      if (delta === undefined) {\n        return this._zoom;\n      }\n      this._updateModelViewMat = true;\n      var factor = 1 + delta * 0.1;\n      this._zoom = Math.min(1000, Math.max(2, factor * this._zoom));\n      return this._zoom;\n    },\n    center: function () {\n      return this._center;\n    },\n    setFogColor: function (color) {\n      this._fogColor = vec3.clone(color);\n    },\n    currentShader: function () {\n      return this._currentShader;\n    },\n    invalidateCurrentShader: function () {\n      this._currentShader = null;\n    },\n    setOutlineColor: function (color) {\n      this._outlineColor = vec3.clone(color);\n    },\n    setSelectionColor: function (color) {\n      this._selectionColor = vec3.clone(color);\n    },\n    bind: function (shader, additionalTransform) {\n      var shaderChanged = false;\n      var gl = this._gl;\n      if (this._currentShader !== shader) {\n        this._currentShader = shader;\n        gl.useProgram(shader);\n        shaderChanged = true;\n      }\n      shaderChanged = this._updateIfRequired() || shaderChanged;\n      if (additionalTransform) {\n        mat4.mul(this._modelView, this._camModelView, additionalTransform);\n        gl.uniformMatrix4fv(shader.modelview, false, this._modelView);\n      } else {\n        gl.uniformMatrix4fv(shader.modelview, false, this._camModelView);\n      }\n      if (this._stateId === shader.stateId) {\n        return;\n      }\n      shader.stateId = this._stateId;\n      gl.uniformMatrix4fv(shader.projection, false, this._projection);\n      if (shader.rotation) {\n        gl.uniformMatrix4fv(shader.rotation, false, this._rotation);\n      }\n      gl.uniform1i(shader.fog, this._fog);\n      var nearOffset = this._zoom;\n      gl.uniform1f(shader.fogFar, this._fogFar + nearOffset);\n      gl.uniform1f(shader.zoom, this._zoom);\n      gl.uniform1f(shader.fogNear, this._fogNear + nearOffset);\n      gl.uniform3fv(shader.fogColor, this._fogColor);\n      gl.uniform3fv(shader.outlineColor, this._outlineColor);\n      gl.uniform3fv(shader.selectionColor, this._selectionColor);\n      gl.uniform2fv(shader.relativePixelSize, this._relativePixelSize);\n      gl.uniform1f(shader.outlineWidth, this._outlineWidth);\n      gl.uniform1i(shader.screenDoorTransparency, this._screenDoorTransparency);\n    }\n  };\n  return Cam;\n}();\ngfxShaders = {\n  PRELUDE_FS: '\\nprecision ${PRECISION} float;\\nuniform bool screenDoorTransparency;\\nvec4 handleAlpha(vec4 inColor) {\\n  if (screenDoorTransparency) {\\n    ivec2 pxCoord = ivec2(gl_FragCoord.xy);\\n    ivec2 mod = pxCoord - (pxCoord/2) * 2;\\n    if (inColor.a < 0.99 &&\\n        (inColor.a < 0.01 || mod.x != 0 || mod.y != 0)) { discard; }\\n    return vec4(inColor.rgb, 1.0);\\n  } else {\\n    if (inColor.a == 0.0) { discard; }\\n    return inColor;\\n  } \\n} \\nuniform vec3 selectionColor;\\n\\nvec3 handleSelect(vec3 inColor, float vertSelect) { \\n  return mix(inColor, selectionColor, step(0.5, vertSelect) * 0.7); \\n} \\n\\nuniform bool fog;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform vec3 fogColor;\\nvec3 handleFog(vec3 inColor) {\\n  if (fog) {\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = smoothstep(fogNear, fogFar, depth);\\n    return mix(inColor, fogColor, fogFactor);\\n  } else {\\n    return inColor;\\n  }\\n}',\n  LINES_FS: '\\nvarying vec4 vertColor;\\nvarying vec3 vertNormal;\\n\\nvoid main(void) {\\n  gl_FragColor = handleAlpha(vertColor);\\n  gl_FragColor.rgb = handleFog(gl_FragColor.rgb);\\n}',\n  SELECT_LINES_FS: '\\nprecision ${PRECISION} float;\\n\\nvarying float vertSelect;\\nvarying vec3 vertNormal;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform vec3 fogColor;\\nuniform bool fog;\\nuniform vec3 selectionColor;\\n\\nvoid main(void) {\\n  gl_FragColor = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(selectionColor, 1.0), \\n                     vertSelect);\\n  gl_FragColor.a = step(0.5, vertSelect);\\n  if (gl_FragColor.a == 0.0) { discard; }\\n  float depth = gl_FragCoord.z / gl_FragCoord.w;\\n  if (fog) {\\n    float fog_factor = smoothstep(fogNear, fogFar, depth);\\n    gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w),\\n                        fog_factor);\\n  }\\n}',\n  SELECT_LINES_VS: '\\nattribute vec3 attrPos;\\nattribute float attrSelect;\\n\\nuniform mat4 projectionMat;\\nuniform mat4 modelviewMat;\\nuniform float pointSize;\\nvarying float vertSelect;\\nvoid main(void) {\\n  gl_Position = projectionMat * modelviewMat * vec4(attrPos, 1.0);\\n  gl_Position.z += gl_Position.w * 0.000001; \\n  float distToCamera = vec4(modelviewMat * vec4(attrPos, 1.0)).z;\\n  gl_PointSize = pointSize * 200.0 / abs(distToCamera); \\n  vertSelect = attrSelect;\\n}',\n  SELECT_VS: '\\nprecision ${PRECISION} float;\\nuniform mat4 projectionMat;\\nuniform mat4 modelviewMat;\\nuniform float pointSize;\\nattribute vec3 attrPos;\\nattribute float attrObjId;\\n\\nvarying float objId;\\n\\nvoid main(void) {\\n  gl_Position = projectionMat * modelviewMat * vec4(attrPos, 1.0);\\n  float distToCamera = vec4(modelviewMat * vec4(attrPos, 1.0)).z;\\n  gl_PointSize = pointSize * 200.0 / abs(distToCamera); \\n  objId = attrObjId;\\n}',\n  SELECT_FS: '\\nprecision ${PRECISION} float;\\n\\nvarying float objId;\\nuniform int symId;\\n\\nint intMod(int x, int y) { \\n  int z = x/y;\\n  return x-y*z;\\n}\\nvoid main(void) {\\n  // ints are only required to be 7bit...\\n  int integralObjId = int(objId+0.5);\\n  int red = intMod(integralObjId, 256);\\n  integralObjId/=256;\\n  int green = intMod(integralObjId, 256);\\n  integralObjId/=256;\\n  int blue = intMod(integralObjId, 256);\\n  int alpha = symId;\\n  gl_FragColor = vec4(float(red), float(green), \\n                      float(blue), float(alpha))/255.0;\\n}',\n  LINES_VS: '\\nattribute vec3 attrPos;\\nattribute vec4 attrColor;\\n\\nuniform mat4 projectionMat;\\nuniform mat4 modelviewMat;\\nvarying vec4 vertColor;\\nuniform float pointSize;\\nvoid main(void) {\\n  gl_Position = projectionMat * modelviewMat * vec4(attrPos, 1.0);\\n  float distToCamera = vec4(modelviewMat * vec4(attrPos, 1.0)).z;\\n  gl_PointSize = pointSize * 200.0 / abs(distToCamera); \\n  vertColor = attrColor;\\n}',\n  HEMILIGHT_FS: '\\nvarying vec4 vertColor;\\nvarying vec3 vertNormal;\\nvarying float vertSelect;\\n\\nvoid main(void) {\\n  float dp = dot(vertNormal, vec3(0.0, 0.0, 1.0));\\n  float hemi = min(1.0, max(0.0, dp)*0.6+0.5);\\n  gl_FragColor = vec4(vertColor.rgb*hemi, vertColor.a);\\n  gl_FragColor.rgb = handleFog(handleSelect(gl_FragColor.rgb, vertSelect));\\n  gl_FragColor = handleAlpha(gl_FragColor);\\n}',\n  PHONG_FS: '\\nvarying vec4 vertColor;\\nvarying vec3 vertNormal;\\nvarying vec3 vertPos;\\nuniform float zoom;\\nvarying float vertSelect;\\n\\nvoid main(void) {\\n  vec3 eyePos = vec3(0.0, 0.0, zoom);\\n  float dp = dot(vertNormal, normalize(eyePos - vertPos));\\n  float hemi = min(1.0, max(0.3, dp)+0.2);\\n  //hemi *= vertColor.a;\\n  vec3 rgbColor = vertColor.rgb * hemi; \\n  rgbColor += min(vertColor.rgb, 0.8) * pow(max(0.0, dp), 18.0);\\n  rgbColor = handleSelect(rgbColor, vertSelect);\\n  gl_FragColor = vec4(clamp(rgbColor, 0.0, 1.0), vertColor.a);\\n  gl_FragColor.rgb = handleFog(gl_FragColor.rgb);\\n  gl_FragColor = handleAlpha(gl_FragColor);\\n}',\n  HEMILIGHT_VS: '\\nattribute vec3 attrPos;\\nattribute vec4 attrColor;\\nattribute vec3 attrNormal;\\nattribute float attrSelect;\\n\\nuniform mat4 projectionMat;\\nuniform mat4 modelviewMat;\\nvarying vec4 vertColor;\\nvarying vec3 vertNormal;\\nvarying vec3 vertPos;\\nvarying float vertSelect;\\nvoid main(void) {\\n  vertPos = (modelviewMat * vec4(attrPos, 1.0)).xyz;\\n  gl_Position = projectionMat * modelviewMat * vec4(attrPos, 1.0);\\n  vec4 n = (modelviewMat * vec4(attrNormal, 0.0));\\n  vertNormal = n.xyz;\\n  vertColor = attrColor;\\n  vertSelect = attrSelect;\\n}',\n  OUTLINE_FS: '\\nvarying float vertAlpha;\\nvarying float vertSelect;\\n\\nuniform vec3 outlineColor;\\n\\nvoid main() {\\n  gl_FragColor = vec4(mix(outlineColor, selectionColor, \\n                          step(0.5, vertSelect)), \\n                      vertAlpha);\\n  gl_FragColor.rgb = handleFog(gl_FragColor.rgb);\\n  gl_FragColor = handleAlpha(gl_FragColor);\\n}',\n  OUTLINE_VS: '\\nprecision ${PRECISION} float;\\n\\nattribute vec3 attrPos;\\nattribute vec3 attrNormal;\\nattribute vec4 attrColor;\\nattribute float attrSelect;\\n\\nuniform vec3 outlineColor;\\nuniform mat4 projectionMat;\\nuniform mat4 modelviewMat;\\nvarying float vertAlpha;\\nvarying float vertSelect;\\nuniform vec2 relativePixelSize;\\nuniform float outlineWidth;\\n\\nvoid main(void) {\\n  gl_Position = projectionMat * modelviewMat * vec4(attrPos, 1.0);\\n  vec4 normal = modelviewMat * vec4(attrNormal, 0.0);\\n  vertAlpha = attrColor.a;\\n  vertSelect = attrSelect;\\n  vec2 expansion = relativePixelSize * \\n       (outlineWidth + 2.0 * step(0.5, attrSelect));\\n  vec2 offset = normal.xy * expansion;\\n  gl_Position.xy += gl_Position.w * offset;\\n}',\n  TEXT_VS: '\\nprecision ${PRECISION} float;\\n\\nattribute vec3 attrCenter;\\nattribute vec2 attrCorner;\\nuniform mat4 projectionMat;\\nuniform mat4 modelviewMat;\\nuniform mat4 rotationMat;\\nvarying vec2 vertTex;\\nuniform float width;\\nuniform float height;\\nvoid main() { \\n  vec4 pos = modelviewMat* vec4(attrCenter, 1.0);\\n  pos.z += 4.0;\\n  gl_Position = projectionMat * pos;\\n  gl_Position.xy += vec2(width,height)*attrCorner*gl_Position.w; \\n  vertTex = (attrCorner+abs(attrCorner))/(2.0*abs(attrCorner)); \\n}',\n  TEXT_FS: '\\nprecision ${PRECISION} float;\\n\\nuniform mat4 projectionMat;\\nuniform mat4 modelviewMat;\\nuniform sampler2D sampler;\\nuniform float xScale;\\nuniform float yScale;\\nvarying vec2 vertTex;\\nvoid main() { \\n  vec2 texCoord = vec2(vertTex.x*xScale, vertTex.y*yScale);\\n  gl_FragColor = texture2D(sampler, texCoord);\\n  if (gl_FragColor.a == 0.0) { discard; }\\n}'\n};\ntouch = function () {\n  \n  function TouchHandler(element, viewer, cam) {\n    this._element = element;\n    this._element.addEventListener('touchmove', utils.bind(this, this._touchMove));\n    this._element.addEventListener('touchstart', utils.bind(this, this._touchStart));\n    this._element.addEventListener('touchend', utils.bind(this, this._touchEnd));\n    this._element.addEventListener('touchcancel', utils.bind(this, this._touchEnd));\n    this._touchState = {\n      scale: 1,\n      rotation: 0,\n      center: null\n    };\n    this._lastSingleTap = null;\n    this._viewer = viewer;\n    this._cam = cam;\n  }\n  function getCenter(touches) {\n    var centerX = 0, centerY = 0;\n    for (var i = 0; i < touches.length; ++i) {\n      centerX += touches[i].clientX;\n      centerY += touches[i].clientY;\n    }\n    centerX /= touches.length;\n    centerY /= touches.length;\n    return {\n      x: centerX,\n      y: centerY\n    };\n  }\n  function distance(a, b) {\n    var dx = b.x - a.x;\n    var dy = b.y - a.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  function getScale(prevPointers, newPointers) {\n    var prevD = distance(prevPointers[0], prevPointers[1]);\n    var newD = distance(newPointers[0], newPointers[1]);\n    return newD / (prevD === 0 ? 1 : prevD);\n  }\n  function getAngle(p1, p2) {\n    var dx = p2.x - p1.x;\n    var dy = p2.y - p1.y;\n    return Math.atan2(dy, dx);\n  }\n  function getRotationAngle(prevPointers, newPointers) {\n    return getAngle(newPointers[1], newPointers[0]) - getAngle(prevPointers[1], prevPointers[0]);\n  }\n  TouchHandler.prototype = {\n    _extractEventAttributes: function (previousState, event) {\n      var state = {};\n      state.center = getCenter(event.targetTouches);\n      state.pointers = [];\n      for (var i = 0; i < event.targetTouches.length; ++i) {\n        var t = event.targetTouches[i];\n        state.pointers.push({\n          x: t.clientX,\n          y: t.clientY\n        });\n      }\n      state.numTouches = event.targetTouches.length;\n      state.rotation = 0;\n      state.scale = 1;\n      state.deltaScale = 0;\n      state.deltaRotation = 0;\n      if (previousState.center) {\n        state.deltaCenter = {\n          x: state.center.x - previousState.center.x,\n          y: state.center.y - previousState.center.y\n        };\n      }\n      if (previousState.numTouches !== 2 || state.numTouches !== 2) {\n        return state;\n      }\n      if (previousState.initialPointers) {\n        state.initialPointers = previousState.initialPointers;\n      } else {\n        state.initialPointers = previousState.pointers;\n      }\n      state.scale = getScale(state.initialPointers, state.pointers);\n      state.deltaScale = state.scale - previousState.scale;\n      state.rotation = getRotationAngle(state.initialPointers, state.pointers);\n      state.deltaRotation = state.rotation - previousState.rotation;\n      return state;\n    },\n    _touchMove: function (event) {\n      event.preventDefault();\n      var newState = this._extractEventAttributes(this._touchState, event);\n      var deltaScale = -newState.deltaScale * 4;\n      if (deltaScale !== 0) {\n        this._cam.zoom(deltaScale);\n      }\n      if (newState.numTouches === 2 && this._touchState.numTouches === 2) {\n        var speed = 0.002 * Math.tan(0.5 * this._cam.fieldOfViewY()) * this._cam.zoom();\n        this._cam.panXY(newState.deltaCenter.x * speed, newState.deltaCenter.y * speed);\n      }\n      var deltaZRotation = -newState.deltaRotation;\n      this._cam.rotateZ(deltaZRotation);\n      if (newState.numTouches === 1 && this._touchState.numTouches === 1) {\n        this._cam.rotateX(newState.deltaCenter.y * 0.005);\n        this._cam.rotateY(newState.deltaCenter.x * 0.005);\n      }\n      this._viewer.requestRedraw();\n      this._touchState = newState;\n    },\n    _touchStart: function (event) {\n      event.preventDefault();\n      if (event.targetTouches.length === 1) {\n        var now = new Date().getTime();\n        if (this._lastSingleTap !== null) {\n          var delta = now - this._lastSingleTap;\n          if (delta < 500) {\n            this._viewer._mouseDoubleClick({\n              clientX: event.targetTouches[0].clientX,\n              clientY: event.targetTouches[0].clientY\n            });\n          }\n        }\n        this._lastSingleTap = now;\n      } else {\n        this._lastSingleTap = null;\n      }\n      this._touchState = this._extractEventAttributes(this._touchState, event);\n    },\n    _touchEnd: function (event) {\n      event.preventDefault();\n    }\n  };\n  return TouchHandler;\n}();\nmouse = function () {\n  \n  function MouseHandler(canvas, viewer, cam, animationTime) {\n    this._viewer = viewer;\n    this._canvas = canvas;\n    this._cam = cam;\n    this._canvas = canvas;\n    this._animationTime = animationTime;\n    this._lastMouseUpTime = null;\n    this._init();\n  }\n  MouseHandler.prototype = {\n    _centerOnClicked: function (picked) {\n      if (picked === null) {\n        return;\n      }\n      this._viewer.setCenter(picked.pos(), this._animationTime);\n    },\n    _mouseUp: function (event) {\n      var canvas = this._canvas;\n      var currentTime = new Date().getTime();\n      if ((this._lastMouseUpTime === null || currentTime - this._lastMouseUpTime > 300) & currentTime - this._lastMouseDownTime < 300) {\n        var rect = this._canvas.domElement().getBoundingClientRect();\n        var picked = this._viewer.pick({\n          x: event.clientX - rect.left,\n          y: event.clientY - rect.top\n        });\n        this._viewer._dispatchEvent(event, 'click', picked);\n      }\n      this._lastMouseUpTime = currentTime;\n      canvas.removeEventListener('mousemove', this._mouseRotateListener);\n      canvas.removeEventListener('mousemove', this._mousePanListener);\n      canvas.removeEventListener('mouseup', this._mouseUpListener);\n      document.removeEventListener('mouseup', this._mouseUpListener);\n      document.removeEventListener('mousemove', this._mouseRotateListener);\n      document.removeEventListener('mousemove', this._mousePanListener);\n    },\n    setCam: function (cam) {\n      this._cam = cam;\n    },\n    _init: function () {\n      this._mousePanListener = utils.bind(this, this._mousePan);\n      this._mouseRotateListener = utils.bind(this, this._mouseRotate);\n      this._mouseUpListener = utils.bind(this, this._mouseUp);\n      this._canvas.onWheel(utils.bind(this, this._mouseWheelFF), utils.bind(this, this._mouseWheel));\n      this._canvas.on('dblclick', utils.bind(this, this._mouseDoubleClick));\n      this._canvas.on('mousedown', utils.bind(this, this._mouseDown));\n      return true;\n    },\n    _mouseWheel: function (event) {\n      this._cam.zoom(event.wheelDelta < 0 ? -1 : 1);\n      event.preventDefault();\n      this._viewer.requestRedraw();\n    },\n    _mouseWheelFF: function (event) {\n      this._cam.zoom(event.deltaY < 0 ? 1 : -1);\n      event.preventDefault();\n      this._viewer.requestRedraw();\n    },\n    _mouseDoubleClick: function () {\n      return function (event) {\n        var rect = this._canvas.domElement().getBoundingClientRect();\n        var picked = this._viewer.pick({\n          x: event.clientX - rect.left,\n          y: event.clientY - rect.top\n        });\n        this._viewer._dispatchEvent(event, 'doubleClick', picked);\n        this._viewer.requestRedraw();\n      };\n    }(),\n    _mouseDown: function (event) {\n      if (event.button !== 0) {\n        return;\n      }\n      this._lastMouseDownTime = new Date().getTime();\n      event.preventDefault();\n      if (event.shiftKey === true) {\n        this._canvas.on('mousemove', this._mousePanListener);\n        document.addEventListener('mousemove', this._mousePanListener, false);\n      } else {\n        this._canvas.on('mousemove', this._mouseRotateListener);\n        document.addEventListener('mousemove', this._mouseRotateListener, false);\n      }\n      this._canvas.on('mouseup', this._mouseUpListener);\n      document.addEventListener('mouseup', this._mouseUpListener, false);\n      this._lastMousePos = {\n        x: event.pageX,\n        y: event.pageY\n      };\n    },\n    _mouseRotate: function (event) {\n      var newMousePos = {\n        x: event.pageX,\n        y: event.pageY\n      };\n      var delta = {\n        x: newMousePos.x - this._lastMousePos.x,\n        y: newMousePos.y - this._lastMousePos.y\n      };\n      var speed = 0.005;\n      this._cam.rotateX(speed * delta.y);\n      this._cam.rotateY(speed * delta.x);\n      this._lastMousePos = newMousePos;\n      this._viewer.requestRedraw();\n    },\n    _mousePan: function (event) {\n      var newMousePos = {\n        x: event.pageX,\n        y: event.pageY\n      };\n      var delta = {\n        x: newMousePos.x - this._lastMousePos.x,\n        y: newMousePos.y - this._lastMousePos.y\n      };\n      var speed = 0.002 * Math.tan(0.5 * this._cam.fieldOfViewY()) * this._cam.zoom();\n      this._cam.panXY(speed * delta.x, speed * delta.y);\n      this._lastMousePos = newMousePos;\n      this._viewer.requestRedraw();\n    }\n  };\n  return MouseHandler;\n}();\ngeom = function () {\n  \n  var vec3 = glMatrix.vec3;\n  var vec4 = glMatrix.vec4;\n  var mat3 = glMatrix.mat3;\n  var quat = glMatrix.quat;\n  var signedAngle = function () {\n    var tmp = vec3.create();\n    return function (a, b, c) {\n      vec3.cross(tmp, a, b);\n      return Math.atan2(vec3.dot(tmp, c), vec3.dot(a, b));\n    };\n  }();\n  var ortho = function () {\n    var tmp = vec3.create();\n    return function (out, vec) {\n      vec3.copy(tmp, vec);\n      if (Math.abs(vec[0]) < Math.abs(vec[1])) {\n        if (Math.abs(vec[0]) < Math.abs(vec[2])) {\n          tmp[0] += 1;\n        } else {\n          tmp[2] += 1;\n        }\n      } else {\n        if (Math.abs(vec[1]) < Math.abs(vec[2])) {\n          tmp[1] += 1;\n        } else {\n          tmp[2] += 1;\n        }\n      }\n      return vec3.cross(out, vec, tmp);\n    };\n  }();\n  var axisRotation = function (out, axis, angle) {\n    var sa = Math.sin(angle), ca = Math.cos(angle), x = axis[0], y = axis[1], z = axis[2], xx = x * x, xy = x * y, xz = x * z, yy = y * y, yz = y * z, zz = z * z;\n    out[0] = xx + ca - xx * ca;\n    out[1] = xy - ca * xy - sa * z;\n    out[2] = xz - ca * xz + sa * y;\n    out[3] = xy - ca * xy + sa * z;\n    out[4] = yy + ca - ca * yy;\n    out[5] = yz - ca * yz - sa * x;\n    out[6] = xz - ca * xz - sa * y;\n    out[7] = yz - ca * yz + sa * x;\n    out[8] = zz + ca - ca * zz;\n    return out;\n  };\n  var cubicHermiteInterpolate = function () {\n    var p = vec3.create();\n    return function (out, p_k, m_k, p_kp1, m_kp1, t, index) {\n      var tt = t * t;\n      var three_minus_two_t = 3 - 2 * t;\n      var h01 = tt * three_minus_two_t;\n      var h00 = 1 - h01;\n      var h10 = tt * (t - 2) + t;\n      var h11 = tt * (t - 1);\n      vec3.copy(p, p_k);\n      vec3.scale(p, p, h00);\n      vec3.scaleAndAdd(p, p, m_k, h10);\n      vec3.scaleAndAdd(p, p, p_kp1, h01);\n      vec3.scaleAndAdd(p, p, m_kp1, h11);\n      out[index] = p[0];\n      out[index + 1] = p[1];\n      out[index + 2] = p[2];\n    };\n  }();\n  function catmullRomSplineNumPoints(numPoints, subdiv, circular) {\n    if (circular) {\n      return numPoints * subdiv;\n    } else {\n      return subdiv * (numPoints - 1) + 1;\n    }\n  }\n  function catmullRomSpline(points, numPoints, num, strength, circular, float32BufferPool) {\n    circular = circular || false;\n    strength = strength || 0.5;\n    var out = null;\n    var outLength = catmullRomSplineNumPoints(numPoints, num, circular) * 3;\n    if (float32BufferPool) {\n      out = float32BufferPool.request(outLength);\n    } else {\n      out = new Float32Array(outLength);\n    }\n    var index = 0;\n    var delta_t = 1 / num;\n    var m_k = vec3.create(), m_kp1 = vec3.create();\n    var p_k = vec3.create(), p_kp1 = vec3.create(), p_kp2 = vec3.create(), p_kp3 = vec3.create();\n    var i, j, e;\n    vec3.set(p_kp1, points[0], points[1], points[2]);\n    vec3.set(p_kp2, points[3], points[4], points[5]);\n    if (circular) {\n      vec3.set(p_k, points[points.length - 3], points[points.length - 2], points[points.length - 1]);\n      vec3.sub(m_k, p_kp2, p_k);\n      vec3.scale(m_k, m_k, strength);\n    } else {\n      vec3.set(p_k, points[0], points[1], points[2]);\n      vec3.set(m_k, 0, 0, 0);\n    }\n    for (i = 1, e = numPoints - 1; i < e; ++i) {\n      vec3.set(p_kp3, points[3 * (i + 1)], points[3 * (i + 1) + 1], points[3 * (i + 1) + 2]);\n      vec3.sub(m_kp1, p_kp3, p_kp1);\n      vec3.scale(m_kp1, m_kp1, strength);\n      for (j = 0; j < num; ++j) {\n        cubicHermiteInterpolate(out, p_kp1, m_k, p_kp2, m_kp1, delta_t * j, index);\n        index += 3;\n      }\n      vec3.copy(p_k, p_kp1);\n      vec3.copy(p_kp1, p_kp2);\n      vec3.copy(p_kp2, p_kp3);\n      vec3.copy(m_k, m_kp1);\n    }\n    if (circular) {\n      vec3.set(p_kp3, points[0], points[1], points[3]);\n      vec3.sub(m_kp1, p_kp3, p_kp1);\n      vec3.scale(m_kp1, m_kp1, strength);\n    } else {\n      vec3.set(m_kp1, 0, 0, 0);\n    }\n    for (j = 0; j < num; ++j) {\n      cubicHermiteInterpolate(out, p_kp1, m_k, p_kp2, m_kp1, delta_t * j, index);\n      index += 3;\n    }\n    if (!circular) {\n      out[index] = points[3 * (numPoints - 1) + 0];\n      out[index + 1] = points[3 * (numPoints - 1) + 1];\n      out[index + 2] = points[3 * (numPoints - 1) + 2];\n      return out;\n    }\n    vec3.copy(p_k, p_kp1);\n    vec3.copy(p_kp1, p_kp2);\n    vec3.copy(p_kp2, p_kp3);\n    vec3.copy(m_k, m_kp1);\n    vec3.set(p_kp3, points[3], points[4], points[5]);\n    vec3.sub(m_kp1, p_kp3, p_kp1);\n    vec3.scale(m_kp1, m_kp1, strength);\n    for (j = 0; j < num; ++j) {\n      cubicHermiteInterpolate(out, p_kp1, m_k, p_kp2, m_kp1, delta_t * j, index);\n      index += 3;\n    }\n    return out;\n  }\n  function Sphere(center, radius) {\n    this._center = center || vec3.create();\n    this._radius = radius || 1;\n  }\n  var diagonalizer = function () {\n    var Q = mat3.create();\n    var D = mat3.create();\n    var tmp1 = mat3.create();\n    var tmp2 = mat3.create();\n    var jr = quat.create();\n    var offDiag = vec3.create();\n    var magOffDiag = vec3.create();\n    return function (a) {\n      var maxsteps = 24;\n      var q = quat.fromValues(0, 0, 0, 1);\n      for (var i = 0; i < maxsteps; ++i) {\n        mat3.fromQuat(Q, q);\n        var transQ = mat3.transpose(tmp1, Q);\n        mat3.mul(D, Q, mat3.mul(tmp2, a, transQ));\n        vec3.set(offDiag, D[5], D[2], D[1]);\n        vec3.set(magOffDiag, Math.abs(offDiag[0]), Math.abs(offDiag[1]), Math.abs(offDiag[2]));\n        var k = magOffDiag[0] > magOffDiag[1] && magOffDiag[0] > magOffDiag[2] ? 0 : magOffDiag[1] > magOffDiag[2] ? 1 : 2;\n        var k1 = (k + 1) % 3;\n        var k2 = (k + 2) % 3;\n        if (offDiag[k] === 0) {\n          break;\n        }\n        var thet = (D[k2 * 3 + k2] - D[k1 * 3 + k1]) / (2 * offDiag[k]);\n        var sgn = thet > 0 ? 1 : -1;\n        thet *= sgn;\n        var div = thet + (thet < 1000000 ? Math.sqrt(thet * thet + 1) : thet);\n        var t = sgn / div;\n        var c = 1 / Math.sqrt(t * t + 1);\n        if (c === 1) {\n          break;\n        }\n        vec4.set(jr, 0, 0, 0, 0);\n        jr[k] = sgn * Math.sqrt((1 - c) / 2);\n        jr[k] *= -1;\n        jr[3] = Math.sqrt(1 - jr[k] * jr[k]);\n        if (jr[3] === 1) {\n          break;\n        }\n        q = quat.mul(q, q, jr);\n        quat.normalize(q, q);\n      }\n      return q;\n    };\n  }();\n  Sphere.prototype.center = function () {\n    return this._center;\n  };\n  Sphere.prototype.radius = function () {\n    return this._radius;\n  };\n  var buildRotation = function () {\n    return function (rotation, tangent, left, up, use_left_hint) {\n      if (use_left_hint) {\n        vec3.cross(up, tangent, left);\n      } else {\n        ortho(up, tangent);\n      }\n      vec3.cross(left, up, tangent);\n      vec3.normalize(up, up);\n      vec3.normalize(left, left);\n      rotation[0] = left[0];\n      rotation[1] = left[1];\n      rotation[2] = left[2];\n      rotation[3] = up[0];\n      rotation[4] = up[1];\n      rotation[5] = up[2];\n      rotation[6] = tangent[0];\n      rotation[7] = tangent[1];\n      rotation[8] = tangent[2];\n    };\n  }();\n  function interpolateScalars(values, num) {\n    var out = new Float32Array(num * (values.length - 1) + 1);\n    var index = 0;\n    var bf = 0, af = 0;\n    var delta = 1 / num;\n    for (var i = 0; i < values.length - 1; ++i) {\n      bf = values[i];\n      af = values[i + 1];\n      for (var j = 0; j < num; ++j) {\n        var t = delta * j;\n        out[index + 0] = bf * (1 - t) + af * t;\n        index += 1;\n      }\n    }\n    out[index + 0] = af;\n    return out;\n  }\n  return {\n    signedAngle: signedAngle,\n    axisRotation: axisRotation,\n    ortho: ortho,\n    diagonalizer: diagonalizer,\n    catmullRomSpline: catmullRomSpline,\n    cubicHermiteInterpolate: cubicHermiteInterpolate,\n    interpolateScalars: interpolateScalars,\n    catmullRomSplineNumPoints: catmullRomSplineNumPoints,\n    Sphere: Sphere,\n    buildRotation: buildRotation\n  };\n}();\ngfxGeomBuilders = function () {\n  \n  var vec3 = glMatrix.vec3;\n  function ProtoSphere(stacks, arcs) {\n    this._arcs = arcs;\n    this._stacks = stacks;\n    this._indices = new Uint16Array(3 * arcs * stacks * 2);\n    this._verts = new Float32Array(3 * arcs * stacks);\n    var vert_angle = Math.PI / (stacks - 1);\n    var horz_angle = Math.PI * 2 / arcs;\n    var i, j;\n    for (i = 0; i < this._stacks; ++i) {\n      var radius = Math.sin(i * vert_angle);\n      var z = Math.cos(i * vert_angle);\n      for (j = 0; j < this._arcs; ++j) {\n        var nx = radius * Math.cos(j * horz_angle);\n        var ny = radius * Math.sin(j * horz_angle);\n        this._verts[3 * (j + i * this._arcs)] = nx;\n        this._verts[3 * (j + i * this._arcs) + 1] = ny;\n        this._verts[3 * (j + i * this._arcs) + 2] = z;\n      }\n    }\n    var index = 0;\n    for (i = 0; i < this._stacks - 1; ++i) {\n      for (j = 0; j < this._arcs; ++j) {\n        this._indices[index] = i * this._arcs + j;\n        this._indices[index + 1] = i * this._arcs + (j + 1) % this._arcs;\n        this._indices[index + 2] = (i + 1) * this._arcs + j;\n        index += 3;\n        this._indices[index] = i * this._arcs + (j + 1) % this._arcs;\n        this._indices[index + 1] = (i + 1) * this._arcs + (j + 1) % this._arcs;\n        this._indices[index + 2] = (i + 1) * this._arcs + j;\n        index += 3;\n      }\n    }\n  }\n  ProtoSphere.prototype = {\n    addTransformed: function () {\n      var pos = vec3.create(), normal = vec3.create();\n      return function (va, center, radius, color, objId) {\n        var baseIndex = va.numVerts();\n        for (var i = 0; i < this._stacks * this._arcs; ++i) {\n          vec3.set(normal, this._verts[3 * i], this._verts[3 * i + 1], this._verts[3 * i + 2]);\n          vec3.copy(pos, normal);\n          vec3.scale(pos, pos, radius);\n          vec3.add(pos, pos, center);\n          va.addVertex(pos, normal, color, objId);\n        }\n        for (i = 0; i < this._indices.length / 3; ++i) {\n          va.addTriangle(baseIndex + this._indices[i * 3], baseIndex + this._indices[i * 3 + 1], baseIndex + this._indices[i * 3 + 2]);\n        }\n      };\n    }(),\n    numIndices: function () {\n      return this._indices.length;\n    },\n    numVerts: function () {\n      return this._verts.length / 3;\n    }\n  };\n  function TubeProfile(points, num, strength) {\n    var interpolated = geom.catmullRomSpline(points, points.length / 3, num, strength, true);\n    this._indices = new Uint16Array(interpolated.length * 2);\n    this._verts = interpolated;\n    this._normals = new Float32Array(interpolated.length);\n    this._arcs = interpolated.length / 3;\n    var normal = vec3.create();\n    for (var i = 0; i < this._arcs; ++i) {\n      var i_prev = i === 0 ? this._arcs - 1 : i - 1;\n      var i_next = i === this._arcs - 1 ? 0 : i + 1;\n      normal[0] = this._verts[3 * i_next + 1] - this._verts[3 * i_prev + 1];\n      normal[1] = this._verts[3 * i_prev] - this._verts[3 * i_next];\n      vec3.normalize(normal, normal);\n      this._normals[3 * i] = normal[0];\n      this._normals[3 * i + 1] = normal[1];\n      this._normals[3 * i + 2] = normal[2];\n    }\n    for (i = 0; i < this._arcs; ++i) {\n      this._indices[6 * i] = i;\n      this._indices[6 * i + 1] = i + this._arcs;\n      this._indices[6 * i + 2] = (i + 1) % this._arcs + this._arcs;\n      this._indices[6 * i + 3] = i;\n      this._indices[6 * i + 4] = (i + 1) % this._arcs + this._arcs;\n      this._indices[6 * i + 5] = (i + 1) % this._arcs;\n    }\n  }\n  TubeProfile.prototype = {\n    addTransformed: function () {\n      var pos = vec3.create(), normal = vec3.create();\n      return function (vertArray, center, radius, rotation, color, first, offset, objId) {\n        var arcs = this._arcs;\n        var norms = this._normals;\n        var verts = this._verts;\n        var baseIndex = vertArray.numVerts() - arcs;\n        for (var i = 0; i < arcs; ++i) {\n          vec3.set(pos, radius * verts[3 * i], radius * verts[3 * i + 1], 0);\n          vec3.transformMat3(pos, pos, rotation);\n          vec3.add(pos, pos, center);\n          vec3.set(normal, norms[3 * i], norms[3 * i + 1], 0);\n          vec3.transformMat3(normal, normal, rotation);\n          vertArray.addVertex(pos, normal, color, objId);\n        }\n        if (first) {\n          return;\n        }\n        if (offset === 0) {\n          for (i = 0; i < this._indices.length / 3; ++i) {\n            vertArray.addTriangle(baseIndex + this._indices[i * 3], baseIndex + this._indices[i * 3 + 1], baseIndex + this._indices[i * 3 + 2]);\n          }\n          return;\n        }\n        for (i = 0; i < arcs; ++i) {\n          vertArray.addTriangle(baseIndex + (i + offset) % arcs, baseIndex + i + arcs, baseIndex + (i + 1) % arcs + arcs);\n          vertArray.addTriangle(baseIndex + (i + offset) % arcs, baseIndex + (i + 1) % arcs + arcs, baseIndex + (i + 1 + offset) % arcs);\n        }\n      };\n    }()\n  };\n  function ProtoCylinder(arcs) {\n    this._arcs = arcs;\n    this._indices = new Uint16Array(arcs * 3 * 2);\n    this._verts = new Float32Array(3 * arcs * 2);\n    this._normals = new Float32Array(3 * arcs * 2);\n    var angle = Math.PI * 2 / this._arcs;\n    for (var i = 0; i < this._arcs; ++i) {\n      var cos_angle = Math.cos(angle * i);\n      var sin_angle = Math.sin(angle * i);\n      this._verts[3 * i] = cos_angle;\n      this._verts[3 * i + 1] = sin_angle;\n      this._verts[3 * i + 2] = -0.5;\n      this._verts[3 * arcs + 3 * i] = cos_angle;\n      this._verts[3 * arcs + 3 * i + 1] = sin_angle;\n      this._verts[3 * arcs + 3 * i + 2] = 0.5;\n      this._normals[3 * i] = cos_angle;\n      this._normals[3 * i + 1] = sin_angle;\n      this._normals[3 * arcs + 3 * i] = cos_angle;\n      this._normals[3 * arcs + 3 * i + 1] = sin_angle;\n    }\n    for (i = 0; i < this._arcs; ++i) {\n      this._indices[6 * i] = i % this._arcs;\n      this._indices[6 * i + 1] = arcs + (i + 1) % this._arcs;\n      this._indices[6 * i + 2] = (i + 1) % this._arcs;\n      this._indices[6 * i + 3] = i % this._arcs;\n      this._indices[6 * i + 4] = arcs + i % this._arcs;\n      this._indices[6 * i + 5] = arcs + (i + 1) % this._arcs;\n    }\n  }\n  ProtoCylinder.prototype = {\n    numVerts: function () {\n      return this._verts.length / 3;\n    },\n    numIndices: function () {\n      return this._indices.length;\n    },\n    addTransformed: function () {\n      var pos = vec3.create(), normal = vec3.create();\n      return function (va, center, length, radius, rotation, colorOne, colorTwo, idOne, idTwo) {\n        var baseIndex = va.numVerts();\n        var verts = this._verts;\n        var norms = this._normals;\n        var arcs = this._arcs;\n        for (var i = 0; i < 2 * arcs; ++i) {\n          vec3.set(pos, radius * verts[3 * i], radius * verts[3 * i + 1], length * verts[3 * i + 2]);\n          vec3.transformMat3(pos, pos, rotation);\n          vec3.add(pos, pos, center);\n          vec3.set(normal, norms[3 * i], norms[3 * i + 1], norms[3 * i + 2]);\n          vec3.transformMat3(normal, normal, rotation);\n          var objId = i < arcs ? idOne : idTwo;\n          va.addVertex(pos, normal, i < arcs ? colorOne : colorTwo, objId);\n        }\n        var indices = this._indices;\n        for (i = 0; i < indices.length / 3; ++i) {\n          va.addTriangle(baseIndex + indices[i * 3], baseIndex + indices[i * 3 + 1], baseIndex + indices[i * 3 + 2]);\n        }\n      };\n    }()\n  };\n  return {\n    TubeProfile: TubeProfile,\n    ProtoCylinder: ProtoCylinder,\n    ProtoSphere: ProtoSphere\n  };\n}();\ngfxSceneNode = SceneNode = function () {\n  \n  function SceneNode(gl) {\n    this._children = [];\n    this._visible = true;\n    this._name = name || '';\n    this._gl = gl;\n    this._order = 1;\n  }\n  SceneNode.prototype = {\n    order: function (order) {\n      if (order !== undefined) {\n        this._order = order;\n      }\n      return this._order;\n    },\n    add: function (node) {\n      this._children.push(node);\n    },\n    draw: function (cam, shaderCatalog, style, pass) {\n      for (var i = 0, e = this._children.length; i !== e; ++i) {\n        this._children[i].draw(cam, shaderCatalog, style, pass);\n      }\n    },\n    show: function () {\n      this._visible = true;\n    },\n    hide: function () {\n      this._visible = false;\n    },\n    name: function (name) {\n      if (name !== undefined) {\n        this._name = name;\n      }\n      return this._name;\n    },\n    destroy: function () {\n      for (var i = 0; i < this._children.length; ++i) {\n        this._children[i].destroy();\n      }\n    },\n    visible: function () {\n      return this._visible;\n    }\n  };\n  return SceneNode;\n}();\ngfxBaseGeom = BaseGeom = function () {\n  \n  var vec3 = glMatrix.vec3;\n  function eachCentralAtomAsym(structure, callback) {\n    structure.eachResidue(function (residue) {\n      var centralAtom = residue.centralAtom();\n      if (centralAtom === null) {\n        return;\n      }\n      callback(centralAtom, centralAtom.pos());\n    });\n  }\n  var eachCentralAtomSym = function () {\n    var transformedPos = vec3.create();\n    return function (structure, gens, callback) {\n      for (var i = 0; i < gens.length; ++i) {\n        var gen = gens[i];\n        var chains = structure.chainsByName(gen.chains());\n        for (var j = 0; j < gen.matrices().length; ++j) {\n          var matrix = gen.matrix(j);\n          for (var k = 0; k < chains.length; ++k) {\n            var chain = chains[k];\n            for (var l = 0; l < chain.residues().length; ++l) {\n              var centralAtom = chain.residues()[l].centralAtom();\n              if (centralAtom === null) {\n                continue;\n              }\n              vec3.transformMat4(transformedPos, centralAtom.pos(), matrix);\n              callback(centralAtom, transformedPos);\n            }\n          }\n        }\n      }\n    };\n  }();\n  function BaseGeom(gl) {\n    SceneNode.call(this, gl);\n    this._idRanges = [];\n    this._vertAssocs = [];\n    this._showRelated = null;\n    this._selection = null;\n  }\n  utils.derive(BaseGeom, SceneNode, {\n    setShowRelated: function (rel) {\n      if (rel && rel !== 'asym') {\n        if (this.structure().assembly(rel) === null) {\n          console.error('no assembly with name', rel, '. Falling back to asymmetric unit');\n          return;\n        }\n      }\n      this._showRelated = rel;\n      return rel;\n    },\n    symWithIndex: function (index) {\n      if (this.showRelated() === 'asym') {\n        return null;\n      }\n      var assembly = this.structure().assembly(this.showRelated());\n      if (!assembly) {\n        return null;\n      }\n      var gen = assembly.generators();\n      for (var i = 0; i < gen.length; ++i) {\n        if (gen[i].matrices().length > index) {\n          return gen[i].matrix(index);\n        }\n        index -= gen[i].matrices().length;\n      }\n      return null;\n    },\n    showRelated: function () {\n      return this._showRelated;\n    },\n    select: function (what) {\n      return this.structure().select(what);\n    },\n    structure: function () {\n      return this._vertAssocs[0]._structure;\n    },\n    getColorForAtom: function (atom, color) {\n      return this._vertAssocs[0].getColorForAtom(atom, color);\n    },\n    addIdRange: function (range) {\n      this._idRanges.push(range);\n    },\n    destroy: function () {\n      SceneNode.prototype.destroy.call(this);\n      for (var i = 0; i < this._idRanges.length; ++i) {\n        this._idRanges[i].recycle();\n      }\n    },\n    eachCentralAtom: function (callback) {\n      var go = this;\n      var structure = go.structure();\n      var assembly = structure.assembly(go.showRelated());\n      if (assembly === null) {\n        return eachCentralAtomAsym(structure, callback);\n      }\n      return eachCentralAtomSym(structure, assembly.generators(), callback);\n    },\n    addVertAssoc: function (assoc) {\n      this._vertAssocs.push(assoc);\n    },\n    _vertArraysInvolving: function (chains) {\n      var vertArrays = this.vertArrays();\n      var selectedArrays = [];\n      var set = {};\n      for (var ci = 0; ci < chains.length; ++ci) {\n        set[chains[ci]] = true;\n      }\n      for (var i = 0; i < vertArrays.length; ++i) {\n        if (set[vertArrays[i].chain()] === true) {\n          selectedArrays.push(vertArrays[i]);\n        }\n      }\n      return selectedArrays;\n    },\n    _drawSymmetryRelated: function (cam, shader, assembly) {\n      var gens = assembly.generators();\n      for (var i = 0; i < gens.length; ++i) {\n        var gen = gens[i];\n        var affectedVAs = this._vertArraysInvolving(gen.chains());\n        this._drawVertArrays(cam, shader, affectedVAs, gen.matrices());\n      }\n    },\n    _updateProjectionIntervalsAsym: function (xAxis, yAxis, zAxis, xInterval, yInterval, zInterval) {\n      var vertArrays = this.vertArrays();\n      for (var i = 0; i < vertArrays.length; ++i) {\n        vertArrays[i].updateProjectionIntervals(xAxis, yAxis, zAxis, xInterval, yInterval, zInterval);\n      }\n    },\n    updateProjectionIntervals: function (xAxis, yAxis, zAxis, xInterval, yInterval, zInterval) {\n      if (!this._visible) {\n        return;\n      }\n      var showRelated = this.showRelated();\n      if (showRelated === 'asym') {\n        return this._updateProjectionIntervalsAsym(xAxis, yAxis, zAxis, xInterval, yInterval, zInterval);\n      }\n      var assembly = this.structure().assembly(showRelated);\n      var gens = assembly.generators();\n      for (var i = 0; i < gens.length; ++i) {\n        var gen = gens[i];\n        var affectedVAs = this._vertArraysInvolving(gen.chains());\n        for (var j = 0; j < gen.matrices().length; ++j) {\n          for (var k = 0; k < affectedVAs.length; ++k) {\n            var transform = gen.matrix(j);\n            affectedVAs[k].updateProjectionIntervals(xAxis, yAxis, zAxis, xInterval, yInterval, zInterval, transform);\n          }\n        }\n      }\n    },\n    _updateSquaredSphereRadiusAsym: function (center, radius) {\n      var vertArrays = this.vertArrays();\n      for (var i = 0; i < vertArrays.length; ++i) {\n        radius = vertArrays[i].updateSquaredSphereRadius(center, radius);\n      }\n      return radius;\n    },\n    updateSquaredSphereRadius: function (center, radius) {\n      if (!this._visible) {\n        return radius;\n      }\n      var showRelated = this.showRelated();\n      if (showRelated === 'asym') {\n        return this._updateSquaredSphereRadiusAsym(center, radius);\n      }\n      var assembly = this.structure().assembly(showRelated);\n      var gens = assembly.generators();\n      for (var i = 0; i < gens.length; ++i) {\n        var gen = gens[i];\n        var affectedVAs = this._vertArraysInvolving(gen.chains());\n        for (var j = 0; j < gen.matrices().length; ++j) {\n          for (var k = 0; k < affectedVAs.length; ++k) {\n            radius = affectedVAs[k].updateSquaredSphereRadius(center, radius);\n          }\n        }\n      }\n      return radius;\n    },\n    draw: function (cam, shaderCatalog, style, pass) {\n      if (!this._visible) {\n        return;\n      }\n      var shader = this.shaderForStyleAndPass(shaderCatalog, style, pass);\n      if (!shader) {\n        return;\n      }\n      var showRelated = this.showRelated();\n      if (showRelated === 'asym') {\n        return this._drawVertArrays(cam, shader, this.vertArrays(), null);\n      }\n      var assembly = this.structure().assembly(showRelated);\n      return this._drawSymmetryRelated(cam, shader, assembly);\n    },\n    colorBy: function (colorFunc, view) {\n      console.time('BaseGeom.colorBy');\n      this._ready = false;\n      view = view || this.structure();\n      for (var i = 0; i < this._vertAssocs.length; ++i) {\n        this._vertAssocs[i].recolor(colorFunc, view);\n      }\n      console.timeEnd('BaseGeom.colorBy');\n    },\n    setOpacity: function (val, view) {\n      console.time('BaseGeom.setOpacity');\n      this._ready = false;\n      view = view || this.structure();\n      for (var i = 0; i < this._vertAssocs.length; ++i) {\n        this._vertAssocs[i].setOpacity(val, view);\n      }\n      console.timeEnd('BaseGeom.setOpacity');\n    },\n    setSelection: function (view) {\n      console.time('BaseGeom.setSelection');\n      this._selection = view;\n      this._ready = false;\n      for (var i = 0; i < this._vertAssocs.length; ++i) {\n        this._vertAssocs[i].setSelection(view);\n      }\n      console.timeEnd('BaseGeom.setSelection');\n    },\n    selection: function () {\n      if (this._selection === null) {\n        this._selection = this.structure().createEmptyView();\n      }\n      return this._selection;\n    }\n  });\n  return BaseGeom;\n}();\ngfxVertexArrayBase = VertexArrayBase = function () {\n  \n  var vec3 = glMatrix.vec3;\n  function VertexArrayBase(gl, numVerts, float32Allocator) {\n    this._gl = gl;\n    this._vertBuffer = gl.createBuffer();\n    this._float32Allocator = float32Allocator || null;\n    this._ready = false;\n    this._boundingSphere = null;\n    var numFloats = this._FLOATS_PER_VERT * numVerts;\n    this._vertData = float32Allocator.request(numFloats);\n  }\n  VertexArrayBase.prototype = {\n    setColor: function (index, r, g, b, a) {\n      var colorStart = index * this._FLOATS_PER_VERT + this._COLOR_OFFSET;\n      this._vertData[colorStart + 0] = r;\n      this._vertData[colorStart + 1] = g;\n      this._vertData[colorStart + 2] = b;\n      this._vertData[colorStart + 3] = a;\n      this._ready = false;\n    },\n    getColor: function (index, color) {\n      var colorStart = index * this._FLOATS_PER_VERT + this._COLOR_OFFSET;\n      color[0] = this._vertData[colorStart + 0];\n      color[1] = this._vertData[colorStart + 1];\n      color[2] = this._vertData[colorStart + 2];\n      color[3] = this._vertData[colorStart + 3];\n      return color;\n    },\n    setOpacity: function (index, a) {\n      var colorStart = index * this._FLOATS_PER_VERT + this._COLOR_OFFSET;\n      this._vertData[colorStart + 3] = a;\n      this._ready = false;\n    },\n    setSelected: function (index, a) {\n      var selected = index * this._FLOATS_PER_VERT + this._SELECT_OFFSET;\n      this._vertData[selected] = a;\n      this._ready = false;\n    },\n    boundingSphere: function () {\n      if (!this._boundingSphere) {\n        this._boundingSphere = this._calculateBoundingSphere();\n      }\n      return this._boundingSphere;\n    },\n    _calculateBoundingSphere: function () {\n      var numVerts = this.numVerts();\n      if (numVerts === 0) {\n        return null;\n      }\n      var center = vec3.create();\n      var index, i;\n      for (i = 0; i < numVerts; ++i) {\n        index = i * this._FLOATS_PER_VERT;\n        center[0] += this._vertData[index + 0];\n        center[1] += this._vertData[index + 1];\n        center[2] += this._vertData[index + 2];\n      }\n      vec3.scale(center, center, 1 / numVerts);\n      var radiusSquare = 0;\n      for (i = 0; i < numVerts; ++i) {\n        index = i * this._FLOATS_PER_VERT;\n        var dx = center[0] - this._vertData[index + 0];\n        var dy = center[1] - this._vertData[index + 1];\n        var dz = center[2] - this._vertData[index + 2];\n        radiusSquare = Math.max(radiusSquare, dx * dx + dy * dy + dz * dz);\n      }\n      return new geom.Sphere(center, Math.sqrt(radiusSquare));\n    },\n    destroy: function () {\n      this._gl.deleteBuffer(this._vertBuffer);\n      this._float32Allocator.release(this._vertData);\n    },\n    bindBuffers: function () {\n      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertBuffer);\n      if (this._ready) {\n        return;\n      }\n      this._gl.bufferData(this._gl.ARRAY_BUFFER, this._vertData, this._gl.STATIC_DRAW);\n      this._ready = true;\n    },\n    updateSquaredSphereRadius: function () {\n      var transformedCenter = vec3.create();\n      return function (sphereCenter, radius, transform) {\n        var bounds = this.boundingSphere();\n        if (!bounds) {\n          return radius;\n        }\n        if (transform) {\n          vec3.transformMat4(transformedCenter, bounds.center(), transform);\n          return Math.max(vec3.sqrDist(transformedCenter, sphereCenter), radius);\n        }\n        var sphereRadSquare = bounds.radius() * bounds.radius();\n        return Math.max(vec3.sqrDist(bounds.center(), sphereCenter) + sphereRadSquare, radius);\n      };\n    }(),\n    updateProjectionIntervals: function () {\n      var transformedCenter = vec3.create();\n      return function (xAxis, yAxis, zAxis, xInterval, yInterval, zInterval, transform) {\n        var bounds = this.boundingSphere();\n        if (!bounds) {\n          return;\n        }\n        if (transform) {\n          vec3.transformMat4(transformedCenter, bounds.center(), transform);\n        } else {\n          vec3.copy(transformedCenter, bounds.center());\n        }\n        var xProjected = vec3.dot(xAxis, transformedCenter);\n        var yProjected = vec3.dot(yAxis, transformedCenter);\n        var zProjected = vec3.dot(zAxis, transformedCenter);\n        xInterval.update(xProjected - bounds.radius());\n        xInterval.update(xProjected + bounds.radius());\n        yInterval.update(yProjected - bounds.radius());\n        yInterval.update(yProjected + bounds.radius());\n        zInterval.update(zProjected - bounds.radius());\n        zInterval.update(zProjected + bounds.radius());\n      };\n    }()\n  };\n  return VertexArrayBase;\n}();\ngfxVertexArray = function () {\n  \n  function VertexArray(gl, numVerts, float32Allocator) {\n    VertexArrayBase.call(this, gl, numVerts, float32Allocator);\n    this._numVerts = 0;\n    this._primitiveType = this._gl.LINES;\n  }\n  utils.derive(VertexArray, VertexArrayBase, {\n    _FLOATS_PER_VERT: 9,\n    _POS_OFFSET: 0,\n    _COLOR_OFFSET: 3,\n    _ID_OFFSET: 7,\n    _SELECT_OFFSET: 8,\n    numVerts: function () {\n      return this._numVerts;\n    },\n    setDrawAsPoints: function (enable) {\n      if (enable) {\n        this._primitiveType = this._gl.POINTS;\n      } else {\n        this._primitiveType = this._gl.LINES;\n      }\n    },\n    addPoint: function (pos, color, id) {\n      var index = this._FLOATS_PER_VERT * this._numVerts;\n      this._vertData[index++] = pos[0];\n      this._vertData[index++] = pos[1];\n      this._vertData[index++] = pos[2];\n      this._vertData[index++] = color[0];\n      this._vertData[index++] = color[1];\n      this._vertData[index++] = color[2];\n      this._vertData[index++] = color[3];\n      this._vertData[index++] = id;\n      this._vertData[index++] = 0;\n      this._numVerts += 1;\n      this._ready = false;\n      this._boundingSphere = null;\n    },\n    addLine: function (startPos, startColor, endPos, endColor, idOne, idTwo) {\n      this.addPoint(startPos, startColor, idOne);\n      this.addPoint(endPos, endColor, idTwo);\n    },\n    bindAttribs: function (shader) {\n      this._gl.vertexAttribPointer(shader.posAttrib, 3, this._gl.FLOAT, false, this._FLOATS_PER_VERT * 4, this._POS_OFFSET * 4);\n      if (shader.colorAttrib !== -1) {\n        this._gl.vertexAttribPointer(shader.colorAttrib, 4, this._gl.FLOAT, false, this._FLOATS_PER_VERT * 4, this._COLOR_OFFSET * 4);\n        this._gl.enableVertexAttribArray(shader.colorAttrib);\n      }\n      this._gl.enableVertexAttribArray(shader.posAttrib);\n      if (shader.objIdAttrib !== -1) {\n        this._gl.vertexAttribPointer(shader.objIdAttrib, 1, this._gl.FLOAT, false, this._FLOATS_PER_VERT * 4, this._ID_OFFSET * 4);\n        this._gl.enableVertexAttribArray(shader.objIdAttrib);\n      }\n      if (shader.selectAttrib !== -1) {\n        this._gl.vertexAttribPointer(shader.selectAttrib, 1, this._gl.FLOAT, false, this._FLOATS_PER_VERT * 4, this._SELECT_OFFSET * 4);\n        this._gl.enableVertexAttribArray(shader.selectAttrib);\n      }\n    },\n    releaseAttribs: function (shader) {\n      this._gl.disableVertexAttribArray(shader.posAttrib);\n      if (shader.colorAttrib !== -1) {\n        this._gl.disableVertexAttribArray(shader.colorAttrib);\n      }\n      if (shader.objIdAttrib !== -1) {\n        this._gl.disableVertexAttribArray(shader.objIdAttrib);\n      }\n      if (shader.selectAttrib !== -1) {\n        this._gl.disableVertexAttribArray(shader.selectAttrib);\n      }\n    },\n    bind: function (shader) {\n      this.bindBuffers();\n      this.bindAttribs(shader);\n    },\n    draw: function () {\n      this._gl.drawArrays(this._primitiveType, 0, this._numVerts);\n    }\n  });\n  return VertexArray;\n}();\ngfxIndexedVertexArray = IndexedVertexArray = function () {\n  \n  function IndexedVertexArray(gl, numVerts, numIndices, float32Allocator, uint16Allocator) {\n    VertexArrayBase.call(this, gl, numVerts, float32Allocator);\n    this._indexBuffer = gl.createBuffer();\n    this._uint16Allocator = uint16Allocator;\n    this._numVerts = 0;\n    this._maxVerts = numVerts;\n    this._numTriangles = 0;\n    this._indexData = uint16Allocator.request(numIndices);\n  }\n  utils.derive(IndexedVertexArray, VertexArrayBase, {\n    destroy: function () {\n      VertexArrayBase.prototype.destroy.call(this);\n      this._gl.deleteBuffer(this._indexBuffer);\n      this._uint16Allocator.release(this._indexData);\n    },\n    setIndexData: function (data) {\n      this._ready = false;\n      this._numTriangles = data.length / 3;\n      for (var i = 0; i < data.length; ++i) {\n        this._indexData[i] = data[i];\n      }\n    },\n    setVertData: function (data) {\n      this._ready = false;\n      this._numVerts = data.length / this._FLOATS_PER_VERT;\n      for (var i = 0; i < data.length; ++i) {\n        this._vertData[i] = data[i];\n      }\n    },\n    numVerts: function () {\n      return this._numVerts;\n    },\n    maxVerts: function () {\n      return this._maxVerts;\n    },\n    numIndices: function () {\n      return this._numTriangles * 3;\n    },\n    addVertex: function (pos, normal, color, objId) {\n      if (this._numVerts === this._maxVerts) {\n        console.error('maximum number of vertices reached');\n        return;\n      }\n      var i = this._numVerts * this._FLOATS_PER_VERT;\n      this._vertData[i++] = pos[0];\n      this._vertData[i++] = pos[1];\n      this._vertData[i++] = pos[2];\n      this._vertData[i++] = normal[0];\n      this._vertData[i++] = normal[1];\n      this._vertData[i++] = normal[2];\n      this._vertData[i++] = color[0];\n      this._vertData[i++] = color[1];\n      this._vertData[i++] = color[2];\n      this._vertData[i++] = color[3];\n      this._vertData[i++] = objId;\n      this._vertData[i++] = 0;\n      this._numVerts += 1;\n      this._ready = false;\n    },\n    _FLOATS_PER_VERT: 12,\n    _BYTES_PER_VERT: 12 * 4,\n    _OBJID_OFFSET: 10,\n    _OBJID_BYTE_OFFSET: 10 * 4,\n    _SELECT_OFFSET: 11,\n    _SELECT_BYTE_OFFSET: 11 * 4,\n    _COLOR_OFFSET: 6,\n    _COLOR_BYTE_OFFSET: 6 * 4,\n    _NORMAL_OFFSET: 3,\n    _NORMAL_BYTE_OFFSET: 3 * 4,\n    _POS_OFFSET: 0,\n    _POS_BYTE_OFFSET: 0 * 4,\n    addTriangle: function (idx1, idx2, idx3) {\n      var index = 3 * this._numTriangles;\n      if (index + 2 >= this._indexData.length) {\n        return;\n      }\n      this._indexData[index++] = idx1;\n      this._indexData[index++] = idx2;\n      this._indexData[index++] = idx3;\n      this._numTriangles += 1;\n      this._ready = false;\n    },\n    bindBuffers: function () {\n      var ready = this._ready;\n      var gl = this._gl;\n      VertexArrayBase.prototype.bindBuffers.call(this);\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\n      if (ready) {\n        return;\n      }\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indexData, gl.STATIC_DRAW);\n    },\n    bindAttribs: function (shader) {\n      var gl = this._gl;\n      var byteStride = this._BYTES_PER_VERT;\n      gl.enableVertexAttribArray(shader.posAttrib);\n      gl.vertexAttribPointer(shader.posAttrib, 3, gl.FLOAT, false, byteStride, this._POS_BYTE_OFFSET);\n      if (shader.normalAttrib !== -1) {\n        gl.enableVertexAttribArray(shader.normalAttrib);\n        gl.vertexAttribPointer(shader.normalAttrib, 3, gl.FLOAT, false, byteStride, this._NORMAL_BYTE_OFFSET);\n      }\n      if (shader.colorAttrib !== -1) {\n        gl.vertexAttribPointer(shader.colorAttrib, 4, gl.FLOAT, false, byteStride, this._COLOR_BYTE_OFFSET);\n        gl.enableVertexAttribArray(shader.colorAttrib);\n      }\n      if (shader.objIdAttrib !== -1) {\n        gl.vertexAttribPointer(shader.objIdAttrib, 1, gl.FLOAT, false, byteStride, this._OBJID_BYTE_OFFSET);\n        gl.enableVertexAttribArray(shader.objIdAttrib);\n      }\n      if (shader.selectAttrib !== -1) {\n        gl.vertexAttribPointer(shader.selectAttrib, 1, gl.FLOAT, false, byteStride, this._SELECT_BYTE_OFFSET);\n        gl.enableVertexAttribArray(shader.selectAttrib);\n      }\n    },\n    releaseAttribs: function (shader) {\n      var gl = this._gl;\n      gl.disableVertexAttribArray(shader.posAttrib);\n      if (shader.colorAttrib !== -1) {\n        gl.disableVertexAttribArray(shader.colorAttrib);\n      }\n      if (shader.normalAttrib !== -1) {\n        gl.disableVertexAttribArray(shader.normalAttrib);\n      }\n      if (shader.objIdAttrib !== -1) {\n        gl.disableVertexAttribArray(shader.objIdAttrib);\n      }\n      if (shader.selectAttrib !== -1) {\n        gl.disableVertexAttribArray(shader.selectAttrib);\n      }\n    },\n    bind: function (shader) {\n      this.bindBuffers();\n      this.bindAttribs(shader);\n    },\n    draw: function () {\n      var gl = this._gl;\n      gl.drawElements(gl.TRIANGLES, this._numTriangles * 3, gl.UNSIGNED_SHORT, 0);\n    }\n  });\n  return IndexedVertexArray;\n}();\ngfxChainData = function (VertexArray) {\n  \n  function LineChainData(chain, gl, numVerts, float32Allocator) {\n    VertexArray.call(this, gl, numVerts, float32Allocator);\n    this._chain = chain;\n  }\n  utils.derive(LineChainData, VertexArray, {\n    chain: function () {\n      return this._chain;\n    },\n    drawSymmetryRelated: function (cam, shader, transforms) {\n      this.bind(shader);\n      for (var i = 0; i < transforms.length; ++i) {\n        cam.bind(shader, transforms[i]);\n        this._gl.uniform1i(shader.symId, i);\n        this.draw();\n      }\n      this.releaseAttribs(shader);\n    }\n  });\n  function MeshChainData(chain, gl, numVerts, numIndices, float32Allocator, uint16Allocator) {\n    IndexedVertexArray.call(this, gl, numVerts, numIndices, float32Allocator, uint16Allocator);\n    this._chain = chain;\n  }\n  utils.derive(MeshChainData, IndexedVertexArray, {\n    chain: function () {\n      return this._chain;\n    }\n  });\n  MeshChainData.prototype.drawSymmetryRelated = LineChainData.prototype.drawSymmetryRelated;\n  return {\n    LineChainData: LineChainData,\n    MeshChainData: MeshChainData\n  };\n}(gfxVertexArray);\ngfxMeshGeom = function (cd, IndexedVertexArray) {\n  \n  var MeshChainData = cd.MeshChainData;\n  function MeshGeom(gl, float32Allocator, uint16Allocator) {\n    BaseGeom.call(this, gl);\n    this._indexedVAs = [];\n    this._float32Allocator = float32Allocator;\n    this._uint16Allocator = uint16Allocator;\n    this._remainingVerts = null;\n    this._remainingIndices = null;\n  }\n  utils.derive(MeshGeom, BaseGeom, {\n    _boundedVertArraySize: function (size) {\n      return Math.min(65536, size);\n    },\n    addChainVertArray: function (chain, numVerts, numIndices) {\n      this._remainingVerts = numVerts;\n      this._remainingIndices = numIndices;\n      var newVa = new MeshChainData(chain.name(), this._gl, this._boundedVertArraySize(numVerts), numIndices, this._float32Allocator, this._uint16Allocator);\n      this._indexedVAs.push(newVa);\n      return newVa;\n    },\n    addVertArray: function (numVerts, numIndices) {\n      this._remainingVerts = numVerts;\n      this._remainingIndices = numIndices;\n      var newVa = new IndexedVertexArray(this._gl, this._boundedVertArraySize(numVerts), numIndices, this._float32Allocator, this._uint16Allocator);\n      this._indexedVAs.push(newVa);\n      return newVa;\n    },\n    vertArrayWithSpaceFor: function (numVerts) {\n      var currentVa = this._indexedVAs[this._indexedVAs.length - 1];\n      var remaining = currentVa.maxVerts() - currentVa.numVerts();\n      if (remaining >= numVerts) {\n        return currentVa;\n      }\n      this._remainingVerts -= currentVa.numVerts();\n      this._remainingIndices -= currentVa.numIndices();\n      numVerts = this._boundedVertArraySize(this._remainingVerts);\n      var newVa = null;\n      if (currentVa instanceof MeshChainData) {\n        newVa = new MeshChainData(currentVa.chain(), this._gl, numVerts, this._remainingIndices, this._float32Allocator, this._uint16Allocator);\n      } else {\n        newVa = new IndexedVertexArray(this._gl, numVerts, this._remainingIndices, this._float32Allocator, this._uint16Allocator);\n      }\n      this._indexedVAs.push(newVa);\n      return newVa;\n    },\n    vertArray: function (index) {\n      return this._indexedVAs[index];\n    },\n    destroy: function () {\n      BaseGeom.prototype.destroy.call(this);\n      for (var i = 0; i < this._indexedVAs.length; ++i) {\n        this._indexedVAs[i].destroy();\n      }\n      this._indexedVAs = [];\n    },\n    numVerts: function () {\n      return this._indexedVAs[0].numVerts();\n    },\n    shaderForStyleAndPass: function (shaderCatalog, style, pass) {\n      if (pass === 'normal') {\n        if (style === 'hemilight') {\n          return shaderCatalog.hemilight;\n        } else {\n          return shaderCatalog.phong;\n        }\n      }\n      if (pass === 'select') {\n        return shaderCatalog.select;\n      }\n      if (pass === 'outline') {\n        return shaderCatalog.outline;\n      }\n      var shader = shaderCatalog[pass];\n      return shader !== undefined ? shader : null;\n    },\n    _drawVertArrays: function (cam, shader, indexedVAs, additionalTransforms) {\n      var i;\n      if (additionalTransforms) {\n        for (i = 0; i < indexedVAs.length; ++i) {\n          indexedVAs[i].drawSymmetryRelated(cam, shader, additionalTransforms);\n        }\n      } else {\n        cam.bind(shader);\n        this._gl.uniform1i(shader.symId, 255);\n        for (i = 0; i < indexedVAs.length; ++i) {\n          indexedVAs[i].bind(shader);\n          indexedVAs[i].draw();\n          indexedVAs[i].releaseAttribs(shader);\n        }\n      }\n    },\n    vertArrays: function () {\n      return this._indexedVAs;\n    },\n    addVertex: function (pos, normal, color, objId) {\n      var va = this._indexedVAs[0];\n      va.addVertex(pos, normal, color, objId);\n    },\n    addTriangle: function (idx1, idx2, idx3) {\n      var va = this._indexedVAs[0];\n      va.addTriangle(idx1, idx2, idx3);\n    }\n  });\n  return MeshGeom;\n}(gfxChainData, gfxIndexedVertexArray);\ngfxLineGeom = function (chainData) {\n  \n  var LineChainData = chainData.LineChainData;\n  function LineGeom(gl, float32Allocator) {\n    BaseGeom.call(this, gl);\n    this._vertArrays = [];\n    this._float32Allocator = float32Allocator;\n    this._lineWidth = 0.5;\n    this._pointSize = 1;\n  }\n  utils.derive(LineGeom, BaseGeom, {\n    addChainVertArray: function (chain, numVerts) {\n      var va = new LineChainData(chain.name(), this._gl, numVerts, this._float32Allocator);\n      this._vertArrays.push(va);\n      return va;\n    },\n    setLineWidth: function (width) {\n      this._lineWidth = width;\n    },\n    setPointSize: function (size) {\n      this._pointSize = size;\n    },\n    vertArrays: function () {\n      return this._vertArrays;\n    },\n    shaderForStyleAndPass: function (shaderCatalog, style, pass) {\n      if (pass === 'outline') {\n        return shaderCatalog.selectLines;\n      }\n      if (pass === 'select') {\n        return shaderCatalog.select;\n      }\n      return shaderCatalog.lines;\n    },\n    destroy: function () {\n      BaseGeom.prototype.destroy.call(this);\n      for (var i = 0; i < this._vertArrays.length; ++i) {\n        this._vertArrays[i].destroy();\n      }\n      this._vertArrays = [];\n    },\n    _drawVertArrays: function (cam, shader, vertArrays, additionalTransforms) {\n      var pointSizeMul = cam.upsamplingFactor();\n      if (shader.selectAttrib !== -1) {\n        pointSizeMul = 4 * cam.upsamplingFactor();\n      }\n      var i;\n      if (additionalTransforms) {\n        cam.bind(shader);\n        this._gl.lineWidth(pointSizeMul * this._lineWidth);\n        if (shader.pointSize) {\n          this._gl.uniform1f(shader.pointSize, pointSizeMul * this._pointSize);\n        }\n        for (i = 0; i < vertArrays.length; ++i) {\n          vertArrays[i].drawSymmetryRelated(cam, shader, additionalTransforms);\n        }\n      } else {\n        cam.bind(shader);\n        this._gl.lineWidth(pointSizeMul * this._lineWidth);\n        this._gl.uniform1i(shader.symId, 255);\n        if (shader.pointSize) {\n          this._gl.uniform1f(shader.pointSize, pointSizeMul * this._pointSize);\n        }\n        for (i = 0; i < vertArrays.length; ++i) {\n          vertArrays[i].bind(shader);\n          vertArrays[i].draw();\n          vertArrays[i].releaseAttribs(shader);\n        }\n      }\n    },\n    vertArray: function () {\n      return this._va;\n    }\n  });\n  return LineGeom;\n}(gfxChainData);\ngfxVertAssoc = function () {\n  \n  function AtomVertexAssoc(structure, callColoringBeginEnd) {\n    this._structure = structure;\n    this._assocs = [];\n    this._callBeginEnd = callColoringBeginEnd;\n  }\n  AtomVertexAssoc.prototype = {\n    addAssoc: function (atom, va, vertStart, vertEnd) {\n      this._assocs.push({\n        atom: atom,\n        vertexArray: va,\n        vertStart: vertStart,\n        vertEnd: vertEnd\n      });\n    },\n    recolor: function (colorOp, view) {\n      var colorData = new Float32Array(view.atomCount() * 4);\n      if (this._callBeginEnd) {\n        colorOp.begin(this._structure);\n      }\n      var atomMap = {};\n      view.eachAtom(function (atom, index) {\n        atomMap[atom.index()] = index;\n        colorOp.colorFor(atom, colorData, index * 4);\n      });\n      if (this._callBeginEnd) {\n        colorOp.end(this._structure);\n      }\n      for (var i = 0; i < this._assocs.length; ++i) {\n        var assoc = this._assocs[i];\n        var ai = atomMap[assoc.atom.index()];\n        if (ai === undefined) {\n          continue;\n        }\n        var r = colorData[ai * 4 + 0], g = colorData[ai * 4 + 1], b = colorData[ai * 4 + 2], a = colorData[ai * 4 + 3];\n        var va = assoc.vertexArray;\n        for (var j = assoc.vertStart; j < assoc.vertEnd; ++j) {\n          va.setColor(j, r, g, b, a);\n        }\n      }\n    },\n    getColorForAtom: function (atom, color) {\n      for (var i = 0; i < this._assocs.length; ++i) {\n        var assoc = this._assocs[i];\n        if (assoc.atom.full() === atom.full()) {\n          return assoc.vertexArray.getColor(assoc.vertStart, color);\n        }\n      }\n      return null;\n    },\n    setSelection: function (view) {\n      var atomMap = {};\n      view.eachAtom(function (atom) {\n        atomMap[atom.index()] = true;\n      });\n      for (var i = 0; i < this._assocs.length; ++i) {\n        var assoc = this._assocs[i];\n        var ai = atomMap[assoc.atom.index()];\n        var selected = ai !== true ? 0 : 1;\n        var va = assoc.vertexArray;\n        for (var j = assoc.vertStart; j < assoc.vertEnd; ++j) {\n          va.setSelected(j, selected);\n        }\n      }\n    },\n    setOpacity: function (val, view) {\n      var atomMap = {};\n      view.eachAtom(function (atom) {\n        atomMap[atom.index()] = true;\n      });\n      for (var i = 0; i < this._assocs.length; ++i) {\n        var assoc = this._assocs[i];\n        var ai = atomMap[assoc.atom.index()];\n        if (ai !== true) {\n          continue;\n        }\n        var va = assoc.vertexArray;\n        for (var j = assoc.vertStart; j < assoc.vertEnd; ++j) {\n          va.setOpacity(j, val);\n        }\n      }\n    }\n  };\n  function TraceVertexAssoc(structure, interpolation, callColoringBeginEnd) {\n    this._structure = structure;\n    this._assocs = [];\n    this._callBeginEnd = callColoringBeginEnd;\n    this._interpolation = interpolation || 1;\n    this._perResidueColors = {};\n  }\n  TraceVertexAssoc.prototype = {\n    setPerResidueColors: function (traceIndex, colors) {\n      this._perResidueColors[traceIndex] = colors;\n    },\n    addAssoc: function (traceIndex, vertexArray, slice, vertStart, vertEnd) {\n      this._assocs.push({\n        traceIndex: traceIndex,\n        slice: slice,\n        vertStart: vertStart,\n        vertEnd: vertEnd,\n        vertexArray: vertexArray\n      });\n    },\n    recolor: function (colorOp, view) {\n      if (this._callBeginEnd) {\n        colorOp.begin(this._structure);\n      }\n      var colorData = [];\n      var i, j;\n      var traces = this._structure.backboneTraces();\n      console.assert(this._perResidueColors, 'per-residue colors must be set for recoloring to work');\n      for (i = 0; i < traces.length; ++i) {\n        var data = this._perResidueColors[i];\n        console.assert(data, 'no per-residue colors. Seriously, man?');\n        var index = 0;\n        var trace = traces[i];\n        for (j = 0; j < trace.length(); ++j) {\n          if (!view.containsResidue(trace.residueAt(j))) {\n            index += 4;\n            continue;\n          }\n          colorOp.colorFor(trace.centralAtomAt(j), data, index);\n          index += 4;\n        }\n        if (this._interpolation > 1) {\n          colorData.push(color.interpolateColor(data, this._interpolation));\n        } else {\n          colorData.push(data);\n        }\n      }\n      for (i = 0; i < this._assocs.length; ++i) {\n        var assoc = this._assocs[i];\n        var ai = assoc.slice;\n        var newColors = colorData[assoc.traceIndex];\n        var r = newColors[ai * 4], g = newColors[ai * 4 + 1], b = newColors[ai * 4 + 2], a = newColors[ai * 4 + 3];\n        var va = assoc.vertexArray;\n        for (j = assoc.vertStart; j < assoc.vertEnd; ++j) {\n          va.setColor(j, r, g, b, a);\n        }\n      }\n      if (this._callBeginEnd) {\n        colorOp.end(this._structure);\n      }\n    },\n    getColorForAtom: function (atom, color) {\n      var i, j;\n      var traces = this._structure.backboneTraces();\n      var residue = atom.full().residue();\n      for (i = 0; i < traces.length; ++i) {\n        var data = this._perResidueColors[i];\n        var index = 0;\n        var trace = traces[i];\n        for (j = 0; j < trace.length(); ++j) {\n          if (residue === trace.residueAt(j).full()) {\n            color[0] = data[index + 0];\n            color[1] = data[index + 1];\n            color[2] = data[index + 2];\n            color[3] = data[index + 3];\n            return color;\n          }\n          index += 4;\n        }\n      }\n      return null;\n    },\n    setSelection: function (view) {\n      var selData = [];\n      var i, j;\n      var traces = this._structure.backboneTraces();\n      for (i = 0; i < traces.length; ++i) {\n        var data = new Float32Array(this._perResidueColors[i].length);\n        var index = 0;\n        var trace = traces[i];\n        for (j = 0; j < trace.length(); ++j) {\n          var selected = view.containsResidue(trace.residueAt(j)) ? 1 : 0;\n          data[index] = selected;\n          index += 1;\n        }\n        if (this._interpolation > 1) {\n          selData.push(geom.interpolateScalars(data, this._interpolation));\n        } else {\n          selData.push(data);\n        }\n      }\n      for (i = 0; i < this._assocs.length; ++i) {\n        var assoc = this._assocs[i];\n        var ai = assoc.slice;\n        var sel = selData[assoc.traceIndex];\n        var a = sel[ai];\n        var va = assoc.vertexArray;\n        for (j = assoc.vertStart; j < assoc.vertEnd; ++j) {\n          va.setSelected(j, a);\n        }\n      }\n    },\n    setOpacity: function (val, view) {\n      var colorData = [];\n      var i, j;\n      var traces = this._structure.backboneTraces();\n      for (i = 0; i < traces.length; ++i) {\n        var data = this._perResidueColors[i];\n        var index = 0;\n        var trace = traces[i];\n        for (j = 0; j < trace.length(); ++j) {\n          if (!view.containsResidue(trace.residueAt(j))) {\n            index += 4;\n            continue;\n          }\n          data[index + 3] = val;\n          index += 4;\n        }\n        if (this._interpolation > 1) {\n          colorData.push(color.interpolateColor(data, this._interpolation));\n        } else {\n          colorData.push(data);\n        }\n      }\n      for (i = 0; i < this._assocs.length; ++i) {\n        var assoc = this._assocs[i];\n        var ai = assoc.slice;\n        var newColors = colorData[assoc.traceIndex];\n        var a = newColors[ai * 4 + 3];\n        var va = assoc.vertexArray;\n        for (j = assoc.vertStart; j < assoc.vertEnd; ++j) {\n          va.setOpacity(j, a);\n        }\n      }\n    }\n  };\n  return {\n    TraceVertexAssoc: TraceVertexAssoc,\n    AtomVertexAssoc: AtomVertexAssoc\n  };\n}();\ngfxRender = function (geomBuilders, MeshGeom, LineGeom, vertAssoc) {\n  \n  var vec3 = glMatrix.vec3;\n  var vec4 = glMatrix.vec4;\n  var mat3 = glMatrix.mat3;\n  var TubeProfile = geomBuilders.TubeProfile;\n  var ProtoSphere = geomBuilders.ProtoSphere;\n  var ProtoCylinder = geomBuilders.ProtoCylinder;\n  var TraceVertexAssoc = vertAssoc.TraceVertexAssoc;\n  var AtomVertexAssoc = vertAssoc.AtomVertexAssoc;\n  var interpolateColor = color.interpolateColor;\n  var exports = {};\n  var R = 0.7071;\n  var COIL_POINTS = [\n    -R,\n    -R,\n    0,\n    R,\n    -R,\n    0,\n    R,\n    R,\n    0,\n    -R,\n    R,\n    0\n  ];\n  var HELIX_POINTS = [\n    -6 * R,\n    -0.9 * R,\n    0,\n    -5.8 * R,\n    -1 * R,\n    0,\n    5.8 * R,\n    -1 * R,\n    0,\n    6 * R,\n    -0.9 * R,\n    0,\n    6 * R,\n    0.9 * R,\n    0,\n    5.8 * R,\n    1 * R,\n    0,\n    -5.8 * R,\n    1 * R,\n    0,\n    -6 * R,\n    0.9 * R,\n    0\n  ];\n  var ARROW_POINTS = [\n    -10 * R,\n    -0.9 * R,\n    0,\n    -9.8 * R,\n    -1 * R,\n    0,\n    9.8 * R,\n    -1 * R,\n    0,\n    10 * R,\n    -0.9 * R,\n    0,\n    10 * R,\n    0.9 * R,\n    0,\n    9.8 * R,\n    1 * R,\n    0,\n    -9.8 * R,\n    1 * R,\n    0,\n    -10 * R,\n    0.9 * R,\n    0\n  ];\n  var smoothStrandInplace = function () {\n    var bf = vec3.create(), af = vec3.create(), cf = vec3.create();\n    return function (p, from, to, length) {\n      from = Math.max(from, 1);\n      to = Math.min(length - 1, to);\n      var startIndex = 3 * (from - 1);\n      vec3.set(bf, p[startIndex], p[startIndex + 1], p[startIndex + 2]);\n      vec3.set(cf, p[3 * from], p[3 * from + 1], p[3 * from + 2]);\n      for (var i = from; i < to; ++i) {\n        startIndex = 3 * (i + 1);\n        vec3.set(af, p[startIndex], p[startIndex + 1], p[startIndex + 2]);\n        p[3 * i + 0] = af[0] * 0.25 + cf[0] * 0.5 + bf[0] * 0.25;\n        p[3 * i + 1] = af[1] * 0.25 + cf[1] * 0.5 + bf[1] * 0.25;\n        p[3 * i + 2] = af[2] * 0.25 + cf[2] * 0.5 + bf[2] * 0.25;\n        vec3.copy(bf, cf);\n        vec3.copy(cf, af);\n      }\n    };\n  }();\n  var spheresForChain = function () {\n    var color = vec4.fromValues(0, 0, 0, 1);\n    return function (meshGeom, vertAssoc, opts, chain) {\n      var atomCount = chain.atomCount();\n      var idRange = opts.idPool.getContinuousRange(atomCount);\n      meshGeom.addIdRange(idRange);\n      var vertsPerSphere = opts.protoSphere.numVerts();\n      var indicesPerSphere = opts.protoSphere.numIndices();\n      var radius = 1.5 * opts.radiusMultiplier;\n      meshGeom.addChainVertArray(chain, vertsPerSphere * atomCount, indicesPerSphere * atomCount);\n      chain.eachAtom(function (atom) {\n        var va = meshGeom.vertArrayWithSpaceFor(vertsPerSphere);\n        opts.color.colorFor(atom, color, 0);\n        var vertStart = va.numVerts();\n        var objId = idRange.nextId({\n          geom: meshGeom,\n          atom: atom\n        });\n        opts.protoSphere.addTransformed(va, atom.pos(), radius, color, objId);\n        var vertEnd = va.numVerts();\n        vertAssoc.addAssoc(atom, va, vertStart, vertEnd);\n      });\n    };\n  }();\n  exports.spheres = function (structure, gl, opts) {\n    console.time('spheres');\n    var protoSphere = new ProtoSphere(opts.sphereDetail, opts.sphereDetail);\n    opts.protoSphere = protoSphere;\n    var geom = new MeshGeom(gl, opts.float32Allocator, opts.uint16Allocator);\n    var vertAssoc = new AtomVertexAssoc(structure, true);\n    geom.addVertAssoc(vertAssoc);\n    geom.setShowRelated(opts.showRelated);\n    opts.color.begin(structure);\n    structure.eachChain(function (chain) {\n      spheresForChain(geom, vertAssoc, opts, chain);\n    });\n    opts.color.end(structure);\n    console.timeEnd('spheres');\n    return geom;\n  };\n  var ballsAndSticksForChain = function () {\n    var midPoint = vec3.create(), dir = vec3.create();\n    var color = vec4.fromValues(0, 0, 0, 1);\n    var left = vec3.create(), up = vec3.create();\n    var rotation = mat3.create();\n    return function (meshGeom, vertAssoc, opts, chain) {\n      var atomCount = chain.atomCount();\n      var bondCount = 0;\n      chain.eachAtom(function (a) {\n        bondCount += a.bonds().length;\n      });\n      var numVerts = atomCount * opts.protoSphere.numVerts() + bondCount * opts.protoCyl.numVerts();\n      var numIndices = atomCount * opts.protoSphere.numIndices() + bondCount * opts.protoCyl.numIndices();\n      meshGeom.addChainVertArray(chain, numVerts, numIndices);\n      var idRange = opts.idPool.getContinuousRange(atomCount);\n      meshGeom.addIdRange(idRange);\n      chain.eachAtom(function (atom) {\n        var atomVerts = opts.protoSphere.numVerts() + atom.bondCount() * opts.protoCyl.numVerts();\n        var va = meshGeom.vertArrayWithSpaceFor(atomVerts);\n        var vertStart = va.numVerts();\n        var objId = idRange.nextId({\n          geom: meshGeom,\n          atom: atom\n        });\n        opts.color.colorFor(atom, color, 0);\n        opts.protoSphere.addTransformed(va, atom.pos(), opts.radius, color, objId);\n        atom.eachBond(function (bond) {\n          bond.mid_point(midPoint);\n          vec3.sub(dir, atom.pos(), midPoint);\n          var length = vec3.length(dir);\n          vec3.scale(dir, dir, 1 / length);\n          geom.buildRotation(rotation, dir, left, up, false);\n          vec3.add(midPoint, midPoint, atom.pos());\n          vec3.scale(midPoint, midPoint, 0.5);\n          opts.protoCyl.addTransformed(va, midPoint, length, opts.radius, rotation, color, color, objId, objId);\n        });\n        var vertEnd = va.numVerts();\n        vertAssoc.addAssoc(atom, va, vertStart, vertEnd);\n      });\n    };\n  }();\n  exports.ballsAndSticks = function (structure, gl, opts) {\n    console.time('ballsAndSticks');\n    var vertAssoc = new AtomVertexAssoc(structure, true);\n    var protoSphere = new ProtoSphere(opts.sphereDetail, opts.sphereDetail);\n    var protoCyl = new ProtoCylinder(opts.arcDetail);\n    opts.protoSphere = protoSphere;\n    opts.protoCyl = protoCyl;\n    var meshGeom = new MeshGeom(gl, opts.float32Allocator, opts.uint16Allocator);\n    meshGeom.addVertAssoc(vertAssoc);\n    meshGeom.setShowRelated(opts.showRelated);\n    opts.color.begin(structure);\n    structure.eachChain(function (chain) {\n      ballsAndSticksForChain(meshGeom, vertAssoc, opts, chain);\n    });\n    opts.color.end(structure);\n    console.timeEnd('ballsAndSticks');\n    return meshGeom;\n  };\n  var pointsForChain = function () {\n    var clr = vec4.fromValues(0, 0, 0, 1);\n    return function (lineGeom, vertAssoc, chain, opts) {\n      var atomCount = chain.atomCount();\n      var idRange = opts.idPool.getContinuousRange(atomCount);\n      lineGeom.addIdRange(idRange);\n      var va = lineGeom.addChainVertArray(chain, atomCount);\n      va.setDrawAsPoints(true);\n      chain.eachAtom(function (atom) {\n        var vertStart = va.numVerts();\n        opts.color.colorFor(atom, clr, 0);\n        var objId = idRange.nextId({\n          geom: lineGeom,\n          atom: atom\n        });\n        va.addPoint(atom.pos(), clr, objId);\n        var vertEnd = va.numVerts();\n        vertAssoc.addAssoc(atom, va, vertStart, vertEnd);\n      });\n    };\n  }();\n  exports.points = function (structure, gl, opts) {\n    console.time('points');\n    var vertAssoc = new AtomVertexAssoc(structure, true);\n    opts.color.begin(structure);\n    var lineGeom = new LineGeom(gl, opts.float32Allocator);\n    lineGeom.setPointSize(opts.pointSize);\n    lineGeom.addVertAssoc(vertAssoc);\n    lineGeom.setShowRelated(opts.showRelated);\n    structure.eachChain(function (chain) {\n      pointsForChain(lineGeom, vertAssoc, chain, opts);\n    });\n    opts.color.end(structure);\n    console.timeEnd('points');\n    return lineGeom;\n  };\n  var linesForChain = function () {\n    var mp = vec3.create();\n    var clr = vec4.fromValues(0, 0, 0, 1);\n    return function (lineGeom, vertAssoc, chain, opts) {\n      var lineCount = 0;\n      var atomCount = chain.atomCount();\n      var idRange = opts.idPool.getContinuousRange(atomCount);\n      lineGeom.addIdRange(idRange);\n      chain.eachAtom(function (atom) {\n        var numBonds = atom.bonds().length;\n        if (numBonds) {\n          lineCount += numBonds;\n        } else {\n          lineCount += 3;\n        }\n      });\n      var va = lineGeom.addChainVertArray(chain, lineCount * 2);\n      chain.eachAtom(function (atom) {\n        var vertStart = va.numVerts();\n        var objId = idRange.nextId({\n          geom: lineGeom,\n          atom: atom\n        });\n        if (atom.bonds().length) {\n          atom.eachBond(function (bond) {\n            bond.mid_point(mp);\n            opts.color.colorFor(atom, clr, 0);\n            va.addLine(atom.pos(), clr, mp, clr, objId, objId);\n          });\n        } else {\n          var cs = 0.2;\n          var pos = atom.pos();\n          opts.color.colorFor(atom, clr, 0);\n          va.addLine([\n            pos[0] - cs,\n            pos[1],\n            pos[2]\n          ], clr, [\n            pos[0] + cs,\n            pos[1],\n            pos[2]\n          ], clr, objId, objId);\n          va.addLine([\n            pos[0],\n            pos[1] - cs,\n            pos[2]\n          ], clr, [\n            pos[0],\n            pos[1] + cs,\n            pos[2]\n          ], clr, objId, objId);\n          va.addLine([\n            pos[0],\n            pos[1],\n            pos[2] - cs\n          ], clr, [\n            pos[0],\n            pos[1],\n            pos[2] + cs\n          ], clr, objId, objId);\n        }\n        var vertEnd = va.numVerts();\n        vertAssoc.addAssoc(atom, va, vertStart, vertEnd);\n      });\n    };\n  }();\n  exports.lines = function (structure, gl, opts) {\n    console.time('lines');\n    var vertAssoc = new AtomVertexAssoc(structure, true);\n    opts.color.begin(structure);\n    var lineGeom = new LineGeom(gl, opts.float32Allocator);\n    lineGeom.setLineWidth(opts.lineWidth);\n    lineGeom.addVertAssoc(vertAssoc);\n    lineGeom.setShowRelated(opts.showRelated);\n    structure.eachChain(function (chain) {\n      linesForChain(lineGeom, vertAssoc, chain, opts);\n    });\n    opts.color.end(structure);\n    console.timeEnd('lines');\n    return lineGeom;\n  };\n  var _lineTraceNumVerts = function (traces) {\n    var numVerts = 0;\n    for (var i = 0; i < traces.length; ++i) {\n      numVerts += 2 * (traces[i].length() - 1);\n    }\n    return numVerts;\n  };\n  var makeLineTrace = function () {\n    var colorOne = vec4.fromValues(0, 0, 0, 1), colorTwo = vec4.fromValues(0, 0, 0, 1);\n    var posOne = vec3.create(), posTwo = vec3.create();\n    return function makeLineTrace(lineGeom, vertAssoc, va, traceIndex, trace, opts) {\n      vertAssoc.addAssoc(traceIndex, va, 0, va.numVerts(), va.numVerts() + 1);\n      var colors = opts.float32Allocator.request(trace.length() * 4);\n      var idRange = opts.idPool.getContinuousRange(trace.length());\n      lineGeom.addIdRange(idRange);\n      var idOne = idRange.nextId({\n        geom: lineGeom,\n        atom: trace.centralAtomAt(0)\n      });\n      var idTwo;\n      for (var i = 1; i < trace.length(); ++i) {\n        opts.color.colorFor(trace.centralAtomAt(i - 1), colorOne, 0);\n        colors[(i - 1) * 4 + 0] = colorOne[0];\n        colors[(i - 1) * 4 + 1] = colorOne[1];\n        colors[(i - 1) * 4 + 2] = colorOne[2];\n        colors[(i - 1) * 4 + 3] = colorOne[3];\n        opts.color.colorFor(trace.centralAtomAt(i), colorTwo, 0);\n        trace.posAt(posOne, i - 1);\n        trace.posAt(posTwo, i);\n        idTwo = idRange.nextId({\n          geom: lineGeom,\n          atom: trace.centralAtomAt(i)\n        });\n        va.addLine(posOne, colorOne, posTwo, colorTwo, idOne, idTwo);\n        idOne = idTwo;\n        idTwo = null;\n        var vertEnd = va.numVerts();\n        vertAssoc.addAssoc(traceIndex, va, i, vertEnd - 1, vertEnd + (i === trace.length() - 1 ? 0 : 1));\n      }\n      colors[trace.length() * 4 - 4] = colorTwo[0];\n      colors[trace.length() * 4 - 3] = colorTwo[1];\n      colors[trace.length() * 4 - 2] = colorTwo[2];\n      colors[trace.length() * 4 - 1] = colorTwo[3];\n      vertAssoc.setPerResidueColors(traceIndex, colors);\n      return traceIndex + 1;\n    };\n  }();\n  var lineTraceForChain = function (lineGeom, vertAssoc, opts, traceIndex, chain) {\n    var backboneTraces = chain.backboneTraces();\n    var numVerts = _lineTraceNumVerts(backboneTraces);\n    var va = lineGeom.addChainVertArray(chain, numVerts);\n    for (var i = 0; i < backboneTraces.length; ++i) {\n      traceIndex = makeLineTrace(lineGeom, vertAssoc, va, traceIndex, backboneTraces[i], opts);\n    }\n    return traceIndex;\n  };\n  exports.lineTrace = function (structure, gl, opts) {\n    console.time('lineTrace');\n    var vertAssoc = new TraceVertexAssoc(structure, 1, true);\n    opts.color.begin(structure);\n    var lineGeom = new LineGeom(gl, opts.float32Allocator);\n    lineGeom.setLineWidth(opts.lineWidth);\n    var traceIndex = 0;\n    structure.eachChain(function (chain) {\n      traceIndex = lineTraceForChain(lineGeom, vertAssoc, opts, traceIndex, chain);\n    });\n    lineGeom.addVertAssoc(vertAssoc);\n    lineGeom.setShowRelated(opts.showRelated);\n    opts.color.end(structure);\n    console.timeEnd('lineTrace');\n    return lineGeom;\n  };\n  var _slineNumVerts = function (traces, splineDetail) {\n    var numVerts = 0;\n    for (var i = 0; i < traces.length; ++i) {\n      numVerts += 2 * (splineDetail * (traces[i].length() - 1) + 1);\n    }\n    return numVerts;\n  };\n  var slineMakeTrace = function () {\n    var posOne = vec3.create(), posTwo = vec3.create();\n    var colorOne = vec4.fromValues(0, 0, 0, 1), colorTwo = vec4.fromValues(0, 0, 0, 1);\n    return function (lineGeom, vertAssoc, va, opts, traceIndex, trace) {\n      var firstSlice = trace.fullTraceIndex(0);\n      var positions = opts.float32Allocator.request(trace.length() * 3);\n      var colors = opts.float32Allocator.request(trace.length() * 4);\n      var objIds = [];\n      var i;\n      var idRange = opts.idPool.getContinuousRange(trace.length());\n      lineGeom.addIdRange(idRange);\n      for (i = 0; i < trace.length(); ++i) {\n        var atom = trace.centralAtomAt(i);\n        trace.smoothPosAt(posOne, i, opts.strength);\n        opts.color.colorFor(atom, colors, 4 * i);\n        positions[i * 3] = posOne[0];\n        positions[i * 3 + 1] = posOne[1];\n        positions[i * 3 + 2] = posOne[2];\n        objIds.push(idRange.nextId({\n          geom: lineGeom,\n          atom: atom\n        }));\n      }\n      var idStart = objIds[0], idEnd = 0;\n      var sdiv = geom.catmullRomSpline(positions, trace.length(), opts.splineDetail, opts.strength, false, opts.float32Allocator);\n      var interpColors = interpolateColor(colors, opts.splineDetail);\n      var vertStart = va.numVerts();\n      vertAssoc.addAssoc(traceIndex, va, firstSlice, vertStart, vertStart + 1);\n      var halfSplineDetail = Math.floor(opts.splineDetail / 2);\n      var steps = geom.catmullRomSplineNumPoints(trace.length(), opts.splineDetail, false);\n      for (i = 1; i < steps; ++i) {\n        posOne[0] = sdiv[3 * (i - 1)];\n        posOne[1] = sdiv[3 * (i - 1) + 1];\n        posOne[2] = sdiv[3 * (i - 1) + 2];\n        posTwo[0] = sdiv[3 * (i - 0)];\n        posTwo[1] = sdiv[3 * (i - 0) + 1];\n        posTwo[2] = sdiv[3 * (i - 0) + 2];\n        colorOne[0] = interpColors[4 * (i - 1) + 0];\n        colorOne[1] = interpColors[4 * (i - 1) + 1];\n        colorOne[2] = interpColors[4 * (i - 1) + 2];\n        colorOne[3] = interpColors[4 * (i - 1) + 3];\n        colorTwo[0] = interpColors[4 * (i - 0) + 0];\n        colorTwo[1] = interpColors[4 * (i - 0) + 1];\n        colorTwo[2] = interpColors[4 * (i - 0) + 2];\n        colorTwo[3] = interpColors[4 * (i - 0) + 3];\n        var index = Math.floor((i + halfSplineDetail) / opts.splineDetail);\n        idEnd = objIds[Math.min(objIds.length - 1, index)];\n        va.addLine(posOne, colorOne, posTwo, colorTwo, idStart, idEnd);\n        idStart = idEnd;\n        var vertEnd = va.numVerts();\n        vertAssoc.addAssoc(traceIndex, va, firstSlice + i, vertEnd - 1, vertEnd + (i === trace.length - 1 ? 0 : 1));\n      }\n      vertAssoc.setPerResidueColors(traceIndex, colors);\n      opts.float32Allocator.release(positions);\n      opts.float32Allocator.release(sdiv);\n      return traceIndex + 1;\n    };\n  }();\n  var slineForChain = function (lineGeom, vertAssoc, opts, chain, traceIndex) {\n    var backboneTraces = chain.backboneTraces();\n    var numVerts = _slineNumVerts(backboneTraces, opts.splineDetail);\n    var va = lineGeom.addChainVertArray(chain, numVerts);\n    for (var i = 0; i < backboneTraces.length; ++i) {\n      traceIndex = slineMakeTrace(lineGeom, vertAssoc, va, opts, traceIndex, backboneTraces[i]);\n    }\n    return traceIndex;\n  };\n  exports.sline = function (structure, gl, opts) {\n    console.time('sline');\n    opts.color.begin(structure);\n    var vertAssoc = new TraceVertexAssoc(structure, opts.splineDetail, 1, true);\n    var lineGeom = new LineGeom(gl, opts.float32Allocator);\n    lineGeom.addVertAssoc(vertAssoc);\n    lineGeom.setLineWidth(opts.lineWidth);\n    lineGeom.setShowRelated(opts.showRelated);\n    var traceIndex = 0;\n    structure.eachChain(function (chain) {\n      traceIndex = slineForChain(lineGeom, vertAssoc, opts, chain, traceIndex);\n    });\n    opts.color.end(structure);\n    console.timeEnd('sline');\n    return lineGeom;\n  };\n  var _traceNumVerts = function (traces, sphereNumVerts, cylNumVerts) {\n    var numVerts = 0;\n    for (var i = 0; i < traces.length; ++i) {\n      numVerts += traces[i].length() * sphereNumVerts;\n      numVerts += (traces[i].length() - 1) * cylNumVerts;\n    }\n    return numVerts;\n  };\n  var _traceNumIndices = function (traces, sphereNumIndices, cylNumIndices) {\n    var numIndices = 0;\n    for (var i = 0; i < traces.length; ++i) {\n      numIndices += traces[i].length() * sphereNumIndices;\n      numIndices += (traces[i].length() - 1) * cylNumIndices;\n    }\n    return numIndices;\n  };\n  var traceForChain = function (meshGeom, vertAssoc, opts, traceIndex, chain) {\n    var traces = chain.backboneTraces();\n    var numVerts = _traceNumVerts(traces, opts.protoSphere.numVerts(), opts.protoCyl.numVerts());\n    var numIndices = _traceNumIndices(traces, opts.protoSphere.numIndices(), opts.protoCyl.numIndices());\n    meshGeom.addChainVertArray(chain, numVerts, numIndices);\n    for (var ti = 0; ti < traces.length; ++ti) {\n      _renderSingleTrace(meshGeom, vertAssoc, traces[ti], traceIndex, opts);\n      traceIndex++;\n    }\n    return traceIndex;\n  };\n  exports.trace = function (structure, gl, opts) {\n    console.time('trace');\n    opts.protoCyl = new ProtoCylinder(opts.arcDetail);\n    opts.protoSphere = new ProtoSphere(opts.sphereDetail, opts.sphereDetail);\n    var meshGeom = new MeshGeom(gl, opts.float32Allocator, opts.uint16Allocator);\n    var vertAssoc = new TraceVertexAssoc(structure, 1, true);\n    meshGeom.addVertAssoc(vertAssoc);\n    meshGeom.setShowRelated(opts.showRelated);\n    opts.color.begin(structure);\n    var traceIndex = 0;\n    structure.eachChain(function (chain) {\n      traceIndex = traceForChain(meshGeom, vertAssoc, opts, traceIndex, chain);\n    });\n    opts.color.end(structure);\n    console.timeEnd('trace');\n    return meshGeom;\n  };\n  var _cartoonNumVerts = function (traces, vertsPerSlice, splineDetail) {\n    var numVerts = 0;\n    for (var i = 0; i < traces.length; ++i) {\n      var traceVerts = ((traces[i].length() - 1) * splineDetail + 1) * vertsPerSlice;\n      var splits = Math.ceil((traceVerts + 2) / 65536);\n      numVerts += traceVerts + (splits - 1) * vertsPerSlice;\n      numVerts += 2;\n    }\n    return numVerts;\n  };\n  var _cartoonNumIndices = function (traces, vertsPerSlice, splineDetail) {\n    var numIndices = 0;\n    for (var i = 0; i < traces.length; ++i) {\n      numIndices += (traces[i].length() * splineDetail - 1) * vertsPerSlice * 6;\n      numIndices += 2 * 3 * vertsPerSlice;\n    }\n    return numIndices;\n  };\n  var _addNucleotideSticks = function () {\n    var rotation = mat3.create();\n    var up = vec3.create(), left = vec3.create(), dir = vec3.create();\n    var center = vec3.create();\n    var color = vec4.create();\n    return function (meshGeom, vertAssoc, traces, opts) {\n      var radius = opts.radius * 1.8;\n      var vertsPerNucleotideStick = opts.protoCyl.numVerts() + 2 * opts.protoSphere.numVerts();\n      for (var i = 0; i < traces.length; ++i) {\n        var trace = traces[i];\n        var idRange = opts.idPool.getContinuousRange(trace.length());\n        meshGeom.addIdRange(idRange);\n        for (var j = 0; j < trace.length(); ++j) {\n          var va = meshGeom.vertArrayWithSpaceFor(vertsPerNucleotideStick);\n          var vertStart = va.numVerts();\n          var residue = trace.residueAt(j);\n          var resName = residue.name();\n          var startAtom = residue.atom('C3\\'');\n          var endAtom = null;\n          if (resName === 'A' || resName === 'G' || resName === 'DA' || resName === 'DG') {\n            endAtom = residue.atom('N1');\n          } else {\n            endAtom = residue.atom('N3');\n          }\n          if (endAtom === null || startAtom === null) {\n            continue;\n          }\n          var objId = idRange.nextId({\n            geom: meshGeom,\n            atom: endAtom\n          });\n          vec3.add(center, startAtom.pos(), endAtom.pos());\n          vec3.scale(center, center, 0.5);\n          opts.color.colorFor(endAtom, color, 0);\n          vec3.sub(dir, endAtom.pos(), startAtom.pos());\n          var length = vec3.length(dir);\n          vec3.scale(dir, dir, 1 / length);\n          geom.buildRotation(rotation, dir, left, up, false);\n          opts.protoCyl.addTransformed(va, center, length, radius, rotation, color, color, objId, objId);\n          opts.protoSphere.addTransformed(va, endAtom.pos(), radius, color, objId);\n          opts.protoSphere.addTransformed(va, startAtom.pos(), radius, color, objId);\n          var vertEnd = va.numVerts();\n          console.assert(vertEnd <= 65536, 'too many vertices');\n          vertAssoc.addAssoc(endAtom, va, vertStart, vertEnd);\n        }\n      }\n    };\n  }();\n  var cartoonForChain = function (meshGeom, vertAssoc, nucleotideAssoc, opts, traceIndex, chain) {\n    var traces = chain.backboneTraces();\n    var numVerts = _cartoonNumVerts(traces, opts.arcDetail * 4, opts.splineDetail);\n    var numIndices = _cartoonNumIndices(traces, opts.arcDetail * 4, opts.splineDetail);\n    var nucleicAcidTraces = [];\n    var vertForBaseSticks = opts.protoCyl.numVerts() + 2 * opts.protoSphere.numVerts();\n    var indicesForBaseSticks = opts.protoCyl.numIndices() + 2 * opts.protoSphere.numIndices();\n    for (var i = 0; i < traces.length; ++i) {\n      var trace = traces[i];\n      if (trace.residueAt(0).isNucleotide()) {\n        nucleicAcidTraces.push(trace);\n        numVerts += trace.length() * vertForBaseSticks;\n        numIndices += trace.length() * indicesForBaseSticks;\n      }\n    }\n    meshGeom.addChainVertArray(chain, numVerts, numIndices);\n    for (var ti = 0; ti < traces.length; ++ti) {\n      traceIndex = _cartoonForSingleTrace(meshGeom, vertAssoc, traces[ti], traceIndex, opts);\n    }\n    _addNucleotideSticks(meshGeom, nucleotideAssoc, nucleicAcidTraces, opts);\n    return traceIndex;\n  };\n  exports.cartoon = function (structure, gl, opts) {\n    console.time('cartoon');\n    opts.arrowSkip = Math.floor(opts.splineDetail * 3 / 4);\n    opts.coilProfile = new TubeProfile(COIL_POINTS, opts.arcDetail, 1);\n    opts.arrowProfile = new TubeProfile(ARROW_POINTS, opts.arcDetail / 2, 0.1);\n    opts.helixProfile = new TubeProfile(HELIX_POINTS, opts.arcDetail / 2, 0.1);\n    opts.strandProfile = new TubeProfile(HELIX_POINTS, opts.arcDetail / 2, 0.1);\n    opts.protoCyl = new ProtoCylinder(opts.arcDetail * 4);\n    opts.protoSphere = new ProtoSphere(opts.arcDetail * 4, opts.arcDetail * 4);\n    var meshGeom = new MeshGeom(gl, opts.float32Allocator, opts.uint16Allocator);\n    var vertAssoc = new TraceVertexAssoc(structure, opts.splineDetail, true);\n    meshGeom.addVertAssoc(vertAssoc);\n    meshGeom.setShowRelated(opts.showRelated);\n    opts.color.begin(structure);\n    var traceIndex = 0;\n    var selection = structure.select({\n      anames: [\n        'N1',\n        'N3'\n      ]\n    });\n    var nucleotideAssoc = new AtomVertexAssoc(selection, true);\n    meshGeom.addVertAssoc(nucleotideAssoc);\n    structure.eachChain(function (chain) {\n      traceIndex = cartoonForChain(meshGeom, vertAssoc, nucleotideAssoc, opts, traceIndex, chain);\n    });\n    opts.color.end(structure);\n    console.timeEnd('cartoon');\n    return meshGeom;\n  };\n  exports.surface = function () {\n    var pos = vec3.create(), normal = vec3.create(), color = vec4.fromValues(0.8, 0.8, 0.8, 1);\n    return function (data, gl, opts) {\n      var offset = 0;\n      data.getUint32(0);\n      offset += 4;\n      var numVerts = data.getUint32(offset);\n      offset += 4;\n      var vertexStride = 4 * 6;\n      var facesDataStart = vertexStride * numVerts + offset;\n      var numFaces = data.getUint32(facesDataStart);\n      var meshGeom = new MeshGeom(gl, opts.float32Allocator, opts.uint16Allocator);\n      meshGeom.setShowRelated('asym');\n      var va = meshGeom.addVertArray(numVerts, numFaces * 3);\n      var i;\n      for (i = 0; i < numVerts; ++i) {\n        vec3.set(pos, data.getFloat32(offset + 0), data.getFloat32(offset + 4), data.getFloat32(offset + 8));\n        offset += 12;\n        vec3.set(normal, data.getFloat32(offset + 0), data.getFloat32(offset + 4), data.getFloat32(offset + 8));\n        offset += 12;\n        va.addVertex(pos, normal, color, 0);\n      }\n      offset = facesDataStart + 4;\n      for (i = 0; i < numFaces; ++i) {\n        var idx0 = data.getUint32(offset + 0), idx1 = data.getUint32(offset + 4), idx2 = data.getUint32(offset + 8);\n        offset += 12;\n        va.addTriangle(idx0 - 1, idx2 - 1, idx1 - 1);\n      }\n      return meshGeom;\n    };\n  }();\n  var _cartoonAddTube = function () {\n    var rotation = mat3.create();\n    var up = vec3.create();\n    return function (vertArray, pos, left, ss, tangent, color, radius, first, opts, offset, objId) {\n      var prof = opts.coilProfile;\n      if (ss !== 'C' && !opts.forceTube) {\n        if (ss === 'H') {\n          prof = opts.helixProfile;\n        } else if (ss === 'E') {\n          prof = opts.strandProfile;\n        } else if (ss === 'A') {\n          prof = opts.arrowProfile;\n        }\n      } else {\n        if (first) {\n          geom.ortho(left, tangent);\n        } else {\n          vec3.cross(left, up, tangent);\n        }\n      }\n      geom.buildRotation(rotation, tangent, left, up, true);\n      prof.addTransformed(vertArray, pos, radius, rotation, color, first, offset, objId);\n    };\n  }();\n  var _colorPosNormalsFromTrace = function () {\n    var pos = vec3.create();\n    var normal = vec3.create(), lastNormal = vec3.create();\n    return function (meshGeom, trace, colors, positions, normals, objIds, pool, opts) {\n      var strandStart = null, strandEnd = null;\n      var trace_length = trace.length();\n      vec3.set(lastNormal, 0, 0, 0);\n      for (var i = 0; i < trace_length; ++i) {\n        objIds.push(pool.nextId({\n          geom: meshGeom,\n          atom: trace.centralAtomAt(i)\n        }));\n        trace.smoothPosAt(pos, i, opts.strength);\n        positions[i * 3] = pos[0];\n        positions[i * 3 + 1] = pos[1];\n        positions[i * 3 + 2] = pos[2];\n        trace.smoothNormalAt(normal, i, opts.strength);\n        var atom = trace.centralAtomAt(i);\n        opts.color.colorFor(atom, colors, i * 4);\n        if (vec3.dot(normal, lastNormal) < 0) {\n          vec3.scale(normal, normal, -1);\n        }\n        if (trace.residueAt(i).ss() === 'E' && !opts.forceTube) {\n          if (strandStart === null) {\n            strandStart = i;\n          }\n          strandEnd = i;\n        }\n        if (trace.residueAt(i).ss() === 'C' && strandStart !== null) {\n          smoothStrandInplace(positions, strandStart, strandEnd, trace_length);\n          smoothStrandInplace(normals, strandStart, strandEnd, trace_length);\n          strandStart = null;\n          strandEnd = null;\n        }\n        normals[i * 3] = positions[3 * i] + normal[0] + lastNormal[0];\n        normals[i * 3 + 1] = positions[3 * i + 1] + normal[1] + lastNormal[1];\n        normals[i * 3 + 2] = positions[3 * i + 2] + normal[2] + lastNormal[2];\n        vec3.copy(lastNormal, normal);\n      }\n    };\n  }();\n  function capTubeStart(va, baseIndex, numTubeVerts) {\n    for (var i = 0; i < numTubeVerts - 1; ++i) {\n      va.addTriangle(baseIndex, baseIndex + 1 + i, baseIndex + 2 + i);\n    }\n    va.addTriangle(baseIndex, baseIndex + numTubeVerts, baseIndex + 1);\n  }\n  function capTubeEnd(va, baseIndex, numTubeVerts) {\n    var center = baseIndex + numTubeVerts;\n    for (var i = 0; i < numTubeVerts - 1; ++i) {\n      va.addTriangle(center, baseIndex + i + 1, baseIndex + i);\n    }\n    va.addTriangle(center, baseIndex, baseIndex + numTubeVerts - 1);\n  }\n  var _cartoonForSingleTrace = function () {\n    var tangent = vec3.create(), pos = vec3.create(), color = vec4.fromValues(0, 0, 0, 1), normal = vec3.create(), normal2 = vec3.create();\n    return function (meshGeom, vertAssoc, trace, traceIndex, opts) {\n      var numVerts = _cartoonNumVerts([trace], opts.arcDetail * 4, opts.splineDetail);\n      var positions = opts.float32Allocator.request(trace.length() * 3);\n      var colors = opts.float32Allocator.request(trace.length() * 4);\n      var normals = opts.float32Allocator.request(trace.length() * 3);\n      var objIds = [];\n      var idRange = opts.idPool.getContinuousRange(trace.length());\n      meshGeom.addIdRange(idRange);\n      _colorPosNormalsFromTrace(meshGeom, trace, colors, positions, normals, objIds, idRange, opts);\n      var vertArray = meshGeom.vertArrayWithSpaceFor(numVerts);\n      var sdiv = geom.catmullRomSpline(positions, trace.length(), opts.splineDetail, opts.strength, false, opts.float32Allocator);\n      var normalSdiv = geom.catmullRomSpline(normals, trace.length(), opts.splineDetail, opts.strength, false, opts.float32Allocator);\n      vertAssoc.setPerResidueColors(traceIndex, colors);\n      var radius = opts.radius * (trace.residueAt(0).isAminoacid() ? 1 : 1.8);\n      var interpColors = interpolateColor(colors, opts.splineDetail);\n      vec3.set(tangent, sdiv[3] - sdiv[0], sdiv[4] - sdiv[1], sdiv[5] - sdiv[2]);\n      vec3.set(pos, sdiv[0], sdiv[1], sdiv[2]);\n      vec3.set(normal, normalSdiv[0] - sdiv[0], normalSdiv[1] - sdiv[0], normalSdiv[2] - sdiv[2]);\n      vec3.normalize(tangent, tangent);\n      vec3.normalize(normal, normal);\n      vec4.set(color, interpColors[0], interpColors[1], interpColors[2], interpColors[3]);\n      var vertStart = vertArray.numVerts();\n      vertArray.addVertex(pos, [\n        -tangent[0],\n        -tangent[1],\n        -tangent[2]\n      ], color, objIds[0]);\n      _cartoonAddTube(vertArray, pos, normal, trace.residueAt(0).ss(), tangent, color, radius, true, opts, 0, objIds[0]);\n      capTubeStart(vertArray, vertStart, opts.arcDetail * 4);\n      var vertEnd = vertArray.numVerts();\n      var slice = 0;\n      vertAssoc.addAssoc(traceIndex, vertArray, slice, vertStart, vertEnd);\n      slice += 1;\n      var halfSplineDetail = Math.floor(opts.splineDetail / 2);\n      var steps = geom.catmullRomSplineNumPoints(trace.length(), opts.splineDetail, false);\n      var vertsPerSlice = opts.arcDetail * 4;\n      for (var i = 1, e = steps; i < e; ++i) {\n        var ix3 = 3 * i, ix4 = 4 * i, ipox3 = 3 * (i + 1), imox3 = 3 * (i - 1);\n        vec3.set(pos, sdiv[ix3], sdiv[ix3 + 1], sdiv[ix3 + 2]);\n        if (i === e - 1) {\n          vec3.set(tangent, sdiv[ix3] - sdiv[imox3], sdiv[ix3 + 1] - sdiv[imox3 + 1], sdiv[ix3 + 2] - sdiv[imox3 + 2]);\n        } else {\n          vec3.set(tangent, sdiv[ipox3] - sdiv[imox3], sdiv[ipox3 + 1] - sdiv[imox3 + 1], sdiv[ipox3 + 2] - sdiv[imox3 + 2]);\n        }\n        vec3.normalize(tangent, tangent);\n        vec4.set(color, interpColors[ix4], interpColors[ix4 + 1], interpColors[ix4 + 2], interpColors[ix4 + 3]);\n        var offset = 0;\n        var residueIndex = Math.floor(i / opts.splineDetail);\n        var prevResidueIndex = Math.floor((i - 1) / opts.splineDetail);\n        var arrowEndIndex = Math.floor((i + opts.arrowSkip) / opts.splineDetail);\n        var drawArrow = false;\n        var thisSS = trace.residueAt(residueIndex).ss();\n        if (!opts.forceTube) {\n          if (residueIndex !== prevResidueIndex) {\n            var prevSS = trace.residueAt(prevResidueIndex).ss();\n            if (prevSS === 'C' && (thisSS === 'H' || thisSS === 'E')) {\n              vec3.set(normal2, normalSdiv[imox3] - sdiv[imox3], normalSdiv[imox3 + 1] - sdiv[imox3 + 1], normalSdiv[imox3 + 2] - sdiv[imox3 + 2]);\n              vec3.normalize(normal2, normal2);\n              var argAngle = 2 * Math.PI / (opts.arcDetail * 4);\n              var signedAngle = geom.signedAngle(normal, normal2, tangent);\n              offset = Math.round(signedAngle / argAngle);\n              offset = (offset + opts.arcDetail * 4) % (opts.arcDetail * 4);\n            }\n          }\n          if (arrowEndIndex !== residueIndex && arrowEndIndex < trace.length()) {\n            var nextSS = trace.residueAt(arrowEndIndex).ss();\n            if (nextSS === 'C' && thisSS === 'E') {\n              drawArrow = true;\n            }\n          }\n        }\n        vec3.set(normal, normalSdiv[3 * i] - sdiv[ix3], normalSdiv[ix3 + 1] - sdiv[ix3 + 1], normalSdiv[ix3 + 2] - sdiv[ix3 + 2]);\n        vec3.normalize(normal, normal);\n        vertStart = vertArray.numVerts();\n        var objIndex = Math.floor((i + halfSplineDetail) / opts.splineDetail);\n        var objId = objIds[Math.min(objIds.length - 1, objIndex)];\n        _cartoonAddTube(vertArray, pos, normal, thisSS, tangent, color, radius, false, opts, offset, objId);\n        var additionalVerts = i === e - 1 ? 1 : vertsPerSlice;\n        if (vertArray.numVerts() + additionalVerts > vertArray.maxVerts()) {\n          vertEnd = vertArray.numVerts();\n          vertAssoc.addAssoc(traceIndex, vertArray, slice, vertStart, vertEnd);\n          vertArray = meshGeom.vertArrayWithSpaceFor(additionalVerts);\n          vertStart = 0;\n          _cartoonAddTube(vertArray, pos, normal, thisSS, tangent, color, radius, true, opts, 0, objId);\n        }\n        if (drawArrow) {\n          vertAssoc.addAssoc(traceIndex, vertArray, slice, vertStart, vertEnd);\n          _cartoonAddTube(vertArray, pos, normal, 'A', tangent, color, radius, false, opts, 0, objId);\n          i += opts.arrowSkip;\n        }\n        vertEnd = vertArray.numVerts();\n        if (i === e - 1) {\n          vertEnd += 1;\n        }\n        vertAssoc.addAssoc(traceIndex, vertArray, slice, vertStart, vertEnd);\n        slice += 1;\n        if (drawArrow) {\n          slice += opts.arrowSkip;\n        }\n      }\n      vertArray.addVertex(pos, tangent, color, objIds[objIds.length - 1]);\n      capTubeEnd(vertArray, vertStart, opts.arcDetail * 4);\n      opts.float32Allocator.release(normals);\n      opts.float32Allocator.release(positions);\n      return traceIndex + 1;\n    };\n  }();\n  var _renderSingleTrace = function () {\n    var rotation = mat3.create();\n    var dir = vec3.create(), left = vec3.create(), up = vec3.create(), midPoint = vec3.create(), caPrevPos = vec3.create(), caThisPos = vec3.create();\n    var colorOne = vec4.fromValues(0, 0, 0, 1);\n    var colorTwo = vec4.fromValues(0, 0, 0, 1);\n    return function (meshGeom, vertAssoc, trace, traceIndex, opts) {\n      if (trace.length() === 0) {\n        return;\n      }\n      var idRange = opts.idPool.getContinuousRange(trace.length());\n      meshGeom.addIdRange(idRange);\n      opts.color.colorFor(trace.centralAtomAt(0), colorOne, 0);\n      var numVerts = _traceNumVerts([trace], opts.protoSphere.numVerts(), opts.protoCyl.numVerts());\n      var remainingVerts = numVerts;\n      var va = meshGeom.vertArrayWithSpaceFor(numVerts);\n      var maxVerts = va.maxVerts();\n      var vertStart = va.numVerts();\n      trace.posAt(caPrevPos, 0);\n      var idStart = idRange.nextId({\n          geom: meshGeom,\n          atom: trace.centralAtomAt(0)\n        }), idEnd = 0;\n      opts.protoSphere.addTransformed(va, caPrevPos, opts.radius, colorOne, idStart);\n      var vertEnd = null;\n      vertAssoc.addAssoc(traceIndex, va, 0, vertStart, vertEnd);\n      var colors = opts.float32Allocator.request(trace.length() * 4);\n      colors[0] = colorOne[0];\n      colors[1] = colorOne[1];\n      colors[2] = colorOne[2];\n      colors[3] = colorOne[3];\n      var vertsPerIteration = opts.protoCyl.numVerts() + opts.protoSphere.numVerts();\n      for (var i = 1; i < trace.length(); ++i) {\n        idEnd = idRange.nextId({\n          geom: meshGeom,\n          atom: trace.centralAtomAt(i)\n        });\n        trace.posAt(caPrevPos, i - 1);\n        trace.posAt(caThisPos, i);\n        opts.color.colorFor(trace.centralAtomAt(i), colorTwo, 0);\n        colors[i * 4 + 0] = colorTwo[0];\n        colors[i * 4 + 1] = colorTwo[1];\n        colors[i * 4 + 2] = colorTwo[2];\n        colors[i * 4 + 3] = colorTwo[3];\n        vec3.sub(dir, caThisPos, caPrevPos);\n        var length = vec3.length(dir);\n        vec3.scale(dir, dir, 1 / length);\n        geom.buildRotation(rotation, dir, left, up, false);\n        vec3.copy(midPoint, caPrevPos);\n        vec3.add(midPoint, midPoint, caThisPos);\n        vec3.scale(midPoint, midPoint, 0.5);\n        if (vertsPerIteration > maxVerts - va.numVerts()) {\n          va = meshGeom.vertArrayWithSpaceFor(remainingVerts);\n        }\n        remainingVerts -= vertsPerIteration;\n        var endSphere = va.numVerts();\n        opts.protoCyl.addTransformed(va, midPoint, length, opts.radius, rotation, colorOne, colorTwo, idStart, idEnd);\n        vertEnd = va.numVerts();\n        vertEnd = vertEnd - (vertEnd - endSphere) / 2;\n        opts.protoSphere.addTransformed(va, caThisPos, opts.radius, colorTwo, idEnd);\n        idStart = idEnd;\n        vertAssoc.addAssoc(traceIndex, va, i, vertStart, vertEnd);\n        vertStart = vertEnd;\n        vec3.copy(colorOne, colorTwo);\n      }\n      vertAssoc.setPerResidueColors(traceIndex, colors);\n      vertAssoc.addAssoc(traceIndex, va, trace.length() - 1, vertStart, va.numVerts());\n    };\n  }();\n  return exports;\n}(gfxGeomBuilders, gfxMeshGeom, gfxLineGeom, gfxVertAssoc);\ngfxLabel = function () {\n  function TextLabel(gl, canvas, context, pos, text, options) {\n    SceneNode.call(this, gl);\n    var opts = options || {};\n    this._options = {};\n    this._options.fillStyle = opts.fillStyle || '#000';\n    this._options.backgroundAlpha = opts.backgroundAlpha || 0;\n    this._options.fontSize = opts.fontSize || 24;\n    this._options.font = opts.font || 'Verdana';\n    this._options.fontStyle = opts.fontStyle || 'normal';\n    this._options.fontColor = opts.fontColor || '#000';\n    this._order = 100;\n    this._pos = pos;\n    this._interleavedBuffer = this._gl.createBuffer();\n    this._interleavedData = new Float32Array(5 * 6);\n    this._prepareText(canvas, context, text);\n    var halfWidth = 0.5;\n    var halfHeight = 0.5;\n    this._interleavedData[0] = pos[0];\n    this._interleavedData[1] = pos[1];\n    this._interleavedData[2] = pos[2];\n    this._interleavedData[3] = -halfWidth;\n    this._interleavedData[4] = -halfHeight;\n    this._interleavedData[5] = pos[0];\n    this._interleavedData[6] = pos[1];\n    this._interleavedData[7] = pos[2];\n    this._interleavedData[8] = halfWidth;\n    this._interleavedData[9] = halfHeight;\n    this._interleavedData[10] = pos[0];\n    this._interleavedData[11] = pos[1];\n    this._interleavedData[12] = pos[2];\n    this._interleavedData[13] = halfWidth;\n    this._interleavedData[14] = -halfHeight;\n    this._interleavedData[15] = pos[0];\n    this._interleavedData[16] = pos[1];\n    this._interleavedData[17] = pos[2];\n    this._interleavedData[18] = -halfWidth;\n    this._interleavedData[19] = -halfHeight;\n    this._interleavedData[20] = pos[0];\n    this._interleavedData[21] = pos[1];\n    this._interleavedData[22] = pos[2];\n    this._interleavedData[23] = -halfWidth;\n    this._interleavedData[24] = halfHeight;\n    this._interleavedData[25] = pos[0];\n    this._interleavedData[26] = pos[1];\n    this._interleavedData[27] = pos[2];\n    this._interleavedData[28] = halfWidth;\n    this._interleavedData[29] = halfHeight;\n  }\n  function smallestPowerOfTwo(size) {\n    var s = 1;\n    while (s < size) {\n      s *= 2;\n    }\n    return s;\n  }\n  utils.derive(TextLabel, SceneNode, {\n    updateProjectionIntervals: function () {\n    },\n    updateSquaredSphereRadius: function (center, radius) {\n      return radius;\n    },\n    _setupTextParameters: function (ctx) {\n      ctx.fillStyle = this._options.fontColor;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'bottom';\n      ctx.font = this._options.fontStyle + ' ' + this._options.fontSize + 'px ' + this._options.font;\n    },\n    _prepareText: function (canvas, ctx, text) {\n      this._setupTextParameters(ctx);\n      var estimatedWidth = ctx.measureText(text).width;\n      var estimatedHeight = 24;\n      canvas.width = smallestPowerOfTwo(estimatedWidth);\n      canvas.height = smallestPowerOfTwo(estimatedHeight);\n      ctx.fillStyle = this._options.fillStyle;\n      ctx.globalAlpha = this._options.backgroundAlpha;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      this._setupTextParameters(ctx);\n      ctx.globalAlpha = 1;\n      ctx.lineWidth = 0.5;\n      ctx.lineStyle = 'none';\n      ctx.fillText(text, 0, canvas.height);\n      ctx.strokeText(text, 0, canvas.height);\n      this._texture = this._gl.createTexture();\n      this._textureFromCanvas(this._texture, canvas);\n      this._xScale = estimatedWidth / canvas.width;\n      this._yScale = estimatedHeight / canvas.height;\n      this._width = estimatedWidth;\n      this._height = estimatedHeight;\n    },\n    _textureFromCanvas: function (targetTexture, srcCanvas) {\n      var gl = this._gl;\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n      gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, srcCanvas);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.generateMipmap(gl.TEXTURE_2D);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    },\n    bind: function () {\n      var gl = this._gl;\n      gl.bindBuffer(gl.ARRAY_BUFFER, this._interleavedBuffer);\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, this._texture);\n      if (this._ready) {\n        return;\n      }\n      gl.bufferData(gl.ARRAY_BUFFER, this._interleavedData, gl.STATIC_DRAW);\n      this._ready = true;\n    },\n    draw: function (cam, shaderCatalog, style, pass) {\n      if (!this._visible) {\n        return;\n      }\n      if (pass !== 'normal') {\n        return;\n      }\n      var shader = shaderCatalog.text;\n      cam.bind(shader);\n      this.bind();\n      var gl = this._gl;\n      var factor = cam.upsamplingFactor();\n      gl.uniform1f(gl.getUniformLocation(shader, 'xScale'), this._xScale);\n      gl.uniform1f(gl.getUniformLocation(shader, 'yScale'), this._yScale);\n      gl.uniform1f(gl.getUniformLocation(shader, 'width'), factor * 2 * this._width / cam.viewportWidth());\n      gl.uniform1f(gl.getUniformLocation(shader, 'height'), factor * 2 * this._height / cam.viewportHeight());\n      gl.uniform1i(gl.getUniformLocation(shader, 'sampler'), 0);\n      var vertAttrib = gl.getAttribLocation(shader, 'attrCenter');\n      gl.enableVertexAttribArray(vertAttrib);\n      gl.vertexAttribPointer(vertAttrib, 3, gl.FLOAT, false, 5 * 4, 0 * 4);\n      var texAttrib = gl.getAttribLocation(shader, 'attrCorner');\n      gl.vertexAttribPointer(texAttrib, 2, gl.FLOAT, false, 5 * 4, 3 * 4);\n      gl.enableVertexAttribArray(texAttrib);\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      gl.disableVertexAttribArray(vertAttrib);\n      gl.disableVertexAttribArray(texAttrib);\n      gl.disable(gl.BLEND);\n    }\n  });\n  return TextLabel;\n}();\ngfxCustomMesh = function (gb) {\n  \n  var vec3 = glMatrix.vec3;\n  var mat3 = glMatrix.mat3;\n  var forceRGB = color.forceRGB;\n  var ID_CHUNK_SIZE = 100;\n  function DynamicIndexedVertexArray() {\n    this._vertData = [];\n    this._indexData = [];\n    this._numVerts = 0;\n  }\n  DynamicIndexedVertexArray.prototype = {\n    numVerts: function () {\n      return this._numVerts;\n    },\n    addVertex: function (pos, normal, color, objId) {\n      this._numVerts += 1;\n      this._vertData.push(pos[0], pos[1], pos[2], normal[0], normal[1], normal[2], color[0], color[1], color[2], color[3], objId, 0);\n    },\n    addTriangle: function (indexOne, indexTwo, indexThree) {\n      this._indexData.push(indexOne, indexTwo, indexThree);\n    },\n    numIndices: function () {\n      return this._indexData.length;\n    },\n    indexData: function () {\n      return this._indexData;\n    },\n    vertData: function () {\n      return this._vertData;\n    }\n  };\n  function CustomMesh(name, gl, float32Allocator, uint16Allocator, idPool) {\n    SceneNode.call(this, gl);\n    this._float32Allocator = float32Allocator;\n    this._uint16Allocator = uint16Allocator;\n    this._data = new DynamicIndexedVertexArray();\n    this._protoSphere = new gb.ProtoSphere(8, 8);\n    this._protoCyl = new gb.ProtoCylinder(8);\n    this._va = null;\n    this._idRanges = [];\n    this._idPool = idPool;\n    this._ready = false;\n    this._currentRange = null;\n  }\n  function capTubeStart(va, baseIndex, numTubeVerts) {\n    for (var i = 0; i < numTubeVerts - 1; ++i) {\n      va.addTriangle(baseIndex, baseIndex + 1 + i, baseIndex + 2 + i);\n    }\n    va.addTriangle(baseIndex, baseIndex + numTubeVerts, baseIndex + 1);\n  }\n  function capTubeEnd(va, baseIndex, numTubeVerts) {\n    var center = baseIndex + numTubeVerts;\n    for (var i = 0; i < numTubeVerts - 1; ++i) {\n      va.addTriangle(center, baseIndex + i + 1, baseIndex + i);\n    }\n    va.addTriangle(center, baseIndex, baseIndex + numTubeVerts - 1);\n  }\n  utils.derive(CustomMesh, SceneNode, {\n    updateProjectionIntervals: function () {\n    },\n    updateSquaredSphereRadius: function (center, radius) {\n      return radius;\n    },\n    addTube: function () {\n      var midPoint = vec3.create();\n      var left = vec3.create();\n      var up = vec3.create();\n      var dir = vec3.create();\n      var rotation = mat3.create();\n      return function (start, end, radius, options) {\n        options = options || {};\n        var color = forceRGB(options.color || 'white');\n        var cap = true;\n        if (options.cap !== undefined) {\n          cap = options.cap;\n        }\n        vec3.sub(dir, end, start);\n        var length = vec3.length(dir);\n        vec3.normalize(dir, dir);\n        vec3.add(midPoint, start, end);\n        vec3.scale(midPoint, midPoint, 0.5);\n        geom.buildRotation(rotation, dir, left, up, false);\n        if (cap) {\n          var startIndex = this._data.numVerts();\n          this._data.addVertex(start, [\n            -dir[0],\n            -dir[1],\n            -dir[2]\n          ], color, 0);\n          capTubeStart(this._data, startIndex, 8);\n        }\n        var userData = options.userData !== undefined ? options.userData : null;\n        console.log(userData);\n        var objectId = this._nextObjectId({\n          center: midPoint,\n          userData: userData,\n          geom: this\n        });\n        this._protoCyl.addTransformed(this._data, midPoint, length, radius, rotation, color, color, objectId, objectId);\n        if (cap) {\n          var baseIndex = this._data.numVerts();\n          this._data.addVertex(end, dir, color, 0);\n          capTubeEnd(this._data, baseIndex - 8, 8);\n        }\n        this._ready = false;\n      };\n    }(),\n    _nextObjectId: function (data) {\n      if (!this._currentRange || !this._currentRange.hasLeft()) {\n        this._currentRange = this._idPool.getContinuousRange(ID_CHUNK_SIZE);\n        this._idRanges.push(this._currentRange);\n      }\n      return this._currentRange.nextId(data);\n    },\n    destroy: function () {\n      SceneNode.prototype.destroy.call(this);\n      for (var i = 0; i < this._idRanges.length; ++i) {\n        this._idRanges[i].recycle();\n      }\n    },\n    addSphere: function (center, radius, options) {\n      options = options || {};\n      var color = forceRGB(options.color || 'white');\n      var userData = options.userData !== undefined ? options.userData : null;\n      var objectId = this._nextObjectId({\n        center: center,\n        userData: userData,\n        geom: this\n      });\n      this._protoSphere.addTransformed(this._data, center, radius, color, objectId);\n      this._ready = false;\n    },\n    _prepareVertexArray: function () {\n      this._ready = true;\n      if (this._va !== null) {\n        this._va.destroy();\n      }\n      this._va = new IndexedVertexArray(this._gl, this._data.numVerts(), this._data.numIndices(), this._float32Allocator, this._uint16Allocator);\n      this._va.setIndexData(this._data.indexData());\n      this._va.setVertData(this._data.vertData());\n    },\n    draw: function (cam, shaderCatalog, style, pass) {\n      if (!this._visible) {\n        return;\n      }\n      if (!this._ready) {\n        this._prepareVertexArray();\n      }\n      var shader = this.shaderForStyleAndPass(shaderCatalog, style, pass);\n      if (!shader) {\n        return;\n      }\n      cam.bind(shader);\n      this._gl.uniform1i(shader.symId, 255);\n      var va = this._va;\n      va.bind(shader);\n      va.draw();\n      va.releaseAttribs(shader);\n    },\n    shaderForStyleAndPass: function (shaderCatalog, style, pass) {\n      if (pass === 'normal') {\n        if (style === 'hemilight') {\n          return shaderCatalog.hemilight;\n        } else {\n          return shaderCatalog.phong;\n        }\n      }\n      if (pass === 'select') {\n        return shaderCatalog.select;\n      }\n      if (pass === 'outline') {\n        return shaderCatalog.outline;\n      }\n      var shader = shaderCatalog[pass];\n      return shader !== undefined ? shader : null;\n    }\n  });\n  return CustomMesh;\n}(gfxGeomBuilders);\ngfxAnimation = function () {\n  \n  var vec3 = glMatrix.vec3;\n  var quat = glMatrix.quat;\n  var mat3 = glMatrix.mat3;\n  function Animation(from, to, duration) {\n    this._from = from;\n    this._to = to;\n    this._duration = duration;\n    this._left = duration;\n    this._start = Date.now();\n    this._looping = false;\n    this._finished = false;\n  }\n  Animation.prototype = {\n    setLooping: function (looping) {\n      this._looping = looping;\n    },\n    step: function (cam) {\n      var now = Date.now();\n      var elapsed = now - this._start;\n      var t;\n      if (this._duration === 0) {\n        t = 1;\n      } else {\n        if (this._looping) {\n          var times = Math.floor(elapsed / this._duration);\n          t = (elapsed - times * this._duration) / this._duration;\n        } else {\n          elapsed = Math.min(this._duration, elapsed);\n          t = elapsed / this._duration;\n          this._finished = t === 1;\n        }\n      }\n      this.apply(cam, t);\n      return this._finished;\n    },\n    apply: function (cam, t) {\n      var smoothInterval = (1 - Math.cos(t * Math.PI)) / 2;\n      this._current = this._from * (1 - smoothInterval) + this._to * smoothInterval;\n      cam.setZoom(this._current);\n    },\n    finished: function () {\n      return this._finished;\n    }\n  };\n  function Move(from, to, duration) {\n    Animation.call(this, vec3.clone(from), vec3.clone(to), duration);\n    this._current = vec3.clone(from);\n  }\n  utils.derive(Move, Animation, {\n    apply: function (cam, t) {\n      var smoothInterval = (1 - Math.cos(t * Math.PI)) / 2;\n      vec3.lerp(this._current, this._from, this._to, smoothInterval);\n      cam.setCenter(this._current);\n    }\n  });\n  function Rotate(initialRotation, destinationRotation, duration) {\n    var initial = mat3.create();\n    var to = mat3.create();\n    mat3.fromMat4(initial, initialRotation);\n    mat3.fromMat4(to, destinationRotation);\n    var initialQuat = quat.create();\n    var toQuat = quat.create();\n    quat.fromMat3(initialQuat, initial);\n    quat.fromMat3(toQuat, to);\n    this._current = mat3.create();\n    Animation.call(this, initialQuat, toQuat, duration);\n  }\n  utils.derive(Rotate, Animation, {\n    apply: function () {\n      var quatRot = quat.create();\n      return function (cam, t) {\n        quat.slerp(quatRot, this._from, this._to, t);\n        mat3.fromQuat(this._current, quatRot);\n        cam.setRotation(this._current);\n      };\n    }()\n  });\n  function RockAndRoll(axis, duration) {\n    Animation.call(this, null, null, duration);\n    this._axis = vec3.clone(axis);\n    this.setLooping(true);\n    this._previousAngle = 0;\n  }\n  utils.derive(RockAndRoll, Animation, {\n    apply: function () {\n      var axisRot = mat3.create();\n      var rotation = mat3.create();\n      return function (cam, t) {\n        mat3.fromMat4(rotation, cam.rotation());\n        var angle = 0.2 * Math.sin(2 * t * Math.PI);\n        var deltaAngle = angle - this._previousAngle;\n        this._previousAngle = angle;\n        geom.axisRotation(axisRot, this._axis, deltaAngle);\n        mat3.mul(rotation, axisRot, rotation);\n        cam.setRotation(rotation);\n      };\n    }()\n  });\n  function Spin(axis, speed) {\n    var duration = 1000 * (2 * Math.PI / speed);\n    Animation.call(this, null, null, duration);\n    this._axis = vec3.clone(axis);\n    this.setLooping(true);\n    this._speed = speed;\n    this._previousT = 0;\n  }\n  utils.derive(Spin, Animation, {\n    apply: function () {\n      var axisRot = mat3.create();\n      var rotation = mat3.create();\n      return function (cam, t) {\n        mat3.fromMat4(rotation, cam.rotation());\n        var angle = Math.PI * 2 * (t - this._previousT);\n        this._previousT = t;\n        geom.axisRotation(axisRot, this._axis, angle);\n        mat3.mul(rotation, axisRot, rotation);\n        cam.setRotation(rotation);\n      };\n    }(),\n    setSpeed: function (speed) {\n      this._speed = speed;\n    },\n    setAxis: function (axis) {\n      this._axis = axis;\n    }\n  });\n  function AnimationControl() {\n    this._animations = [];\n  }\n  AnimationControl.prototype = {\n    run: function (camera) {\n      var time = Date.now();\n      this._animations = this._animations.filter(function (anim) {\n        return !anim.step(camera, time);\n      });\n      return this._animations.length > 0;\n    },\n    add: function (animation) {\n      this._animations.push(animation);\n    },\n    remove: function (animation) {\n      this._animations = this._animations.filter(function (a) {\n        return a !== animation;\n      });\n    }\n  };\n  function move(from, to, duration) {\n    return new Move(from, to, duration);\n  }\n  function rotate(from, to, duration) {\n    return new Rotate(from, to, duration);\n  }\n  function zoom(from, to, duration) {\n    return new Animation(from, to, duration);\n  }\n  function spin(axis, speed) {\n    return new Spin(axis, speed);\n  }\n  function rockAndRoll() {\n    return new RockAndRoll([\n      0,\n      1,\n      0\n    ], 2000);\n  }\n  return {\n    AnimationControl: AnimationControl,\n    move: move,\n    rotate: rotate,\n    zoom: zoom,\n    rockAndRoll: rockAndRoll,\n    spin: spin\n  };\n}();\nslab = function () {\n  \n  function Slab(near, far) {\n    this.near = near;\n    this.far = far;\n  }\n  function FixedSlab(options) {\n    options = options || {};\n    this._near = options.near || 0.1;\n    this._far = options.far || 400;\n  }\n  FixedSlab.prototype.update = function () {\n    return new Slab(this._near, this._far);\n  };\n  function AutoSlab() {\n    this._far = 100;\n  }\n  AutoSlab.prototype.update = function (objects, cam) {\n    var center = cam.center();\n    var radius = null;\n    for (var i = 0; i < objects.length; ++i) {\n      var obj = objects[i];\n      if (!obj.visible()) {\n        continue;\n      }\n      radius = obj.updateSquaredSphereRadius(center, radius);\n    }\n    if (radius === null) {\n      return null;\n    }\n    radius = Math.sqrt(radius);\n    var zoom = cam.zoom();\n    var newFar = (radius + zoom) * 1.05;\n    var newNear = 0.1;\n    return new Slab(newNear, newFar);\n  };\n  return {\n    FixedSlab: FixedSlab,\n    AutoSlab: AutoSlab,\n    Slab: Slab\n  };\n}();\nviewer = function (UniqueObjectIdPool, canvas, FrameBuffer, PoolAllocator, Cam, shaders, TouchHandler, MouseHandler, render, TextLabel, CustomMesh, anim) {\n  \n  var WEBGL_NOT_SUPPORTED = '<div style=\"vertical-align:middle; text-align:center;\"><h1>WebGL not supported</h1><p>Your browser does not support WebGL. You might want to try Chrome, Firefox, IE 11, or newer versions of Safari</p><p>If you are using a recent version of one of the above browsers, your graphic card might be blocked. Check the browser documentation for details on how to unblock it.</p></div>';\n  var vec3 = glMatrix.vec3;\n  var mat4 = glMatrix.mat4;\n  function shouldUseHighPrecision() {\n    return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n  }\n  var requestAnimFrame = function () {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n      window.setTimeout(callback, 1000 / 60);\n    };\n  }();\n  function slabModeToStrategy(mode, options) {\n    mode = mode || 'auto';\n    if (mode === 'fixed') {\n      return new slab.FixedSlab(options);\n    }\n    if (mode === 'auto') {\n      return new slab.AutoSlab(options);\n    }\n    return null;\n  }\n  function PickedObject(target, node, symIndex, pos, object, transform) {\n    this._pos = pos;\n    this._target = target;\n    this._node = node;\n    this._symIndex = symIndex;\n    this._legacyObject = object;\n    this._legacyTransform = transform;\n  }\n  PickedObject.prototype = {\n    symIndex: function () {\n      return this._symIndex;\n    },\n    target: function () {\n      return this._target;\n    },\n    pos: function () {\n      return this._pos;\n    },\n    node: function () {\n      return this._node;\n    },\n    transform: function () {\n      return this._legacyTransform;\n    },\n    object: function () {\n      return this._legacyObject;\n    }\n  };\n  function Viewer(domElement, opts) {\n    this._options = this._initOptions(opts, domElement);\n    this._initialized = false;\n    this._objects = [];\n    this._domElement = domElement;\n    this._redrawRequested = false;\n    this._resize = false;\n    this._lastTimestamp = null;\n    this._objectIdManager = new UniqueObjectIdPool();\n    this._spin = null;\n    this._rockAndRoll = null;\n    this.listenerMap = {};\n    this._animControl = new anim.AnimationControl();\n    this._initKeyboardInput();\n    this._initCanvas();\n    this.quality(this._options.quality);\n    if (this._options.click !== null) {\n      this.on('click', this._options.click);\n    }\n    if (this._options.doubleClicked !== null) {\n      this.on('doubleClick', this._options.doubleClick);\n    }\n    if (document.readyState === 'complete' || document.readyState === 'loaded' || document.readyState === 'interactive') {\n      this._initViewer();\n    } else {\n      document.addEventListener('DOMContentLoaded', utils.bind(this, this._initViewer));\n    }\n  }\n  function optValue(opts, name, defaultValue) {\n    if (name in opts) {\n      return opts[name];\n    }\n    return defaultValue;\n  }\n  function getDoubleClickHandler(opts) {\n    if (opts.atomDoubleClick) {\n      console.warn('use of atomDoubleClick is deprecated. ', 'use doubleClick instead');\n      return opts.atomDoubleClick;\n    }\n    if (opts.atomDoubleClicked) {\n      console.warn('use of atomDoubleClicked is deprecated. ', 'use doubleClick instead');\n      return opts.atomDoubleClicked;\n    }\n    if (opts.doubleClick) {\n      return opts.doubleClick;\n    }\n    return 'center';\n  }\n  function getClickHandler(opts) {\n    if (opts.atomClick) {\n      console.warn('use of atomClick is deprecated. ', 'use click instead');\n      return opts.atomClick;\n    }\n    if (opts.atomClicked) {\n      console.warn('use of atomClicked is deprecated. ', 'use click instead');\n      return opts.atomClicked;\n    }\n    if (opts.click) {\n      return opts.click;\n    }\n    return null;\n  }\n  Viewer.prototype = {\n    _initOptions: function (opts, domElement) {\n      opts = opts || {};\n      var options = {\n        width: opts.width || 500,\n        height: opts.height || 500,\n        animateTime: opts.animateTime || 0,\n        antialias: opts.antialias,\n        quality: optValue(opts, 'quality', 'low'),\n        style: optValue(opts, 'style', 'hemilight'),\n        background: color.forceRGB(opts.background || 'white'),\n        slabMode: slabModeToStrategy(opts.slabMode),\n        outline: optValue(opts, 'outline', true),\n        outlineColor: color.forceRGB(optValue(opts, 'outlineColor', 'black')),\n        outlineWidth: optValue(opts, 'outlineWidth', 1.5),\n        selectionColor: color.forceRGB(optValue(opts, 'selectionColor', '#3f3')),\n        fov: optValue(opts, 'fov', 45),\n        doubleClick: getDoubleClickHandler(opts),\n        click: getClickHandler(opts),\n        fog: optValue(opts, 'fog', true),\n        transparency: optValue(opts, 'transparency', 'alpha')\n      };\n      var parentRect = domElement.getBoundingClientRect();\n      if (options.width === 'auto') {\n        options.width = parentRect.width;\n      }\n      if (options.height === 'auto') {\n        options.height = parentRect.height;\n      }\n      return options;\n    },\n    _ensureSize: function () {\n      if (!this._resize) {\n        return;\n      }\n      this._resize = false;\n      this._cam.setViewportSize(this._canvas.viewportWidth(), this._canvas.viewportHeight());\n      this._pickBuffer.resize(this._options.width, this._options.height);\n    },\n    resize: function (width, height) {\n      if (width === this._options.width && height === this._options.height) {\n        return;\n      }\n      this._canvas.resize(width, height);\n      this._resize = true;\n      this._options.width = width;\n      this._options.height = height;\n      this.requestRedraw();\n    },\n    fitParent: function () {\n      var parentRect = this._domElement.getBoundingClientRect();\n      this.resize(parentRect.width, parentRect.height);\n    },\n    gl: function () {\n      return this._canvas.gl();\n    },\n    ok: function () {\n      return this._initialized;\n    },\n    options: function (optName, value) {\n      if (value !== undefined) {\n        this._options[optName] = value;\n        if (optName === 'fog') {\n          this._cam.fog(value);\n          this.requestRedraw();\n        } else if (optName === 'fov') {\n          this._cam.setFieldOfViewY(value * Math.PI / 180);\n        } else if (optName === 'selectionColor') {\n          this._cam.setSelectionColor(color.forceRGB(value));\n        } else if (optName === 'outlineColor') {\n          this._cam.setOutlineColorColor(color.forceRGB(value));\n        } else if (optName === 'outlineWidth') {\n          this._cam.setOutlineWidth(value + 0);\n        } else if (optName === 'transparency') {\n          var sd = value === 'screendoor';\n          this._cam.setScreenDoorTransparency(sd);\n        }\n      }\n      return this._options[optName];\n    },\n    quality: function (qual) {\n      this._options.quality = qual;\n      if (qual === 'high') {\n        this._options.arcDetail = 4;\n        this._options.sphereDetail = 16;\n        this._options.splineDetail = 8;\n        return;\n      }\n      if (qual === 'medium') {\n        this._options.arcDetail = 2;\n        this._options.sphereDetail = 10;\n        this._options.splineDetail = 5;\n        return;\n      }\n      if (qual === 'low') {\n        this._options.arcDetail = 2;\n        this._options.sphereDetail = 8;\n        this._options.splineDetail = 3;\n        return;\n      }\n      console.error('invalid quality argument', qual);\n    },\n    imageData: function () {\n      return this._canvas.imageData();\n    },\n    _initPickBuffer: function () {\n      var fbOptions = {\n        width: this._options.width,\n        height: this._options.height\n      };\n      this._pickBuffer = new FrameBuffer(this._canvas.gl(), fbOptions);\n    },\n    _initViewer: function () {\n      if (!this._canvas.initGL()) {\n        this._domElement.removeChild(this._canvas.domElement());\n        this._domElement.innerHTML = WEBGL_NOT_SUPPORTED;\n        this._domElement.style.width = this._options.width + 'px';\n        this._domElement.style.height = this._options.height + 'px';\n        return false;\n      }\n      this._initPickBuffer();\n      this._2dcontext = this._textureCanvas.getContext('2d');\n      this._float32Allocator = new PoolAllocator(Float32Array);\n      this._uint16Allocator = new PoolAllocator(Uint16Array);\n      this._cam = new Cam(this._canvas.gl());\n      this._cam.setUpsamplingFactor(this._canvas.superSamplingFactor());\n      this._cam.setOutlineWidth(this._options.outlineWidth);\n      var sd = this._options.transparency === 'screendoor';\n      this._cam.setScreenDoorTransparency(sd);\n      this._cam.fog(this._options.fog);\n      this._cam.setFogColor(this._options.background);\n      this._cam.setOutlineColor(this._options.outlineColor);\n      this._cam.setSelectionColor(this._options.selectionColor);\n      this._cam.setFieldOfViewY(this._options.fov * Math.PI / 180);\n      this._mouseHandler.setCam(this._cam);\n      var c = this._canvas;\n      var p = shouldUseHighPrecision() ? 'highp' : 'mediump';\n      this._shaderCatalog = {\n        hemilight: c.initShader(shaders.HEMILIGHT_VS, shaders.PRELUDE_FS + shaders.HEMILIGHT_FS, p),\n        phong: c.initShader(shaders.HEMILIGHT_VS, shaders.PRELUDE_FS + shaders.PHONG_FS, p),\n        outline: c.initShader(shaders.OUTLINE_VS, shaders.PRELUDE_FS + shaders.OUTLINE_FS, p),\n        lines: c.initShader(shaders.LINES_VS, shaders.PRELUDE_FS + shaders.LINES_FS, p),\n        text: c.initShader(shaders.TEXT_VS, shaders.TEXT_FS, p),\n        selectLines: c.initShader(shaders.SELECT_LINES_VS, shaders.SELECT_LINES_FS, p),\n        select: c.initShader(shaders.SELECT_VS, shaders.SELECT_FS, p)\n      };\n      this._boundDraw = utils.bind(this, this._draw);\n      this._touchHandler = new TouchHandler(this._canvas.domElement(), this, this._cam);\n      if (!this._initialized) {\n        this._initialized = true;\n        this._dispatchEvent({ 'name': 'viewerReadyEvent' }, 'viewerReady', this);\n      }\n      return true;\n    },\n    requestRedraw: function () {\n      if (this._redrawRequested) {\n        return;\n      }\n      this._redrawRequested = true;\n      requestAnimFrame(this._boundDraw);\n    },\n    boundingClientRect: function () {\n      return this._canvas.domElement().getBoundingClientRect();\n    },\n    _drawWithPass: function (pass) {\n      for (var i = 0, e = this._objects.length; i !== e; ++i) {\n        this._objects[i].draw(this._cam, this._shaderCatalog, this._options.style, pass);\n      }\n    },\n    _initKeyboardInput: function () {\n      var zeroSizedDiv = document.createElement('div');\n      zeroSizedDiv.setAttribute('style', 'overflow:hidden;width:0;height:0');\n      this._keyInput = document.createElement('textarea');\n      this._domElement.appendChild(zeroSizedDiv);\n      zeroSizedDiv.appendChild(this._keyInput);\n      this._keyInput.focus();\n    },\n    focus: function () {\n      this._keyInput.focus();\n    },\n    _initCanvas: function () {\n      var canvasOptions = {\n        antialias: this._options.antialias,\n        height: this._options.height,\n        width: this._options.width,\n        backgroundColor: this._options.background\n      };\n      this._canvas = new canvas.Canvas(this._domElement, canvasOptions);\n      this._textureCanvas = document.createElement('canvas');\n      this._textureCanvas.style.display = 'none';\n      this._domElement.appendChild(this._textureCanvas);\n      this._mouseHandler = new MouseHandler(this._canvas, this, this._cam, this._options.animateTime);\n      this._canvas.domElement().addEventListener('mousedown', utils.bind(this, this._gainFocus));\n    },\n    _gainFocus: function () {\n      this._keyInput.focus();\n    },\n    setRotation: function (rotation, ms) {\n      ms |= 0;\n      if (ms === 0) {\n        this._cam.setRotation(rotation);\n        this.requestRedraw();\n        return;\n      }\n      var rotation4;\n      if (rotation.length === 9) {\n        rotation4 = mat4.create();\n        mat4.fromMat3(rotation4, rotation);\n      } else {\n        rotation4 = mat4.clone(rotation);\n      }\n      this._animControl.add(anim.rotate(this._cam.rotation(), rotation4, ms));\n      this.requestRedraw();\n    },\n    setCamera: function (rotation, center, zoom, ms) {\n      ms |= 0;\n      this.setCenter(center, ms);\n      this.setRotation(rotation, ms);\n      this.setZoom(zoom, ms);\n    },\n    _animateCam: function () {\n      var anotherRedraw = this._animControl.run(this._cam);\n      if (anotherRedraw) {\n        this.requestRedraw();\n      }\n    },\n    _draw: function () {\n      if (this._canvas === null) {\n        return;\n      }\n      this._redrawRequested = false;\n      this._animateCam();\n      this._canvas.bind();\n      this._ensureSize();\n      var gl = this._canvas.gl();\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      var newSlab = this._options.slabMode.update(this._objects, this._cam);\n      if (newSlab !== null) {\n        this._cam.setNearFar(newSlab.near, newSlab.far);\n      }\n      gl.enable(gl.CULL_FACE);\n      if (this._options.outline) {\n        gl.cullFace(gl.BACK);\n        gl.enable(gl.CULL_FACE);\n        this._drawWithPass('outline');\n      }\n      gl.cullFace(gl.FRONT);\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      this._drawWithPass('normal');\n    },\n    setCenter: function (center, ms) {\n      ms |= 0;\n      if (ms === 0) {\n        this._cam.setCenter(center);\n        return;\n      }\n      this._animControl.add(anim.move(this._cam.center(), vec3.clone(center), ms));\n      this.requestRedraw();\n    },\n    setZoom: function (zoom, ms) {\n      ms |= 0;\n      if (ms === 0) {\n        this._cam.setZoom(zoom);\n        return;\n      }\n      this._animControl.add(anim.zoom(this._cam.zoom(), zoom, ms));\n      this.requestRedraw();\n    },\n    centerOn: function (what, ms) {\n      this.setCenter(what.center(), ms);\n    },\n    clear: function () {\n      for (var i = 0; i < this._objects.length; ++i) {\n        this._objects[i].destroy();\n      }\n      this._objects = [];\n    },\n    addListener: function (eventName, callback) {\n      if (eventName === 'keypress' || eventName === 'keydown' || eventName === 'keyup') {\n        console.log('keypress');\n        this._keyInput.addEventListener(eventName, callback, false);\n      } else {\n        var callbacks = this.listenerMap[eventName];\n        if (typeof callbacks === 'undefined') {\n          callbacks = [];\n          this.listenerMap[eventName] = callbacks;\n        }\n        if (callback === 'center') {\n          var cb = utils.bind(this._mouseHandler, this._mouseHandler._centerOnClicked);\n          callbacks.push(cb);\n        } else {\n          callbacks.push(callback);\n        }\n        if (this._initialized && eventName === 'viewerReady') {\n          callback(this, null);\n        }\n      }\n    },\n    _dispatchEvent: function (event, newEventName, arg) {\n      var callbacks = this.listenerMap[newEventName];\n      if (callbacks) {\n        callbacks.forEach(function (callback) {\n          callback(arg, event);\n        });\n      }\n    },\n    RENDER_MODES: [\n      'sline',\n      'lines',\n      'trace',\n      'lineTrace',\n      'cartoon',\n      'tube',\n      'spheres',\n      'ballsAndSticks',\n      'points'\n    ],\n    renderAs: function (name, structure, mode, opts) {\n      var found = false;\n      for (var i = 0; i < this.RENDER_MODES.length; ++i) {\n        if (this.RENDER_MODES[i] === mode) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        console.error('render mode', mode, 'not supported');\n        return;\n      }\n      return this[mode](name, structure, opts);\n    },\n    _handleStandardMolOptions: function (opts, structure) {\n      opts = this._handleStandardOptions(opts);\n      opts.showRelated = opts.showRelated || 'asym';\n      if (opts.showRelated && opts.showRelated !== 'asym') {\n        if (structure.assembly(opts.showRelated) === null) {\n          console.error('no assembly with name', opts.showRelated, '. Falling back to asymmetric unit');\n          opts.showRelated = 'asym';\n        }\n      }\n      return opts;\n    },\n    _handleStandardOptions: function (opts) {\n      opts = utils.copy(opts);\n      opts.float32Allocator = this._float32Allocator;\n      opts.uint16Allocator = this._uint16Allocator;\n      opts.idPool = this._objectIdManager;\n      return opts;\n    },\n    lineTrace: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.uniform([\n        1,\n        0,\n        1\n      ]);\n      options.lineWidth = options.lineWidth || 4;\n      var obj = render.lineTrace(structure, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    spheres: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.byElement();\n      options.sphereDetail = this.options('sphereDetail');\n      options.radiusMultiplier = options.radiusMultiplier || 1;\n      var obj = render.spheres(structure, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    sline: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.uniform([\n        1,\n        0,\n        1\n      ]);\n      options.splineDetail = options.splineDetail || this.options('splineDetail');\n      options.strength = options.strength || 1;\n      options.lineWidth = options.lineWidth || 4;\n      var obj = render.sline(structure, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    cartoon: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.bySS();\n      options.strength = options.strength || 1;\n      options.splineDetail = options.splineDetail || this.options('splineDetail');\n      options.arcDetail = options.arcDetail || this.options('arcDetail');\n      options.radius = options.radius || 0.3;\n      options.forceTube = options.forceTube || false;\n      var obj = render.cartoon(structure, this._canvas.gl(), options);\n      var added = this.add(name, obj);\n      return added;\n    },\n    surface: function (name, data, opts) {\n      var options = this._handleStandardOptions(opts);\n      var obj = render.surface(data, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    tube: function (name, structure, opts) {\n      opts = opts || {};\n      opts.forceTube = true;\n      return this.cartoon(name, structure, opts);\n    },\n    ballsAndSticks: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.byElement();\n      options.radius = options.radius || 0.3;\n      options.arcDetail = (options.arcDetail || this.options('arcDetail')) * 2;\n      options.sphereDetail = options.sphereDetail || this.options('sphereDetail');\n      var obj = render.ballsAndSticks(structure, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    lines: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.byElement();\n      options.lineWidth = options.lineWidth || 4;\n      var obj = render.lines(structure, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    points: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.byElement();\n      options.pointSize = options.pointSize || 1;\n      var obj = render.points(structure, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    trace: function (name, structure, opts) {\n      var options = this._handleStandardMolOptions(opts, structure);\n      options.color = options.color || color.uniform([\n        1,\n        0,\n        0\n      ]);\n      options.radius = options.radius || 0.3;\n      options.arcDetail = (options.arcDetail || this.options('arcDetail')) * 2;\n      options.sphereDetail = options.sphereDetail || this.options('sphereDetail');\n      var obj = render.trace(structure, this._canvas.gl(), options);\n      return this.add(name, obj);\n    },\n    _updateProjectionIntervals: function (axes, intervals, structure) {\n      structure.eachAtom(function (atom) {\n        var pos = atom.pos();\n        for (var i = 0; i < 3; ++i) {\n          intervals[i].update(vec3.dot(pos, axes[i]));\n        }\n      });\n      for (var i = 0; i < 3; ++i) {\n        intervals[i].extend(1.5);\n      }\n    },\n    fitTo: function (what) {\n      var axes = this._cam.mainAxes();\n      var intervals = [\n        new utils.Range(),\n        new utils.Range(),\n        new utils.Range()\n      ];\n      if (what instanceof SceneNode) {\n        what.updateProjectionIntervals(axes[0], axes[1], axes[2], intervals[0], intervals[1], intervals[2]);\n      } else if (what.eachAtom !== undefined) {\n        this._updateProjectionIntervals(axes, intervals, what);\n      } else if (what.length !== undefined) {\n        for (var i = 0; i < what.length; ++i) {\n          this._updateProjectionIntervals(axes, intervals, what[i]);\n        }\n      }\n      this._fitToIntervals(axes, intervals);\n    },\n    _fitToIntervals: function (axes, intervals) {\n      if (intervals[0].empty() || intervals[1].empty() || intervals[2].empty()) {\n        console.error('could not determine interval. No objects shown?');\n        return;\n      }\n      var cx = intervals[0].center();\n      var cy = intervals[1].center();\n      var cz = intervals[2].center();\n      var center = [\n        cx * axes[0][0] + cy * axes[1][0] + cz * axes[2][0],\n        cx * axes[0][1] + cy * axes[1][1] + cz * axes[2][1],\n        cx * axes[0][2] + cy * axes[1][2] + cz * axes[2][2]\n      ];\n      var fovY = this._cam.fieldOfViewY();\n      var aspect = this._cam.aspectRatio();\n      var inPlaneX = intervals[0].length() / aspect;\n      var inPlaneY = intervals[1].length();\n      var inPlane = Math.max(inPlaneX, inPlaneY) * 0.5;\n      var distanceToFront = inPlane / Math.tan(0.5 * fovY);\n      var newZoom = distanceToFront + 0.5 * intervals[2].length();\n      var grace = 0.5;\n      var near = Math.max(distanceToFront - grace, 0.1);\n      var far = 2 * grace + distanceToFront + intervals[2].length();\n      this._cam.setNearFar(near, far);\n      this.setCamera(this._cam.rotation(), center, newZoom, this._options.animateTime);\n      this.requestRedraw();\n    },\n    autoZoom: function () {\n      var axes = this._cam.mainAxes();\n      var intervals = [\n        new utils.Range(),\n        new utils.Range(),\n        new utils.Range()\n      ];\n      this.forEach(function (obj) {\n        if (!obj.visible()) {\n          return;\n        }\n        obj.updateProjectionIntervals(axes[0], axes[1], axes[2], intervals[0], intervals[1], intervals[2]);\n      });\n      this._fitToIntervals(axes, intervals);\n    },\n    slabInterval: function () {\n    },\n    autoSlab: function () {\n      var slab = this._options._slabMode.update(this._objects, this._cam);\n      if (slab !== null) {\n        this._cam.setNearFar(slab.near, slab.far);\n      }\n      this.requestRedraw();\n    },\n    rockAndRoll: function (enable) {\n      if (enable === undefined) {\n        return this._rockAndRoll !== null;\n      }\n      if (!!enable) {\n        if (this._rockAndRoll === null) {\n          this._rockAndRoll = anim.rockAndRoll();\n          this._animControl.add(this._rockAndRoll);\n          this.requestRedraw();\n        }\n        return true;\n      }\n      this._animControl.remove(this._rockAndRoll);\n      this._rockAndRoll = null;\n      this.requestRedraw();\n      return false;\n    },\n    spin: function (speed, axis) {\n      if (speed === undefined) {\n        return this._spin !== null;\n      }\n      if (speed === false) {\n        this._animControl.remove(this._spin);\n        this._spin = null;\n        this.requestRedraw();\n        return false;\n      }\n      if (speed === true) {\n        speed = Math.PI / 8;\n      }\n      axis = axis || [\n        0,\n        1,\n        0\n      ];\n      if (this._spin === null) {\n        this._spin = anim.spin(axis, speed);\n        this._animControl.add(this._spin);\n      } else {\n        this._spin.setSpeed(speed);\n        this._spin.setAxis(axis);\n      }\n      this.requestRedraw();\n      return true;\n    },\n    slabMode: function (mode, options) {\n      options = options || {};\n      var strategy = slabModeToStrategy(mode, options);\n      var slab = strategy.update(this._objects, this._cam);\n      if (slab !== null) {\n        this._cam.setNearFar(slab.near, slab.far);\n      }\n      this._options.slabMode = strategy;\n      this.requestRedraw();\n    },\n    label: function (name, text, pos, options) {\n      var label = new TextLabel(this._canvas.gl(), this._textureCanvas, this._2dcontext, pos, text, options);\n      this.add(name, label);\n      return label;\n    },\n    customMesh: function (name, opts) {\n      var options = this._handleStandardOptions(opts);\n      var mesh = new CustomMesh(name, this._canvas.gl(), options.float32Allocator, options.uint16Allocator, options.idPool);\n      this.add(name, mesh);\n      return mesh;\n    },\n    _drawPickingScene: function () {\n      var gl = this._canvas.gl();\n      gl.clearColor(0, 0, 0, 0);\n      gl.disable(gl.BLEND);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n      gl.clearColor(this._options.background[0], this._options.background[1], this._options.background[2], 1);\n      gl.cullFace(gl.FRONT);\n      gl.enable(gl.CULL_FACE);\n      this._drawWithPass('select');\n    },\n    pick: function () {\n      return function (pos) {\n        this._pickBuffer.bind();\n        this._drawPickingScene();\n        var pixels = new Uint8Array(4);\n        var gl = this._canvas.gl();\n        gl.readPixels(pos.x, this._options.height - pos.y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n        this._pickBuffer.release();\n        if (pixels.data) {\n          pixels = pixels.data;\n        }\n        var objId = pixels[0] | pixels[1] << 8 | pixels[2] << 16;\n        var symIndex = pixels[3];\n        var picked = this._objectIdManager.objectForId(objId);\n        if (picked === undefined) {\n          return null;\n        }\n        var transformedPos = vec3.create();\n        var target = null;\n        var transform = null;\n        if (symIndex !== 255) {\n          target = picked.atom;\n          transform = picked.geom.symWithIndex(symIndex);\n          vec3.transformMat4(transformedPos, picked.atom.pos(), transform);\n        } else {\n          if (picked.atom !== undefined) {\n            target = picked.atom;\n            transformedPos = picked.atom.pos();\n          } else {\n            target = picked.userData;\n            transformedPos = picked.center;\n          }\n        }\n        return new PickedObject(target, picked.geom, symIndex < 255 ? symIndex : null, transformedPos, picked, transform);\n      };\n    }(),\n    add: function (name, obj) {\n      obj.name(name);\n      this._objects.push(obj);\n      this._objects.sort(function (lhs, rhs) {\n        return lhs.order() - rhs.order();\n      });\n      this.requestRedraw();\n      return obj;\n    },\n    _globToRegex: function (glob) {\n      var r = glob.replace('.', '\\\\.').replace('*', '.*');\n      return new RegExp('^' + r + '$');\n    },\n    forEach: function () {\n      var callback, pattern = '*';\n      if (arguments.length === 2) {\n        callback = arguments[1];\n        pattern = arguments[0];\n      } else {\n        callback = arguments[0];\n      }\n      var regex = this._globToRegex(pattern);\n      for (var i = 0; i < this._objects.length; ++i) {\n        var obj = this._objects[i];\n        if (regex.test(obj.name())) {\n          callback(obj, i);\n        }\n      }\n    },\n    get: function (name) {\n      for (var i = 0; i < this._objects.length; ++i) {\n        if (this._objects[i].name() === name) {\n          return this._objects[i];\n        }\n      }\n      console.error('could not find object with name', name);\n      return null;\n    },\n    hide: function (glob) {\n      this.forEach(glob, function (obj) {\n        obj.hide();\n      });\n    },\n    show: function (glob) {\n      this.forEach(glob, function (obj) {\n        obj.show();\n      });\n    },\n    rm: function (glob) {\n      var newObjects = [];\n      var regex = this._globToRegex(glob);\n      for (var i = 0; i < this._objects.length; ++i) {\n        var obj = this._objects[i];\n        if (!regex.test(obj.name())) {\n          newObjects.push(obj);\n        } else {\n          obj.destroy();\n        }\n      }\n      this._objects = newObjects;\n    },\n    all: function () {\n      return this._objects;\n    },\n    isWebGLSupported: function () {\n      return this._canvas.isWebGLSupported();\n    },\n    destroy: function () {\n      this.clear();\n      this._canvas.destroy();\n      this._canvas = null;\n    }\n  };\n  Viewer.prototype.on = Viewer.prototype.addListener;\n  return {\n    Viewer: function (elem, options) {\n      return new Viewer(elem, options);\n    },\n    isWebGLSupported: canvas.isWebGLSupported\n  };\n}(uniqueObjectIdPool, gfxCanvas, gfxFramebuffer, bufferAllocators, gfxCam, gfxShaders, touch, mouse, gfxRender, gfxLabel, gfxCustomMesh, gfxAnimation);\nmolSymmetry = function () {\n  \n  function SymGenerator(chains, matrices) {\n    this._chains = chains || [];\n    this._matrices = matrices || [];\n  }\n  SymGenerator.prototype = {\n    addChain: function (name) {\n      this._chains.push(name);\n    },\n    chains: function () {\n      return this._chains;\n    },\n    addMatrix: function (matrix) {\n      this._matrices.push(matrix);\n    },\n    matrices: function () {\n      return this._matrices;\n    },\n    matrix: function (index) {\n      return this._matrices[index];\n    }\n  };\n  function Assembly(name) {\n    this._name = name;\n    this._generators = [];\n  }\n  Assembly.prototype = {\n    name: function () {\n      return this._name;\n    },\n    generators: function () {\n      return this._generators;\n    },\n    generator: function (index) {\n      return this._generators[index];\n    },\n    addGenerator: function (gen) {\n      this._generators.push(gen);\n    }\n  };\n  return {\n    SymGenerator: SymGenerator,\n    Assembly: Assembly\n  };\n}();\nmolAtom = function () {\n  \n  var vec3 = glMatrix.vec3;\n  function AtomBase() {\n  }\n  AtomBase.prototype = {\n    bondCount: function () {\n      return this.bonds().length;\n    },\n    eachBond: function (callback) {\n      var bonds = this.bonds();\n      for (var i = 0, e = bonds.length; i < e; ++i) {\n        callback(bonds[i]);\n      }\n    },\n    isConnectedTo: function (otherAtom) {\n      if (otherAtom === null) {\n        return false;\n      }\n      var other = otherAtom.full();\n      var me = this.full();\n      var bonds = this.bonds();\n      for (var i = 0, e = bonds.length; i < e; ++i) {\n        var bond = bonds[i];\n        if (bond.atom_one() === me && bond.atom_two() === other || bond.atom_one() === other && bond.atom_two() === me) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n  function Atom(residue, name, pos, element, index, isHetatm, occupancy, tempFactor) {\n    AtomBase.call(this);\n    this._residue = residue;\n    this._bonds = [];\n    this._isHetatm = !!isHetatm;\n    this._name = name;\n    this._pos = pos;\n    this._index = index;\n    this._element = element;\n    this._occupancy = occupancy !== undefined ? occupancy : null;\n    this._tempFactor = tempFactor !== undefined ? tempFactor : null;\n  }\n  utils.derive(Atom, AtomBase, {\n    addBond: function (bond) {\n      this._bonds.push(bond);\n    },\n    name: function () {\n      return this._name;\n    },\n    bonds: function () {\n      return this._bonds;\n    },\n    residue: function () {\n      return this._residue;\n    },\n    structure: function () {\n      return this._residue.structure();\n    },\n    full: function () {\n      return this;\n    },\n    qualifiedName: function () {\n      return this.residue().qualifiedName() + '.' + this.name();\n    },\n    pos: function () {\n      return this._pos;\n    },\n    setPos: function (pos) {\n      vec3.copy(this._pos, pos);\n    },\n    element: function () {\n      return this._element;\n    },\n    index: function () {\n      return this._index;\n    },\n    prop: function (propName) {\n      return this[propName]();\n    },\n    occupancy: function () {\n      return this._occupancy;\n    },\n    tempFactor: function () {\n      return this._tempFactor;\n    },\n    isHetatm: function () {\n      return this._isHetatm;\n    }\n  });\n  function AtomView(resView, atom) {\n    AtomBase.call(this);\n    this._resView = resView;\n    this._atom = atom;\n    this._bonds = [];\n  }\n  utils.derive(AtomView, AtomBase, {\n    full: function () {\n      return this._atom;\n    },\n    name: function () {\n      return this._atom.name();\n    },\n    pos: function () {\n      return this._atom.pos();\n    },\n    element: function () {\n      return this._atom.element();\n    },\n    residue: function () {\n      return this._resView;\n    },\n    bonds: function () {\n      return this._atom.bonds();\n    },\n    index: function () {\n      return this._atom.index();\n    },\n    occupancy: function () {\n      return this._atom.occupancy();\n    },\n    tempFactor: function () {\n      return this._atom.tempFactor();\n    },\n    qualifiedName: function () {\n      return this._atom.qualifiedName();\n    },\n    isHetatm: function () {\n      return this._atom.isHetatm();\n    }\n  });\n  return {\n    Atom: Atom,\n    AtomView: AtomView\n  };\n}();\nmolResidue = function (atom) {\n  \n  var vec3 = glMatrix.vec3;\n  var Atom = atom.Atom;\n  var AtomView = atom.AtomView;\n  function ResidueBase() {\n  }\n  ResidueBase.prototype = {\n    prop: function (propName) {\n      return this[propName]();\n    },\n    isWater: function () {\n      return this.name() === 'HOH' || this.name() === 'DOD';\n    },\n    eachAtom: function (callback, index) {\n      index |= 0;\n      for (var i = 0; i < this._atoms.length; i += 1) {\n        if (callback(this._atoms[i], index) === false) {\n          return false;\n        }\n        index += 1;\n      }\n      return index;\n    },\n    qualifiedName: function () {\n      var name = this.chain().name() + '.' + this.name() + this.num();\n      if (this.insCode() === '\\0') {\n        return name;\n      }\n      return name + this.insCode();\n    },\n    atom: function (index_or_name) {\n      if (typeof index_or_name === 'string') {\n        for (var i = 0; i < this._atoms.length; ++i) {\n          if (this._atoms[i].name() === index_or_name) {\n            return this._atoms[i];\n          }\n        }\n        return null;\n      }\n      if (index_or_name >= this._atoms.length && index_or_name < 0) {\n        return null;\n      }\n      return this._atoms[index_or_name];\n    },\n    centralAtom: function () {\n      if (this.isAminoacid()) {\n        return this.atom('CA');\n      }\n      if (this.isNucleotide()) {\n        return this.atom('C3\\'');\n      }\n      return null;\n    },\n    center: function () {\n      var count = 0;\n      var c = vec3.create();\n      this.eachAtom(function (atom) {\n        vec3.add(c, c, atom.pos());\n        count += 1;\n      });\n      if (count > 0) {\n        vec3.scale(c, c, 1 / count);\n      }\n      return c;\n    },\n    isAminoacid: function () {\n      return this._isAminoacid;\n    },\n    isNucleotide: function () {\n      return this._isNucleotide;\n    }\n  };\n  function Residue(chain, name, num, insCode) {\n    ResidueBase.call(this);\n    this._name = name;\n    this._num = num;\n    this._insCode = insCode;\n    this._atoms = [];\n    this._ss = 'C';\n    this._chain = chain;\n    this._isAminoacid = false;\n    this._isNucleotide = false;\n    this._index = chain.residues().length;\n  }\n  utils.derive(Residue, ResidueBase, {\n    _deduceType: function () {\n      this._isNucleotide = this.atom('P') !== null && this.atom('C3\\'') !== null;\n      this._isAminoacid = this.atom('N') !== null && this.atom('CA') !== null && this.atom('C') !== null && this.atom('O') !== null;\n    },\n    name: function () {\n      return this._name;\n    },\n    insCode: function () {\n      return this._insCode;\n    },\n    num: function () {\n      return this._num;\n    },\n    full: function () {\n      return this;\n    },\n    addAtom: function (name, pos, element, isHetatm, occupancy, tempFactor) {\n      var atom = new Atom(this, name, pos, element, this.structure().nextAtomIndex(), isHetatm, occupancy, tempFactor);\n      this._atoms.push(atom);\n      return atom;\n    },\n    ss: function () {\n      return this._ss;\n    },\n    setSS: function (ss) {\n      this._ss = ss;\n    },\n    index: function () {\n      return this._index;\n    },\n    atoms: function () {\n      return this._atoms;\n    },\n    chain: function () {\n      return this._chain;\n    },\n    structure: function () {\n      return this._chain.structure();\n    }\n  });\n  function ResidueView(chainView, residue) {\n    ResidueBase.call(this);\n    this._chainView = chainView;\n    this._atoms = [];\n    this._residue = residue;\n  }\n  utils.derive(ResidueView, ResidueBase, {\n    addAtom: function (atom, checkDuplicates) {\n      if (checkDuplicates) {\n        for (var i = 0; i < this._atoms.length; ++i) {\n          var ai = this._atoms[i];\n          if (ai.index() === atom.index()) {\n            return ai;\n          }\n        }\n      }\n      var atomView = new AtomView(this, atom.full());\n      this._atoms.push(atomView);\n      return atomView;\n    },\n    removeAtom: function (atom) {\n      var lengthBefore = this._atoms.length;\n      this._atoms = this._atoms.filter(function (a) {\n        return a.index() !== atom.index();\n      });\n      return lengthBefore !== this._atoms.length;\n    },\n    full: function () {\n      return this._residue;\n    },\n    num: function () {\n      return this._residue.num();\n    },\n    insCode: function () {\n      return this._residue.insCode();\n    },\n    ss: function () {\n      return this._residue.ss();\n    },\n    index: function () {\n      return this._residue.index();\n    },\n    chain: function () {\n      return this._chainView;\n    },\n    name: function () {\n      return this._residue.name();\n    },\n    atoms: function () {\n      return this._atoms;\n    },\n    qualifiedName: function () {\n      return this._residue.qualifiedName();\n    },\n    containsResidue: function (residue) {\n      return this._residue.full() === residue.full();\n    },\n    isAminoacid: function () {\n      return this._residue.isAminoacid();\n    },\n    isNucleotide: function () {\n      return this._residue.isNucleotide();\n    },\n    isWater: function () {\n      return this._residue.isWater();\n    }\n  });\n  return {\n    ResidueView: ResidueView,\n    Residue: Residue\n  };\n}(molAtom);\nmolTrace = function () {\n  \n  var vec3 = glMatrix.vec3;\n  function BackboneTrace() {\n    this._trace = [];\n  }\n  BackboneTrace.prototype = {\n    push: function (residue) {\n      this._trace.push(residue);\n    },\n    length: function () {\n      return this._trace.length;\n    },\n    residueAt: function (index) {\n      return this._trace[index];\n    },\n    posAt: function (out, index) {\n      vec3.copy(out, this._trace[index].centralAtom().pos());\n      return out;\n    },\n    normalAt: function (out, index) {\n      var residue = this._trace[index];\n      if (residue.isAminoacid()) {\n        vec3.sub(out, residue.atom('O').pos(), residue.atom('C').pos());\n      }\n      vec3.normalize(out, out);\n      return out;\n    },\n    centralAtomAt: function (index) {\n      return this._trace[index].centralAtom();\n    },\n    tangentAt: function () {\n      var posBefore = vec3.create();\n      var posAfter = vec3.create();\n      return function (out, index) {\n        if (index > 0) {\n          this.posAt(posBefore, index - 1);\n        } else {\n          this.posAt(posBefore, index);\n        }\n        if (index < this._trace.length - 1) {\n          this.posAt(posAfter, index + 1);\n        } else {\n          this.posAt(posAfter, index);\n        }\n        vec3.sub(out, posAfter, posBefore);\n      };\n    }(),\n    fullTraceIndex: function (index) {\n      return index;\n    },\n    subsets: function (residues) {\n      var fullTraceIdx = 0, listIdx = 0;\n      var subsets = [];\n      while (listIdx < residues.length && fullTraceIdx < this._trace.length) {\n        var residueIndex = residues[listIdx].full().index();\n        while (this._trace.length > fullTraceIdx && this._trace[fullTraceIdx].index() < residueIndex) {\n          ++fullTraceIdx;\n        }\n        if (fullTraceIdx >= this._trace.length) {\n          break;\n        }\n        var traceIndex = this._trace[fullTraceIdx].index();\n        while (residues.length > listIdx && residues[listIdx].full().index() < traceIndex) {\n          ++listIdx;\n        }\n        if (listIdx >= residues.length) {\n          break;\n        }\n        var fullTraceBegin = fullTraceIdx;\n        while (residues.length > listIdx && this._trace.length > fullTraceIdx && residues[listIdx].full().index() === this._trace[fullTraceIdx].index()) {\n          ++listIdx;\n          ++fullTraceIdx;\n        }\n        var fullTraceEnd = fullTraceIdx;\n        subsets.push(new TraceSubset(this, fullTraceBegin, fullTraceEnd));\n      }\n      return subsets;\n    }\n  };\n  BackboneTrace.prototype.smoothPosAt = BackboneTrace.prototype.posAt;\n  BackboneTrace.prototype.smoothNormalAt = BackboneTrace.prototype.normalAt;\n  function TraceSubset(fullTrace, fullTraceBegin, fullTraceEnd) {\n    this._fullTrace = fullTrace;\n    this._fullTraceBegin = fullTraceBegin;\n    this._fullTraceEnd = fullTraceEnd;\n    this._isNTerminal = this._fullTraceBegin === 0;\n    this._isCTerminal = this._fullTrace.length() === this._fullTraceEnd;\n    var length = this._fullTraceEnd - this._fullTraceBegin;\n    if (!this._isCTerminal) {\n      ++length;\n    }\n    if (!this._isNTerminal) {\n      ++length;\n      this._fullTraceBegin -= 1;\n    }\n    this._length = length;\n  }\n  TraceSubset.prototype = {\n    length: function () {\n      return this._length;\n    },\n    residueAt: function (index) {\n      return this._fullTrace.residueAt(this._fullTraceBegin + index);\n    },\n    _interpolate: function () {\n      var tangentOne = vec3.create();\n      var tangentTwo = vec3.create();\n      return function (out, indexOne, indexTwo, strength) {\n        this.tangentAt(tangentOne, indexOne);\n        this.tangentAt(tangentTwo, indexTwo);\n        vec3.scale(tangentOne, tangentOne, strength);\n        vec3.scale(tangentTwo, tangentTwo, strength);\n        geom.cubicHermiteInterpolate(out, this.centralAtomAt(indexOne).pos(), tangentOne, this.centralAtomAt(indexTwo).pos(), tangentTwo, 0.5, 0);\n        return out;\n      };\n    }(),\n    smoothPosAt: function () {\n      return function (out, index, strength) {\n        if (index === 0 && !this._isNTerminal) {\n          return this._interpolate(out, index, index + 1, strength);\n        }\n        if (index === this._length - 1 && !this._isCTerminal) {\n          return this._interpolate(out, index - 1, index, strength);\n        }\n        var atom = this.centralAtomAt(index);\n        vec3.copy(out, atom.pos());\n        return out;\n      };\n    }(),\n    smoothNormalAt: function () {\n      return function (out, index) {\n        this._fullTrace.normalAt(out, index + this._fullTraceBegin);\n        return out;\n      };\n    }(),\n    posAt: function (out, index) {\n      var atom = this.centralAtomAt(index);\n      var atom2 = null;\n      vec3.copy(out, atom.pos());\n      if (index === 0 && !this._isNTerminal) {\n        atom2 = this.centralAtomAt(index + 1);\n        vec3.add(out, out, atom2.pos());\n        vec3.scale(out, out, 0.5);\n      }\n      if (index === this._length - 1 && !this._isCTerminal) {\n        atom2 = this.centralAtomAt(index - 1);\n        vec3.add(out, out, atom2.pos());\n        vec3.scale(out, out, 0.5);\n      }\n      return out;\n    },\n    centralAtomAt: function (index) {\n      return this.residueAt(index).centralAtom();\n    },\n    fullTraceIndex: function (index) {\n      return this._fullTraceBegin + index;\n    },\n    tangentAt: function (out, index) {\n      return this._fullTrace.tangentAt(out, index + this._fullTraceBegin);\n    }\n  };\n  return {\n    TraceSubset: TraceSubset,\n    BackboneTrace: BackboneTrace\n  };\n}();\nmolChain = function (residue, trace) {\n  \n  var vec3 = glMatrix.vec3;\n  var Residue = residue.Residue;\n  var ResidueView = residue.ResidueView;\n  function rnumInsCodeHash(num, insCode) {\n    return num << 8 | insCode.charCodeAt(0);\n  }\n  function rnumComp(lhs, rhs) {\n    return lhs.num() < rhs.num();\n  }\n  function numify(val) {\n    return {\n      num: function () {\n        return val;\n      }\n    };\n  }\n  function ChainBase() {\n  }\n  ChainBase.prototype = {\n    eachAtom: function (callback, index) {\n      index |= 0;\n      for (var i = 0; i < this._residues.length; i += 1) {\n        index = this._residues[i].eachAtom(callback, index);\n        if (index === false) {\n          return false;\n        }\n      }\n      return index;\n    },\n    atomCount: function () {\n      var count = 0;\n      var residues = this.residues();\n      for (var ri = 0; ri < residues.length; ++ri) {\n        count += residues[ri].atoms().length;\n      }\n      return count;\n    },\n    eachResidue: function (callback) {\n      for (var i = 0; i < this._residues.length; i += 1) {\n        if (callback(this._residues[i]) === false) {\n          return false;\n        }\n      }\n    },\n    residues: function () {\n      return this._residues;\n    },\n    structure: function () {\n      return this._structure;\n    },\n    asView: function () {\n      var view = this.structure().createEmptyView();\n      view.addChain(this, true);\n      return view;\n    },\n    residueByRnum: function (rnum) {\n      var residues = this.residues();\n      if (this._rnumsOrdered) {\n        var index = utils.binarySearch(residues, numify(rnum), rnumComp);\n        if (index === -1) {\n          return null;\n        }\n        return residues[index];\n      } else {\n        for (var i = 0; i < residues.length; ++i) {\n          if (residues[i].num() === rnum) {\n            return residues[i];\n          }\n        }\n        return null;\n      }\n    },\n    residuesInRnumRange: function (start, end) {\n      var matching = [];\n      var i, e;\n      var residues = this.residues();\n      if (this._rnumsOrdered === true) {\n        var startIdx = utils.indexFirstLargerEqualThan(residues, numify(start), rnumComp);\n        if (startIdx === -1) {\n          return matching;\n        }\n        var endIdx = utils.indexLastSmallerEqualThan(residues, numify(end), rnumComp);\n        if (endIdx === -1) {\n          return matching;\n        }\n        for (i = startIdx; i <= endIdx; ++i) {\n          matching.push(this._residues[i]);\n        }\n      } else {\n        for (i = 0, e = residues.length; i !== e; ++i) {\n          var res = residues[i];\n          if (res.num() >= start && res.num() <= end) {\n            matching.push(res);\n          }\n        }\n      }\n      return matching;\n    },\n    prop: function (propName) {\n      return this[propName]();\n    }\n  };\n  function Chain(structure, name) {\n    ChainBase.call(this);\n    this._structure = structure;\n    this._name = name;\n    this._cachedTraces = [];\n    this._residues = [];\n    this._rnumsOrdered = true;\n  }\n  function shouldIntroduceTraceBreak(aaStretch, prevResidue, thisResidue) {\n    var prevAtom, thisAtom;\n    if (aaStretch) {\n      prevAtom = prevResidue.atom('C');\n      thisAtom = thisResidue.atom('N');\n    } else {\n      prevAtom = prevResidue.atom('O3\\'');\n      thisAtom = thisResidue.atom('P');\n    }\n    if (prevAtom.isConnectedTo(thisAtom)) {\n      return false;\n    }\n    var sqrDist = vec3.sqrDist(prevAtom.pos(), thisAtom.pos());\n    return Math.abs(sqrDist - 1.5 * 1.5) > 1;\n  }\n  function addNonEmptyTrace(traces, trace) {\n    if (trace.length() < 2) {\n      return;\n    }\n    traces.push(trace);\n  }\n  function checkRnumsOrdered(residues, orderedFlag, newResidue) {\n    if (residues.length === 0) {\n      return true;\n    }\n    if (!orderedFlag) {\n      return false;\n    }\n    var combinedRNum = rnumInsCodeHash(newResidue.num(), newResidue.insCode());\n    var last = residues[residues.length - 1];\n    var lastCombinedRNum = rnumInsCodeHash(last.num(), last.insCode());\n    return lastCombinedRNum < combinedRNum;\n  }\n  utils.derive(Chain, ChainBase, {\n    name: function () {\n      return this._name;\n    },\n    full: function () {\n      return this;\n    },\n    addResidue: function (name, num, insCode) {\n      insCode = insCode || '\\0';\n      var residue = new Residue(this, name, num, insCode);\n      this._rnumsOrdered = checkRnumsOrdered(this._residues, this._rnumsOrdered, residue);\n      this._residues.push(residue);\n      return residue;\n    },\n    assignSS: function (fromNumAndIns, toNumAndIns, ss) {\n      var from = rnumInsCodeHash(fromNumAndIns[0], fromNumAndIns[1]);\n      var to = rnumInsCodeHash(toNumAndIns[0], toNumAndIns[1]);\n      for (var i = 1; i < this._residues.length - 1; ++i) {\n        var res = this._residues[i];\n        var combined = rnumInsCodeHash(res.num(), res.insCode());\n        if (combined <= from || combined >= to) {\n          continue;\n        }\n        res.setSS(ss);\n      }\n    },\n    eachBackboneTrace: function (callback) {\n      this._cacheBackboneTraces();\n      for (var i = 0; i < this._cachedTraces.length; ++i) {\n        callback(this._cachedTraces[i]);\n      }\n    },\n    _cacheBackboneTraces: function () {\n      if (this._cachedTraces.length > 0) {\n        return;\n      }\n      var stretch = new trace.BackboneTrace();\n      var aaStretch = null;\n      for (var i = 0; i < this._residues.length; i += 1) {\n        var residue = this._residues[i];\n        var isAminoacid = residue.isAminoacid();\n        var isNucleotide = residue.isNucleotide();\n        if (aaStretch === true && !isAminoacid || aaStretch === false && !isNucleotide || aaStretch === null && !isNucleotide && !isAminoacid) {\n          addNonEmptyTrace(this._cachedTraces, stretch);\n          aaStretch = null;\n          stretch = new trace.BackboneTrace();\n          continue;\n        }\n        if (stretch.length() === 0) {\n          stretch.push(residue);\n          aaStretch = residue.isAminoacid();\n          continue;\n        }\n        var prevResidue = this._residues[i - 1];\n        if (shouldIntroduceTraceBreak(aaStretch, prevResidue, residue)) {\n          addNonEmptyTrace(this._cachedTraces, stretch);\n          stretch = new trace.BackboneTrace();\n        }\n        stretch.push(residue);\n      }\n      addNonEmptyTrace(this._cachedTraces, stretch);\n    },\n    backboneTraces: function () {\n      var traces = [];\n      this.eachBackboneTrace(function (trace) {\n        traces.push(trace);\n      });\n      return traces;\n    }\n  });\n  function ChainView(molView, chain) {\n    ChainBase.call(this);\n    this._chain = chain;\n    this._residues = [];\n    this._molView = molView;\n    this._residueMap = {};\n    this._rnumsOrdered = true;\n  }\n  utils.derive(ChainView, ChainBase, {\n    addResidue: function (residue, recurse) {\n      var resView = new ResidueView(this, residue.full());\n      this._rnumsOrdered = checkRnumsOrdered(this._residues, this._rnumsOrdered, residue);\n      this._residues.push(resView);\n      this._residueMap[residue.full().index()] = resView;\n      if (recurse) {\n        var atoms = residue.atoms();\n        for (var i = 0; i < atoms.length; ++i) {\n          resView.addAtom(atoms[i].full(), false);\n        }\n      }\n      return resView;\n    },\n    addAtom: function (atom) {\n      var resView = this._residueMap[atom.residue().full().index()];\n      if (resView === undefined) {\n        resView = this.addResidue(atom.residue());\n      }\n      return resView.addAtom(atom, true);\n    },\n    removeAtom: function (atom, removeEmptyResidues) {\n      var resView = this._residueMap[atom.residue().full().index()];\n      if (resView === undefined) {\n        return false;\n      }\n      var removed = resView.removeAtom(atom);\n      if (removed && resView.atoms().length === 0 && removeEmptyResidues) {\n        delete this._residueMap[atom.residue().full().index()];\n        this._residues = this._residues.filter(function (r) {\n          return r !== resView;\n        });\n      }\n      return removed;\n    },\n    containsResidue: function (residue) {\n      var resView = this._residueMap[residue.full().index()];\n      if (resView === undefined) {\n        return false;\n      }\n      return resView.full() === residue.full();\n    },\n    eachBackboneTrace: function (callback) {\n      var fullTraces = this._chain.backboneTraces();\n      for (var i = 0; i < fullTraces.length; ++i) {\n        var subsets = fullTraces[i].subsets(this._residues);\n        for (var j = 0; j < subsets.length; ++j) {\n          callback(subsets[j]);\n        }\n      }\n    },\n    backboneTraces: function () {\n      var traces = [];\n      this.eachBackboneTrace(function (trace) {\n        traces.push(trace);\n      });\n      return traces;\n    },\n    full: function () {\n      return this._chain;\n    },\n    name: function () {\n      return this._chain.name();\n    },\n    structure: function () {\n      return this._molView;\n    }\n  });\n  return {\n    Chain: Chain,\n    ChainView: ChainView\n  };\n}(molResidue, molTrace);\nmolBond = function () {\n  \n  var vec3 = glMatrix.vec3;\n  var Bond = function (atom_a, atom_b) {\n    var self = {\n      atom_one: atom_a,\n      atom_two: atom_b\n    };\n    return {\n      atom_one: function () {\n        return self.atom_one;\n      },\n      atom_two: function () {\n        return self.atom_two;\n      },\n      mid_point: function (out) {\n        if (!out) {\n          out = vec3.create();\n        }\n        vec3.add(out, self.atom_one.pos(), self.atom_two.pos());\n        vec3.scale(out, out, 0.5);\n        return out;\n      }\n    };\n  };\n  return { Bond: Bond };\n}();\nmolSelect = function () {\n  function fulfillsPredicates(obj, predicates) {\n    for (var i = 0; i < predicates.length; ++i) {\n      if (!predicates[i](obj)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function _atomPredicates(dict) {\n    var predicates = [];\n    if (dict.aname !== undefined) {\n      predicates.push(function (a) {\n        return a.name() === dict.aname;\n      });\n    }\n    if (dict.hetatm !== undefined) {\n      predicates.push(function (a) {\n        return a.isHetatm() === dict.hetatm;\n      });\n    }\n    if (dict.anames !== undefined) {\n      predicates.push(function (a) {\n        var n = a.name();\n        for (var k = 0; k < dict.anames.length; ++k) {\n          if (n === dict.anames[k]) {\n            return true;\n          }\n        }\n        return false;\n      });\n    }\n    return predicates;\n  }\n  function _residuePredicates(dict) {\n    var predicates = [];\n    if (dict.rname !== undefined) {\n      predicates.push(function (r) {\n        return r.name() === dict.rname;\n      });\n    }\n    if (dict.rnames !== undefined) {\n      predicates.push(function (r) {\n        var n = r.name();\n        for (var k = 0; k < dict.rnames.length; ++k) {\n          if (n === dict.rnames[k]) {\n            return true;\n          }\n        }\n        return false;\n      });\n    }\n    if (dict.rnums !== undefined) {\n      var num_set = {};\n      for (var i = 0; i < dict.rnums.length; ++i) {\n        num_set[dict.rnums[i]] = true;\n      }\n      predicates.push(function (r) {\n        var n = r.num();\n        return num_set[n] === true;\n      });\n    }\n    if (dict.rnum !== undefined) {\n      predicates.push(function (r) {\n        return r.num() === dict.rnum;\n      });\n    }\n    return predicates;\n  }\n  function _chainPredicates(dict) {\n    var predicates = [];\n    if (dict.cname !== undefined) {\n      dict.chain = dict.cname;\n    }\n    if (dict.cnames !== undefined) {\n      dict.chains = dict.cnames;\n    }\n    if (dict.chain !== undefined) {\n      predicates.push(function (c) {\n        return c.name() === dict.chain;\n      });\n    }\n    if (dict.chains !== undefined) {\n      predicates.push(function (c) {\n        var n = c.name();\n        for (var k = 0; k < dict.chains.length; ++k) {\n          if (n === dict.chains[k]) {\n            return true;\n          }\n        }\n        return false;\n      });\n    }\n    return predicates;\n  }\n  function _filterResidues(chain, dict) {\n    var residues = chain.residues();\n    if (dict.rnumRange) {\n      residues = chain.residuesInRnumRange(dict.rnumRange[0], dict.rnumRange[1]);\n    }\n    var selResidues = [], i, e;\n    if (dict.rindexRange !== undefined) {\n      for (i = dict.rindexRange[0], e = Math.min(residues.length - 1, dict.rindexRange[1]); i <= e; ++i) {\n        selResidues.push(residues[i]);\n      }\n      return selResidues;\n    }\n    if (dict.rindices) {\n      if (dict.rindices.length !== undefined) {\n        selResidues = [];\n        for (i = 0; i < dict.rindices.length; ++i) {\n          selResidues.push(residues[dict.rindices[i]]);\n        }\n        return selResidues;\n      }\n    }\n    return residues;\n  }\n  function dictSelect(structure, view, dict) {\n    var residuePredicates = _residuePredicates(dict);\n    var atomPredicates = _atomPredicates(dict);\n    var chainPredicates = _chainPredicates(dict);\n    if (dict.rindex) {\n      dict.rindices = [dict.rindex];\n    }\n    for (var ci = 0; ci < structure._chains.length; ++ci) {\n      var chain = structure._chains[ci];\n      if (!fulfillsPredicates(chain, chainPredicates)) {\n        continue;\n      }\n      var residues = _filterResidues(chain, dict);\n      var chainView = null;\n      for (var ri = 0; ri < residues.length; ++ri) {\n        if (!fulfillsPredicates(residues[ri], residuePredicates)) {\n          continue;\n        }\n        if (!chainView) {\n          chainView = view.addChain(chain, false);\n        }\n        var residueView = null;\n        var atoms = residues[ri].atoms();\n        for (var ai = 0; ai < atoms.length; ++ai) {\n          if (!fulfillsPredicates(atoms[ai], atomPredicates)) {\n            continue;\n          }\n          if (!residueView) {\n            residueView = chainView.addResidue(residues[ri], false);\n          }\n          residueView.addAtom(atoms[ai]);\n        }\n      }\n    }\n    return view;\n  }\n  return { dict: dictSelect };\n}();\nmolMol = mol = function (chain, bond, select) {\n  \n  var vec3 = glMatrix.vec3;\n  var Chain = chain.Chain;\n  var ChainView = chain.ChainView;\n  var Bond = bond.Bond;\n  var ELEMENT_COVALENT_RADII = {\n    H: 0.31,\n    HE: 0.28,\n    LI: 1.28,\n    BE: 0.96,\n    B: 0.84,\n    C: 0.76,\n    N: 0.71,\n    O: 0.66,\n    F: 0.57,\n    NE: 0.58,\n    NA: 1.66,\n    MG: 1.41,\n    AL: 1.21,\n    SI: 1.11,\n    P: 1.07,\n    S: 1.05,\n    CL: 1.02,\n    AR: 1.06,\n    K: 2.03,\n    CA: 1.76,\n    SC: 1.7,\n    TI: 1.6,\n    V: 1.53,\n    CR: 1.39,\n    MN: 1.39,\n    FE: 1.32,\n    CO: 1.26,\n    NI: 1.24,\n    CU: 1.32,\n    ZN: 1.22,\n    GA: 1.22,\n    GE: 1.2,\n    AS: 1.19,\n    SE: 1.2,\n    BR: 1.2,\n    KR: 1.16,\n    RB: 2.2,\n    SR: 1.95,\n    Y: 1.9,\n    ZR: 1.75,\n    NB: 1.64,\n    MO: 1.54,\n    TC: 1.47,\n    RU: 1.46,\n    RH: 1.42,\n    PD: 1.39,\n    AG: 1.45,\n    CD: 1.44,\n    IN: 1.42,\n    SN: 1.39,\n    SB: 1.39,\n    TE: 1.38,\n    I: 1.39,\n    XE: 1.4,\n    CS: 2.44,\n    BA: 2.15,\n    LA: 2.07,\n    CE: 2.04,\n    PR: 2.03,\n    ND: 2.01,\n    PM: 1.99,\n    SM: 1.98,\n    EU: 1.98,\n    GD: 1.96,\n    TB: 1.94,\n    DY: 1.92,\n    HO: 1.92,\n    ER: 1.89,\n    TM: 1.9,\n    YB: 1.87,\n    LU: 1.87,\n    HF: 1.75,\n    TA: 1.7,\n    W: 1.62,\n    RE: 1.51,\n    OS: 1.44,\n    IR: 1.41,\n    PT: 1.36,\n    AU: 1.36,\n    HG: 1.32,\n    TL: 1.45,\n    PB: 1.46,\n    BI: 1.48,\n    PO: 1.4,\n    AT: 1.5,\n    RN: 1.5,\n    FR: 2.6,\n    RA: 2.21,\n    AC: 2.15,\n    TH: 2.06,\n    PA: 2,\n    U: 1.96,\n    NP: 1.9,\n    PU: 1.87,\n    AM: 1.8,\n    CM: 1.69\n  };\n  function covalentRadius(ele) {\n    var r = ELEMENT_COVALENT_RADII[ele.toUpperCase()];\n    if (r !== undefined) {\n      return r;\n    }\n    return 1.5;\n  }\n  function connectPeptides(structure, left, right) {\n    var cAtom = left.atom('C');\n    var nAtom = right.atom('N');\n    if (cAtom && nAtom) {\n      var sqrDist = vec3.sqrDist(cAtom.pos(), nAtom.pos());\n      if (sqrDist < 1.6 * 1.6) {\n        structure.connect(nAtom, cAtom);\n      }\n    }\n  }\n  function connectNucleotides(structure, left, right) {\n    var o3Prime = left.atom('O3\\'');\n    var pAtom = right.atom('P');\n    if (o3Prime && pAtom) {\n      var sqrDist = vec3.sqrDist(o3Prime.pos(), pAtom.pos());\n      if (sqrDist < 1.7 * 1.7) {\n        structure.connect(o3Prime, pAtom);\n      }\n    }\n  }\n  function MolBase() {\n  }\n  MolBase.prototype = {\n    eachResidue: function (callback) {\n      for (var i = 0; i < this._chains.length; i += 1) {\n        if (this._chains[i].eachResidue(callback) === false) {\n          return false;\n        }\n      }\n    },\n    eachAtom: function (callback, index) {\n      index |= 0;\n      for (var i = 0; i < this._chains.length; i += 1) {\n        index = this._chains[i].eachAtom(callback, index);\n        if (index === false) {\n          return false;\n        }\n      }\n    },\n    residueCount: function () {\n      var chains = this.chains();\n      var count = 0;\n      for (var ci = 0; ci < chains.length; ++ci) {\n        count += chains[ci].residues().length;\n      }\n      return count;\n    },\n    eachChain: function (callback) {\n      var chains = this.chains();\n      for (var i = 0; i < chains.length; ++i) {\n        if (callback(chains[i]) === false) {\n          return;\n        }\n      }\n    },\n    atomCount: function () {\n      var chains = this.chains();\n      var count = 0;\n      for (var ci = 0; ci < chains.length; ++ci) {\n        count += chains[ci].atomCount();\n      }\n      return count;\n    },\n    atoms: function () {\n      var atoms = [];\n      this.eachAtom(function (atom) {\n        atoms.push(atom);\n      });\n      return atoms;\n    },\n    atom: function (name) {\n      var parts = name.split('.');\n      var chain = this.chain(parts[0]);\n      if (chain === null) {\n        return null;\n      }\n      var residue = chain.residueByRnum(parseInt(parts[1], 10));\n      if (residue === null) {\n        return null;\n      }\n      return residue.atom(parts[2]);\n    },\n    center: function () {\n      var sum = vec3.create();\n      var count = 0;\n      this.eachAtom(function (atom) {\n        vec3.add(sum, sum, atom.pos());\n        count += 1;\n      });\n      if (count) {\n        vec3.scale(sum, sum, 1 / count);\n      }\n      return sum;\n    },\n    boundingSphere: function () {\n      var center = this.center();\n      var radiusSquare = 0;\n      this.eachAtom(function (atom) {\n        radiusSquare = Math.max(radiusSquare, vec3.sqrDist(center, atom.pos()));\n      });\n      return new geom.Sphere(center, Math.sqrt(radiusSquare));\n    },\n    backboneTraces: function () {\n      var chains = this.chains();\n      var traces = [];\n      for (var i = 0; i < chains.length; ++i) {\n        Array.prototype.push.apply(traces, chains[i].backboneTraces());\n      }\n      return traces;\n    },\n    select: function (what) {\n      if (what === 'protein') {\n        return this.residueSelect(function (r) {\n          return r.isAminoacid();\n        });\n      }\n      if (what === 'water') {\n        return this.residueSelect(function (r) {\n          return r.isWater();\n        });\n      }\n      if (what === 'ligand') {\n        return this.residueSelect(function (r) {\n          return !r.isAminoacid() && !r.isWater();\n        });\n      }\n      return select.dict(this, new MolView(this), what || {});\n    },\n    residueSelect: function (predicate) {\n      console.time('Mol.residueSelect');\n      var view = new MolView(this.full());\n      for (var ci = 0; ci < this._chains.length; ++ci) {\n        var chain = this._chains[ci];\n        var chainView = null;\n        var residues = chain.residues();\n        for (var ri = 0; ri < residues.length; ++ri) {\n          if (predicate(residues[ri])) {\n            if (!chainView) {\n              chainView = view.addChain(chain, false);\n            }\n            chainView.addResidue(residues[ri], true);\n          }\n        }\n      }\n      console.timeEnd('Mol.residueSelect');\n      return view;\n    },\n    atomSelect: function (predicate) {\n      console.time('Mol.atomSelect');\n      var view = new MolView(this.full());\n      for (var ci = 0; ci < this._chains.length; ++ci) {\n        var chain = this._chains[ci];\n        var chainView = null;\n        var residues = chain.residues();\n        for (var ri = 0; ri < residues.length; ++ri) {\n          var residueView = null;\n          var residue = residues[ri];\n          var atoms = residue.atoms();\n          for (var ai = 0; ai < atoms.length; ++ai) {\n            if (!predicate(atoms[ai])) {\n              continue;\n            }\n            if (!chainView) {\n              chainView = view.addChain(chain, false);\n            }\n            if (!residueView) {\n              residueView = chainView.addResidue(residue, false);\n            }\n            residueView.addAtom(atoms[ai]);\n          }\n        }\n      }\n      console.timeEnd('Mol.atomSelect');\n      return view;\n    },\n    assembly: function (id) {\n      var assemblies = this.assemblies();\n      for (var i = 0; i < assemblies.length; ++i) {\n        if (assemblies[i].name() === id) {\n          return assemblies[i];\n        }\n      }\n      return null;\n    },\n    chainsByName: function (chainNames) {\n      var chainMap = {};\n      var chains = this.chains();\n      for (var i = 0; i < chains.length; ++i) {\n        chainMap[chains[i].name()] = chains[i];\n      }\n      var filteredChains = [];\n      for (var j = 0; j < chainNames.length; ++j) {\n        var filteredChain = chainMap[chainNames[j]];\n        if (filteredChain !== undefined) {\n          filteredChains.push(filteredChain);\n        }\n      }\n      return filteredChains;\n    },\n    selectWithin: function () {\n      var dist = vec3.create();\n      return function (mol, options) {\n        console.time('Mol.selectWithin');\n        options = options || {};\n        var radius = options.radius || 4;\n        var radiusSqr = radius * radius;\n        var matchResidues = !!options.matchResidues;\n        var targetAtoms = [];\n        mol.eachAtom(function (a) {\n          targetAtoms.push(a);\n        });\n        var view = new MolView(this.full());\n        var addedRes = null, addedChain = null;\n        var chains = this.chains();\n        var skipResidue = false;\n        for (var ci = 0; ci < chains.length; ++ci) {\n          var residues = chains[ci].residues();\n          addedChain = null;\n          for (var ri = 0; ri < residues.length; ++ri) {\n            addedRes = null;\n            skipResidue = false;\n            var atoms = residues[ri].atoms();\n            for (var ai = 0; ai < atoms.length; ++ai) {\n              if (skipResidue) {\n                break;\n              }\n              for (var wi = 0; wi < targetAtoms.length; ++wi) {\n                vec3.sub(dist, atoms[ai].pos(), targetAtoms[wi].pos());\n                if (vec3.sqrLen(dist) > radiusSqr) {\n                  continue;\n                }\n                if (!addedChain) {\n                  addedChain = view.addChain(chains[ci].full(), false);\n                }\n                if (!addedRes) {\n                  addedRes = addedChain.addResidue(residues[ri].full(), matchResidues);\n                }\n                if (matchResidues) {\n                  skipResidue = true;\n                  break;\n                }\n                addedRes.addAtom(atoms[ai].full());\n                break;\n              }\n            }\n          }\n        }\n        console.timeEnd('Mol.selectWithin');\n        return view;\n      };\n    }(),\n    createEmptyView: function () {\n      return new MolView(this.full());\n    }\n  };\n  function Mol() {\n    MolBase.call(this);\n    this._chains = [];\n    this._assemblies = [];\n    this._nextAtomIndex = 0;\n  }\n  utils.derive(Mol, MolBase, {\n    addAssembly: function (assembly) {\n      this._assemblies.push(assembly);\n    },\n    setAssemblies: function (assemblies) {\n      this._assemblies = assemblies;\n    },\n    assemblies: function () {\n      return this._assemblies;\n    },\n    chains: function () {\n      return this._chains;\n    },\n    full: function () {\n      return this;\n    },\n    containsResidue: function (residue) {\n      return residue.full().structure() === this;\n    },\n    chainByName: function (name) {\n      for (var i = 0; i < this._chains.length; ++i) {\n        if (this._chains[i].name() === name) {\n          return this._chains[i];\n        }\n      }\n      return null;\n    },\n    chain: function (name) {\n      return this.chainByName(name);\n    },\n    nextAtomIndex: function () {\n      var nextIndex = this._nextAtomIndex;\n      this._nextAtomIndex += 1;\n      return nextIndex;\n    },\n    addChain: function (name) {\n      var chain = new Chain(this, name);\n      this._chains.push(chain);\n      return chain;\n    },\n    connect: function (atom_a, atom_b) {\n      var bond = new Bond(atom_a, atom_b);\n      atom_a.addBond(bond);\n      atom_b.addBond(bond);\n      return bond;\n    },\n    deriveConnectivity: function () {\n      console.time('Mol.deriveConnectivity');\n      var thisStructure = this;\n      var prevResidue = null;\n      this.eachResidue(function (res) {\n        var sqrDist;\n        var atoms = res.atoms();\n        var numAtoms = atoms.length;\n        for (var i = 0; i < numAtoms; i += 1) {\n          var atomI = atoms[i];\n          var posI = atomI.pos();\n          var covalentI = covalentRadius(atomI.element());\n          for (var j = 0; j < i; j += 1) {\n            var atomJ = atoms[j];\n            var covalentJ = covalentRadius(atomJ.element());\n            sqrDist = vec3.sqrDist(posI, atomJ.pos());\n            var lower = covalentI + covalentJ - 0.3;\n            var upper = covalentI + covalentJ + 0.3;\n            if (sqrDist < upper * upper && sqrDist > lower * lower) {\n              thisStructure.connect(atomI, atomJ);\n            }\n          }\n        }\n        res._deduceType();\n        if (prevResidue !== null) {\n          if (res.isAminoacid() && prevResidue.isAminoacid()) {\n            connectPeptides(thisStructure, prevResidue, res);\n          }\n          if (res.isNucleotide() && prevResidue.isNucleotide()) {\n            connectNucleotides(thisStructure, prevResidue, res);\n          }\n        }\n        prevResidue = res;\n      });\n      console.timeEnd('Mol.deriveConnectivity');\n    }\n  });\n  function MolView(mol) {\n    MolBase.call(this);\n    this._mol = mol;\n    this._chains = [];\n  }\n  utils.derive(MolView, MolBase, {\n    full: function () {\n      return this._mol;\n    },\n    assemblies: function () {\n      return this._mol.assemblies();\n    },\n    addChain: function (chain, recurse) {\n      var chainView = new ChainView(this, chain.full());\n      this._chains.push(chainView);\n      if (recurse) {\n        var residues = chain.residues();\n        for (var i = 0; i < residues.length; ++i) {\n          chainView.addResidue(residues[i], true);\n        }\n      }\n      return chainView;\n    },\n    addAtom: function (atom) {\n      var chain = this.chain(atom.residue().chain().name());\n      if (chain === null) {\n        chain = this.addChain(atom.residue().chain());\n      }\n      return chain.addAtom(atom);\n    },\n    removeAtom: function (atom, removeEmptyResiduesAndChains) {\n      if (atom === null) {\n        return false;\n      }\n      var chain = this.chain(atom.residue().chain().name());\n      if (chain === null) {\n        return false;\n      }\n      var removed = chain.removeAtom(atom, removeEmptyResiduesAndChains);\n      if (removed && chain.residues().length === 0) {\n        this._chains = this._chains.filter(function (c) {\n          return c !== chain;\n        });\n      }\n      return removed;\n    },\n    containsResidue: function (residue) {\n      if (!residue) {\n        return false;\n      }\n      var chain = this.chain(residue.chain().name());\n      if (!chain) {\n        return false;\n      }\n      return chain.containsResidue(residue);\n    },\n    addResidues: function (residues, recurse) {\n      var that = this;\n      var chainsViews = {};\n      residues.forEach(function (residue) {\n        var chainName = residue.chain().name();\n        if (typeof chainsViews[chainName] === 'undefined') {\n          chainsViews[chainName] = that.addChain(residue.chain(), false);\n        }\n        chainsViews[chainName].addResidue(residue, recurse);\n      });\n      return chainsViews;\n    },\n    chains: function () {\n      return this._chains;\n    },\n    chain: function (name) {\n      for (var i = 0; i < this._chains.length; ++i) {\n        if (this._chains[i].name() === name) {\n          return this._chains[i];\n        }\n      }\n      return null;\n    }\n  });\n  return {\n    MolView: MolView,\n    Mol: Mol\n  };\n}(molChain, molBond, molSelect);\nsvd = function () {\n  function svd(A) {\n    var temp;\n    var prec = Math.pow(2, -52);\n    var tolerance = 1e-64 / prec;\n    var itmax = 50;\n    var c = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var u = A;\n    var m = u.length;\n    var n = u[0].length;\n    if (m < n)\n      throw 'Need more rows than columns';\n    var e = new Array(n);\n    var q = new Array(n);\n    for (i = 0; i < n; i++)\n      e[i] = q[i] = 0;\n    var v = [];\n    for (var i = 0; i < n; ++i) {\n      var xxx = [];\n      v.push([]);\n      for (var j = 0; j < n; ++j) {\n        xxx.push(0);\n      }\n      v.push(xxx);\n    }\n    function pythag(a, b) {\n      a = Math.abs(a);\n      b = Math.abs(b);\n      if (a > b)\n        return a * Math.sqrt(1 + b * b / a / a);\n      else if (b == 0)\n        return a;\n      return b * Math.sqrt(1 + a * a / b / b);\n    }\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var s = 0;\n    for (i = 0; i < n; i++) {\n      e[i] = g;\n      s = 0;\n      l = i + 1;\n      for (j = i; j < m; j++)\n        s += u[j][i] * u[j][i];\n      if (s <= tolerance)\n        g = 0;\n      else {\n        f = u[i][i];\n        g = Math.sqrt(s);\n        if (f >= 0)\n          g = -g;\n        h = f * g - s;\n        u[i][i] = f - g;\n        for (j = l; j < n; j++) {\n          s = 0;\n          for (k = i; k < m; k++)\n            s += u[k][i] * u[k][j];\n          f = s / h;\n          for (k = i; k < m; k++)\n            u[k][j] += f * u[k][i];\n        }\n      }\n      q[i] = g;\n      s = 0;\n      for (j = l; j < n; j++)\n        s = s + u[i][j] * u[i][j];\n      if (s <= tolerance)\n        g = 0;\n      else {\n        f = u[i][i + 1];\n        g = Math.sqrt(s);\n        if (f >= 0)\n          g = -g;\n        h = f * g - s;\n        u[i][i + 1] = f - g;\n        for (j = l; j < n; j++)\n          e[j] = u[i][j] / h;\n        for (j = l; j < m; j++) {\n          s = 0;\n          for (k = l; k < n; k++)\n            s += u[j][k] * u[i][k];\n          for (k = l; k < n; k++)\n            u[j][k] += s * e[k];\n        }\n      }\n      y = Math.abs(q[i]) + Math.abs(e[i]);\n      if (y > x)\n        x = y;\n    }\n    for (i = n - 1; i != -1; i += -1) {\n      if (g != 0) {\n        h = g * u[i][i + 1];\n        for (j = l; j < n; j++)\n          v[j][i] = u[i][j] / h;\n        for (j = l; j < n; j++) {\n          s = 0;\n          for (k = l; k < n; k++)\n            s += u[i][k] * v[k][j];\n          for (k = l; k < n; k++)\n            v[k][j] += s * v[k][i];\n        }\n      }\n      for (j = l; j < n; j++) {\n        v[i][j] = 0;\n        v[j][i] = 0;\n      }\n      v[i][i] = 1;\n      g = e[i];\n      l = i;\n    }\n    for (i = n - 1; i != -1; i += -1) {\n      l = i + 1;\n      g = q[i];\n      for (j = l; j < n; j++)\n        u[i][j] = 0;\n      if (g != 0) {\n        h = u[i][i] * g;\n        for (j = l; j < n; j++) {\n          s = 0;\n          for (k = l; k < m; k++)\n            s += u[k][i] * u[k][j];\n          f = s / h;\n          for (k = i; k < m; k++)\n            u[k][j] += f * u[k][i];\n        }\n        for (j = i; j < m; j++)\n          u[j][i] = u[j][i] / g;\n      } else\n        for (j = i; j < m; j++)\n          u[j][i] = 0;\n      u[i][i] += 1;\n    }\n    prec = prec * x;\n    for (k = n - 1; k != -1; k += -1) {\n      for (var iteration = 0; iteration < itmax; iteration++) {\n        var test_convergence = false;\n        for (l = k; l != -1; l += -1) {\n          if (Math.abs(e[l]) <= prec) {\n            test_convergence = true;\n            break;\n          }\n          if (Math.abs(q[l - 1]) <= prec)\n            break;\n        }\n        if (!test_convergence) {\n          c = 0;\n          s = 1;\n          var l1 = l - 1;\n          for (i = l; i < k + 1; i++) {\n            f = s * e[i];\n            e[i] = c * e[i];\n            if (Math.abs(f) <= prec)\n              break;\n            g = q[i];\n            h = pythag(f, g);\n            q[i] = h;\n            c = g / h;\n            s = -f / h;\n            for (j = 0; j < m; j++) {\n              y = u[j][l1];\n              z = u[j][i];\n              u[j][l1] = y * c + z * s;\n              u[j][i] = -y * s + z * c;\n            }\n          }\n        }\n        z = q[k];\n        if (l == k) {\n          if (z < 0) {\n            q[k] = -z;\n            for (j = 0; j < n; j++)\n              v[j][k] = -v[j][k];\n          }\n          break;\n        }\n        if (iteration >= itmax - 1)\n          throw 'Error: no convergence.';\n        x = q[l];\n        y = q[k - 1];\n        g = e[k - 1];\n        h = e[k];\n        f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2 * h * y);\n        g = pythag(f, 1);\n        if (f < 0)\n          f = ((x - z) * (x + z) + h * (y / (f - g) - h)) / x;\n        else\n          f = ((x - z) * (x + z) + h * (y / (f + g) - h)) / x;\n        c = 1;\n        s = 1;\n        for (i = l + 1; i < k + 1; i++) {\n          g = e[i];\n          y = q[i];\n          h = s * g;\n          g = c * g;\n          z = pythag(f, h);\n          e[i - 1] = z;\n          c = f / z;\n          s = h / z;\n          f = x * c + g * s;\n          g = -x * s + g * c;\n          h = y * s;\n          y = y * c;\n          for (j = 0; j < n; j++) {\n            x = v[j][i - 1];\n            z = v[j][i];\n            v[j][i - 1] = x * c + z * s;\n            v[j][i] = -x * s + z * c;\n          }\n          z = pythag(f, h);\n          q[i - 1] = z;\n          c = f / z;\n          s = h / z;\n          f = c * g + s * y;\n          x = -s * g + c * y;\n          for (j = 0; j < m; j++) {\n            y = u[j][i - 1];\n            z = u[j][i];\n            u[j][i - 1] = y * c + z * s;\n            u[j][i] = -y * s + z * c;\n          }\n        }\n        e[l] = 0;\n        e[k] = f;\n        q[k] = x;\n      }\n    }\n    for (i = 0; i < q.length; i++)\n      if (q[i] < prec)\n        q[i] = 0;\n    for (i = 0; i < n; i++) {\n      for (j = i - 1; j >= 0; j--) {\n        if (q[j] < q[i]) {\n          c = q[j];\n          q[j] = q[i];\n          q[i] = c;\n          for (k = 0; k < u.length; k++) {\n            temp = u[k][i];\n            u[k][i] = u[k][j];\n            u[k][j] = temp;\n          }\n          for (k = 0; k < v.length; k++) {\n            temp = v[k][i];\n            v[k][i] = v[k][j];\n            v[k][j] = temp;\n          }\n          i = j;\n        }\n      }\n    }\n    return {\n      U: u,\n      S: q,\n      V: v\n    };\n  }\n  return svd;\n}();\nmolSuperpose = function () {\n  \n  var vec3 = glMatrix.vec3;\n  var mat3 = glMatrix.mat3;\n  var quat = glMatrix.quat;\n  var calculateCenter = function (atoms, center) {\n    vec3.set(center, 0, 0, 0);\n    if (atoms.length === 0) {\n      return;\n    }\n    for (var i = 0; i < atoms.length; ++i) {\n      var atom = atoms[i];\n      vec3.add(center, center, atom.pos());\n    }\n    vec3.scale(center, center, 1 / atoms.length);\n  };\n  var calculateCov = function () {\n    var shiftedSubject = vec3.create();\n    var shiftedReference = vec3.create();\n    return function (subjectAtoms, referenceAtoms, subjectCenter, referenceCenter, covariance) {\n      covariance[0] = 0;\n      covariance[1] = 0;\n      covariance[2] = 0;\n      covariance[3] = 0;\n      covariance[4] = 0;\n      covariance[5] = 0;\n      covariance[6] = 0;\n      covariance[7] = 0;\n      covariance[8] = 0;\n      for (var i = 0; i < referenceAtoms.length; ++i) {\n        vec3.sub(shiftedSubject, subjectAtoms[i].pos(), subjectCenter);\n        vec3.sub(shiftedReference, referenceAtoms[i].pos(), referenceCenter);\n        var ss = shiftedSubject;\n        var sr = shiftedReference;\n        covariance[0] += ss[0] * sr[0];\n        covariance[1] += ss[0] * sr[1];\n        covariance[2] += ss[0] * sr[2];\n        covariance[3] += ss[1] * sr[0];\n        covariance[4] += ss[1] * sr[1];\n        covariance[5] += ss[1] * sr[2];\n        covariance[6] += ss[2] * sr[0];\n        covariance[7] += ss[2] * sr[1];\n        covariance[8] += ss[2] * sr[2];\n      }\n    };\n  }();\n  var superpose = function () {\n    var referenceCenter = vec3.create();\n    var subjectCenter = vec3.create();\n    var shiftedPos = vec3.create();\n    var rotation = mat3.create();\n    var cov = mat3.create();\n    var tmp = mat3.create();\n    var uMat = mat3.create();\n    var vMat = mat3.create();\n    return function (structure, reference) {\n      var subjectAtoms = structure.atoms();\n      var referenceAtoms = reference.atoms();\n      calculateCenter(referenceAtoms, referenceCenter);\n      calculateCenter(subjectAtoms, subjectCenter);\n      if (subjectAtoms.length !== referenceAtoms.length) {\n        console.error('atom counts do not match (' + subjectAtoms.length + 'in structure vs ' + referenceAtoms.length + ' in reference)');\n        return false;\n      }\n      if (subjectAtoms.length < 3) {\n        console.error('at least 3 atoms are required for superposition');\n        return false;\n      }\n      calculateCov(subjectAtoms, referenceAtoms, subjectCenter, referenceCenter, cov);\n      var input = [\n        [\n          cov[0],\n          cov[1],\n          cov[2]\n        ],\n        [\n          cov[3],\n          cov[4],\n          cov[5]\n        ],\n        [\n          cov[6],\n          cov[7],\n          cov[8]\n        ]\n      ];\n      var u = [\n        [],\n        [],\n        []\n      ];\n      var v = [\n        [],\n        [],\n        []\n      ];\n      var decomp = svd(input);\n      uMat[0] = decomp.U[0][0];\n      uMat[1] = decomp.U[0][1];\n      uMat[2] = decomp.U[0][2];\n      uMat[3] = decomp.U[1][0];\n      uMat[4] = decomp.U[1][1];\n      uMat[5] = decomp.U[1][2];\n      uMat[6] = decomp.U[2][0];\n      uMat[7] = decomp.U[2][1];\n      uMat[8] = decomp.U[2][2];\n      var detU = mat3.determinant(uMat);\n      vMat[0] = decomp.V[0][0];\n      vMat[1] = decomp.V[0][1];\n      vMat[2] = decomp.V[0][2];\n      vMat[3] = decomp.V[1][0];\n      vMat[4] = decomp.V[1][1];\n      vMat[5] = decomp.V[1][2];\n      vMat[6] = decomp.V[2][0];\n      vMat[7] = decomp.V[2][1];\n      vMat[8] = decomp.V[2][2];\n      var detV = mat3.determinant(vMat);\n      mat3.identity(tmp);\n      if (detU * detV < 0) {\n        console.log('determinants smaller than zero!');\n        tmp[8] = -1;\n        mat3.mul(uMat, uMat, tmp);\n      }\n      console.log(mat3.str(uMat));\n      mat3.mul(rotation, mat3.transpose(vMat, vMat), uMat);\n      var allAtoms = structure.full().atoms();\n      for (var i = 0; i < allAtoms.length; ++i) {\n        var atom = allAtoms[i];\n        vec3.sub(shiftedPos, atom.pos(), subjectCenter);\n        vec3.transformMat3(shiftedPos, shiftedPos, rotation);\n        vec3.add(shiftedPos, referenceCenter, shiftedPos);\n        atom.setPos(shiftedPos);\n      }\n      return true;\n    };\n  }();\n  function parseAtomNames(atoms) {\n    if (atoms === undefined || atoms === null || atoms === 'all') {\n      return null;\n    }\n    if (atoms === 'backbone') {\n      return {\n        'CA': true,\n        'C': true,\n        'O': true,\n        'N': true\n      };\n    }\n    if (atoms.substr !== undefined) {\n      var results = {};\n      var atomNames = atoms.split(',');\n      for (var i = 0; i < atomNames.length; ++i) {\n        results[atomNames[i].trim()] = true;\n      }\n      return results;\n    } else {\n      var results = {};\n      for (var i = 0; i < atoms.length; ++i) {\n        results[atoms[i]] = true;\n      }\n      return results;\n    }\n  }\n  function addAtomsPresentInBoth(inA, inB, outA, outB, atomSet) {\n    var atomsA = inA.atoms();\n    var atomsB = inB.atoms();\n    for (var i = 0; i < atomsA.length; ++i) {\n      var atomA = atomsA[i];\n      if (atomSet !== null && atomSet[atomA.name()] !== true) {\n        continue;\n      }\n      for (var j = 0; j < atomsB.length; ++j) {\n        var atomB = atomsB[j];\n        if (atomB.name() === atomA.name()) {\n          outA.push(atomA);\n          outB.push(atomB);\n          break;\n        }\n      }\n    }\n  }\n  function matchResidues(inA, inB, atoms, matchFn) {\n    var outA = inA.full().createEmptyView();\n    var outB = inB.full().createEmptyView();\n    var numChains = Math.min(inA.chains().length, inB.chains().length);\n    var atomSet = parseAtomNames(atoms);\n    for (var i = 0; i < numChains; ++i) {\n      var chainA = inA.chains()[i];\n      var chainB = inB.chains()[i];\n      var matchedResidues = matchFn(chainA, chainB);\n      var residuesA = matchedResidues[0];\n      var residuesB = matchedResidues[1];\n      if (residuesA.length !== residuesB.length) {\n        console.error('chains', chainA.name(), ' and', chainB.name(), ' do not contain the same number of residues.');\n        return null;\n      }\n      var outChainA = outA.addChain(chainA);\n      var outChainB = outB.addChain(chainB);\n      for (var j = 0; j < residuesA.length; ++j) {\n        var residueA = residuesA[j];\n        var residueB = residuesB[j];\n        var outAtomsA = [], outAtomsB = [];\n        addAtomsPresentInBoth(residueA, residueB, outAtomsA, outAtomsB, atomSet);\n        if (outAtomsA.length === 0) {\n          continue;\n        }\n        var outResidueA = outChainA.addResidue(residueA);\n        var outResidueB = outChainB.addResidue(residueB);\n        for (var k = 0; k < outAtomsA.length; ++k) {\n          outResidueA.addAtom(outAtomsA[k]);\n          outResidueB.addAtom(outAtomsB[k]);\n        }\n      }\n    }\n    return [\n      outA,\n      outB\n    ];\n  }\n  function matchResiduesByIndex(inA, inB, atoms) {\n    return matchResidues(inA, inB, atoms, function (chainA, chainB) {\n      return [\n        chainA.residues(),\n        chainB.residues()\n      ];\n    });\n  }\n  function matchResiduesByNum(inA, inB, atoms) {\n    return matchResidues(inA, inB, atoms, function (chainA, chainB) {\n      var outA = [], outB = [];\n      var inA = chainA.residues();\n      for (var i = 0; i < inA.length; ++i) {\n        var resB = chainB.residueByRnum(inA[i].num());\n        if (resB !== null) {\n          outA.push(inA[i]);\n          outB.push(resB);\n        }\n      }\n      return [\n        outA,\n        outB\n      ];\n    });\n  }\n  return {\n    superpose: superpose,\n    matchResiduesByNum: matchResiduesByNum,\n    matchResiduesByIndex: matchResiduesByIndex,\n    parseAtomNames: parseAtomNames,\n    addAtomsPresentInBoth: addAtomsPresentInBoth\n  };\n}();\nmolAll = mol = function (sp) {\n  \n  var vec3 = glMatrix.vec3;\n  var zhangSkolnickSS = function () {\n    var posOne = vec3.create();\n    var posTwo = vec3.create();\n    return function (trace, i, distances, delta) {\n      for (var j = Math.max(0, i - 2); j <= i; ++j) {\n        for (var k = 2; k < 5; ++k) {\n          if (j + k >= trace.length()) {\n            continue;\n          }\n          var d = vec3.dist(trace.posAt(posOne, j), trace.posAt(posTwo, j + k));\n          if (Math.abs(d - distances[k - 2]) > delta) {\n            return false;\n          }\n        }\n      }\n      return true;\n    };\n  }();\n  var isHelical = function (trace, i) {\n    var helixDistances = [\n      5.45,\n      5.18,\n      6.37\n    ];\n    var helixDelta = 2.1;\n    return zhangSkolnickSS(trace, i, helixDistances, helixDelta);\n  };\n  var isSheet = function (trace, i) {\n    var sheetDistances = [\n      6.1,\n      10.4,\n      13\n    ];\n    var sheetDelta = 1.42;\n    return zhangSkolnickSS(trace, i, sheetDistances, sheetDelta);\n  };\n  function traceAssignHelixSheet(trace) {\n    for (var i = 0; i < trace.length(); ++i) {\n      if (isHelical(trace, i)) {\n        trace.residueAt(i).setSS('H');\n        continue;\n      }\n      if (isSheet(trace, i)) {\n        trace.residueAt(i).setSS('E');\n        continue;\n      }\n      trace.residueAt(i).setSS('C');\n    }\n  }\n  function assignHelixSheet(structure) {\n    console.time('mol.assignHelixSheet');\n    var chains = structure.chains();\n    for (var ci = 0; ci < chains.length; ++ci) {\n      var chain = chains[ci];\n      chain.eachBackboneTrace(traceAssignHelixSheet);\n    }\n    console.timeEnd('mol.assignHelixSheet');\n  }\n  return {\n    Mol: mol.Mol,\n    MolView: mol.MolView,\n    assignHelixSheet: assignHelixSheet,\n    superpose: sp.superpose,\n    matchResiduesByIndex: sp.matchResiduesByIndex,\n    matchResiduesByNum: sp.matchResiduesByNum\n  };\n}(molSuperpose);\nio = function (symmetry) {\n  \n  var vec3 = glMatrix.vec3;\n  var mat4 = glMatrix.mat4;\n  function Remark350Reader() {\n    this._assemblies = {};\n    this._current = null;\n  }\n  Remark350Reader.prototype = {\n    assemblies: function () {\n      var assemblies = [];\n      for (var c in this._assemblies) {\n        if (this._assemblies.hasOwnProperty(c)) {\n          assemblies.push(this._assemblies[c]);\n        }\n      }\n      return assemblies;\n    },\n    assembly: function (id) {\n      return this._assemblies[id];\n    },\n    nextLine: function (line) {\n      line = line.substr(11);\n      if (line[0] === 'B' && line.substr(0, 12) === 'BIOMOLECULE:') {\n        var name = line.substr(13).trim();\n        this._currentAssembly = new symmetry.Assembly(name);\n        this._assemblies[name] = this._currentAssembly;\n        return;\n      }\n      if (line.substr(0, 30) === 'APPLY THE FOLLOWING TO CHAINS:' || line.substr(0, 30) === '                   AND CHAINS:') {\n        var chains = line.substr(30).split(',');\n        if (line[0] === 'A') {\n          this._currentSymGen = new symmetry.SymGenerator();\n          this._currentAssembly.addGenerator(this._currentSymGen);\n        }\n        this._currentMatrix = mat4.create();\n        for (var i = 0; i < chains.length; ++i) {\n          var trimmedChainName = chains[i].trim();\n          if (trimmedChainName.length) {\n            this._currentSymGen.addChain(trimmedChainName);\n          }\n        }\n        return;\n      }\n      if (line.substr(0, 7) === '  BIOMT') {\n        var col = parseInt(line[7], 10) - 1;\n        var offset = 0;\n        while (line[12 + offset] !== ' ') {\n          offset += 1;\n        }\n        var x = parseFloat(line.substr(13 + offset, 9));\n        var y = parseFloat(line.substr(23 + offset, 9));\n        var z = parseFloat(line.substr(33 + offset, 9));\n        var w = parseFloat(line.substr(43 + offset, 14));\n        this._currentMatrix[4 * 0 + col] = x;\n        this._currentMatrix[4 * 1 + col] = y;\n        this._currentMatrix[4 * 2 + col] = z;\n        this._currentMatrix[4 * 3 + col] = w;\n        if (col === 2) {\n          this._currentSymGen.addMatrix(this._currentMatrix);\n          this._currentMatrix = mat4.create();\n        }\n        return;\n      }\n    }\n  };\n  function guessAtomElementFromName(fourLetterName) {\n    if (fourLetterName[0] !== ' ') {\n      var trimmed = fourLetterName.trim();\n      if (trimmed.length === 4) {\n        var i = 0;\n        var charCode = trimmed.charCodeAt(i);\n        while (i < 4 && (charCode < 65 || charCode > 122 || charCode > 90 && charCode < 97)) {\n          ++i;\n          charCode = trimmed.charCodeAt(i);\n        }\n        return trimmed[i];\n      }\n      var firstCharCode = trimmed.charCodeAt(0);\n      if (firstCharCode >= 48 && firstCharCode <= 57) {\n        return trimmed[1];\n      }\n      return trimmed.substr(0, 2);\n    }\n    return fourLetterName[1];\n  }\n  function PDBReader(options) {\n    this._helices = [];\n    this._sheets = [];\n    this._conect = [];\n    this._serialToAtomMap = {};\n    this._structure = new mol.Mol();\n    this._remark350Reader = new Remark350Reader();\n    this._currChain = null;\n    this._currRes = null;\n    this._currAtom = null;\n    this._options = {};\n    this._options.conectRecords = !!options.conectRecords;\n  }\n  PDBReader.prototype = {\n    CONTINUE: 1,\n    MODEL_COMPLETE: 2,\n    FILE_END: 3,\n    ERROR: 4,\n    parseHelixRecord: function (line) {\n      var frstNum = parseInt(line.substr(21, 4), 10);\n      var frstInsCode = line[25] === ' ' ? '\\0' : line[25];\n      var lastNum = parseInt(line.substr(33, 4), 10);\n      var lastInsCode = line[37] === ' ' ? '\\0' : line[37];\n      var chainName = line[19];\n      this._helices.push({\n        first: [\n          frstNum,\n          frstInsCode\n        ],\n        last: [\n          lastNum,\n          lastInsCode\n        ],\n        chainName: chainName\n      });\n      return true;\n    },\n    parseSheetRecord: function (line) {\n      var frstNum = parseInt(line.substr(22, 4), 10);\n      var frstInsCode = line[26] === ' ' ? '\\0' : line[26];\n      var lastNum = parseInt(line.substr(33, 4), 10);\n      var lastInsCode = line[37] === ' ' ? '\\0' : line[37];\n      var chainName = line[21];\n      this._sheets.push({\n        first: [\n          frstNum,\n          frstInsCode\n        ],\n        last: [\n          lastNum,\n          lastInsCode\n        ],\n        chainName: chainName\n      });\n      return true;\n    },\n    parseAndAddAtom: function (line) {\n      var alt_loc = line[16];\n      if (alt_loc !== ' ' && alt_loc !== 'A') {\n        return true;\n      }\n      var isHetatm = line[0] === 'H';\n      var chainName = line[21];\n      var resName = line.substr(17, 3).trim();\n      var fullAtomName = line.substr(12, 4);\n      var atomName = fullAtomName.trim();\n      var rnumNum = parseInt(line.substr(22, 4), 10);\n      if (rnumNum !== rnumNum) {\n        rnumNum = 1;\n      }\n      var insCode = line[26] === ' ' ? '\\0' : line[26];\n      var updateResidue = false;\n      var updateChain = false;\n      if (!this._currChain || this._currChain.name() !== chainName) {\n        updateChain = true;\n        updateResidue = true;\n      }\n      if (!this._currRes || this._currRes.num() !== rnumNum || this._currRes.insCode() !== insCode) {\n        updateResidue = true;\n      }\n      if (updateChain) {\n        this._currChain = this._structure.chain(chainName) || this._structure.addChain(chainName);\n      }\n      if (updateResidue) {\n        this._currRes = this._currChain.addResidue(resName, rnumNum, insCode);\n      }\n      var pos = vec3.create();\n      for (var i = 0; i < 3; ++i) {\n        pos[i] = parseFloat(line.substr(30 + i * 8, 8));\n      }\n      var element = line.substr(76, 2).trim();\n      if (element === '') {\n        element = guessAtomElementFromName(fullAtomName);\n      }\n      var occupancy = parseFloat(line.substr(54, 6).trim());\n      var tempFactor = parseFloat(line.substr(60, 6).trim());\n      var atom = this._currRes.addAtom(atomName, pos, element, isHetatm, isNaN(occupancy) ? null : occupancy, isNaN(tempFactor) ? null : tempFactor);\n      if (this._options.conectRecords) {\n        var serial = parseInt(line.substr(6, 5).trim(), 10);\n        this._serialToAtomMap[serial] = atom;\n      }\n      return true;\n    },\n    parseConectRecord: function (line) {\n      var atomSerial = parseInt(line.substr(6, 5).trim(), 10);\n      var bondPartnerIds = [];\n      for (var i = 0; i < 4; ++i) {\n        var partnerId = parseInt(line.substr(11 + i * 5, 6).trim(), 10);\n        if (isNaN(partnerId)) {\n          continue;\n        }\n        if (partnerId > atomSerial) {\n          continue;\n        }\n        bondPartnerIds.push(partnerId);\n      }\n      this._conect.push({\n        from: atomSerial,\n        to: bondPartnerIds\n      });\n      return true;\n    },\n    processLine: function (line) {\n      var recordName = line.substr(0, 6);\n      if (recordName === 'ATOM  ' || recordName === 'HETATM') {\n        return this.parseAndAddAtom(line) ? this.CONTINUE : this.ERROR;\n      }\n      if (recordName === 'REMARK') {\n        var remarkNumber = line.substr(7, 3);\n        if (remarkNumber === '350') {\n          this._remark350Reader.nextLine(line);\n        }\n        return this.CONTINUE;\n      }\n      if (recordName === 'HELIX ') {\n        return this.parseHelixRecord(line) ? this.CONTINUE : this.ERROR;\n      }\n      if (recordName === 'SHEET ') {\n        return this.parseSheetRecord(line) ? this.CONTINUE : this.ERROR;\n      }\n      if (this._options.conectRecords && recordName === 'CONECT') {\n        return this.parseConectRecord(line) ? this.CONTINUE : this.ERROR;\n      }\n      if (recordName === 'END   ') {\n        return this.FILE_END;\n      }\n      if (recordName === 'ENDMDL') {\n        return this.MODEL_COMPLETE;\n      }\n      return this.CONTINUE;\n    },\n    finish: function () {\n      if (this._currChain === null) {\n        return null;\n      }\n      var chain = null;\n      var i;\n      for (i = 0; i < this._sheets.length; ++i) {\n        var sheet = this._sheets[i];\n        chain = this._structure.chain(sheet.chainName);\n        if (chain) {\n          chain.assignSS(sheet.first, sheet.last, 'E');\n        }\n      }\n      for (i = 0; i < this._helices.length; ++i) {\n        var helix = this._helices[i];\n        chain = this._structure.chain(helix.chainName);\n        if (chain) {\n          chain.assignSS(helix.first, helix.last, 'H');\n        }\n      }\n      this._structure.setAssemblies(this._remark350Reader.assemblies());\n      if (this._options.conectRecords) {\n        this._assignBondsFromConectRecords(this._structure);\n      }\n      this._structure.deriveConnectivity();\n      console.log('imported', this._structure.chains().length, 'chain(s),', this._structure.residueCount(), 'residue(s)');\n      var result = this._structure;\n      this._structure = new mol.Mol();\n      this._currChain = null;\n      this._currRes = null;\n      this._currAtom = null;\n      return result;\n    },\n    _assignBondsFromConectRecords: function (structure) {\n      for (var i = 0; i < this._conect.length; ++i) {\n        var record = this._conect[i];\n        var fromAtom = this._serialToAtomMap[record.from];\n        for (var j = 0; j < record.to.length; ++j) {\n          var toAtom = this._serialToAtomMap[record.to[j]];\n          structure.connect(fromAtom, toAtom);\n        }\n      }\n    }\n  };\n  function getLines(data) {\n    return data.split(/\\r\\n|\\r|\\n/g);\n  }\n  function pdb(text, options) {\n    console.time('pdb');\n    var opts = options || {};\n    var lines = getLines(text);\n    var reader = new PDBReader(opts);\n    var structures = [];\n    for (var i = 0; i < lines.length; i++) {\n      var result = reader.processLine(lines[i]);\n      if (result === reader.ERROR) {\n        console.timeEnd('pdb');\n        return null;\n      }\n      if (result === reader.CONTINUE) {\n        continue;\n      }\n      var struct = reader.finish();\n      if (struct !== null) {\n        structures.push(struct);\n      }\n      if (result === reader.MODEL_COMPLETE && opts.loadAllModels) {\n        continue;\n      }\n      break;\n    }\n    var structure = reader.finish();\n    if (structure !== null) {\n      structures.push(structure);\n    }\n    console.timeEnd('pdb');\n    if (opts.loadAllModels) {\n      return structures;\n    }\n    return structures[0];\n  }\n  function SDFReader() {\n    this._structure = new mol.Mol();\n    this._reset();\n    this._sawEnd = false;\n  }\n  SDFReader.prototype = {\n    processLine: function (line) {\n      var state = this._state;\n      if (state < 3) {\n        if (state === 0) {\n          var trimmed = line.trim();\n          if (trimmed.length === 0) {\n            return false;\n          }\n          this._title = trimmed;\n        }\n        this._sawEnd = false;\n        this._state++;\n        return true;\n      }\n      if (state === 3) {\n        this._expectedAtomCount = parseInt(line.substr(0, 3).trim(), 10);\n        this._expectedBondCount = parseInt(line.substr(3, 3).trim(), 10);\n        if (isNaN(this._expectedAtomCount) || isNaN(this._expectedBondCount)) {\n          console.error('invalid bond definition');\n          return false;\n        }\n        this._state++;\n        var chainName = '' + (this._structure.chains().length + 1);\n        this._currentChain = this._structure.addChain(chainName);\n        this._currentResidue = this._currentChain.addResidue(this._title, 1);\n      }\n      if (state === 4) {\n        var pos = [\n          0,\n          0,\n          0\n        ];\n        for (var i = 0; i < 3; ++i) {\n          pos[i] = parseFloat(line.substr(i * 10, 10).trim());\n          if (isNaN(pos[i])) {\n            console.error('invalid atom position');\n            return false;\n          }\n        }\n        var element = line.substr(31, 3).trim();\n        this._currentResidue.addAtom(element, pos, element, false);\n        this._atomCount++;\n        if (this._atomCount === this._expectedAtomCount) {\n          this._state++;\n        }\n      }\n      if (state === 5) {\n        var firstAtomIndex = parseInt(line.substr(0, 3).trim(), 10) - 1;\n        var secondAtomIndex = parseInt(line.substr(3, 3).trim(), 10) - 1;\n        if (isNaN(firstAtomIndex) || isNaN(secondAtomIndex)) {\n          console.error('invalid bond definition');\n          return false;\n        }\n        var atoms = this._currentResidue.atoms();\n        this._structure.connect(atoms[firstAtomIndex], atoms[secondAtomIndex]);\n        this._bondCount++;\n        if (this._bondCount === this._expectedBondCount) {\n          this._state++;\n        }\n      }\n      if (line.substr(0, 6) === 'M  END') {\n        this._sawEnd = true;\n        this._state++;\n      }\n      if (line.substr(0, 4) === '$$$$') {\n        this._reset();\n      }\n      return true;\n    },\n    _reset: function () {\n      this._state = 0;\n      this._currentResidue = null;\n      this._currentChain = null;\n      this._expectedAtomCount = null;\n      this._expectedBondount = null;\n      this._atomCount = 0;\n      this._bondCount = 0;\n      this._title = '';\n    },\n    finish: function () {\n      if (!this._sawEnd) {\n        console.error('truncated SDF file');\n        return null;\n      }\n      return this._structure;\n    }\n  };\n  function sdf(text) {\n    console.time('sdf');\n    var reader = new SDFReader();\n    var lines = getLines(text);\n    for (var i = 0; i < lines.length; i++) {\n      if (!reader.processLine(lines[i])) {\n        break;\n      }\n    }\n    var structure = reader.finish();\n    console.timeEnd('sdf');\n    return structure;\n  }\n  function fetch(url, callback) {\n    var oReq = new XMLHttpRequest();\n    oReq.open('GET', url, true);\n    oReq.onload = function () {\n      if (oReq.response) {\n        callback(oReq.response);\n      }\n    };\n    oReq.send(null);\n  }\n  function fetchPdb(url, callback, options) {\n    fetch(url, function (data) {\n      var structure = pdb(data, options);\n      callback(structure);\n    });\n  }\n  function fetchSdf(url, callback) {\n    fetch(url, function (data) {\n      var structure = sdf(data);\n      callback(structure);\n    });\n  }\n  return {\n    pdb: pdb,\n    sdf: sdf,\n    Remark350Reader: Remark350Reader,\n    fetchPdb: fetchPdb,\n    fetchSdf: fetchSdf,\n    guessAtomElementFromName: guessAtomElementFromName\n  };\n}(molSymmetry);\nviewpoint = function () {\n  \n  var vec3 = glMatrix.vec3;\n  var mat3 = glMatrix.mat3;\n  var calculateCovariance = function () {\n    var center = vec3.create();\n    var shiftedPos = vec3.create();\n    return function (go, covariance) {\n      vec3.set(center, 0, 0, 0);\n      var atomCount = 0;\n      go.eachCentralAtom(function (atom, transformedPos) {\n        vec3.add(center, center, transformedPos);\n        atomCount += 1;\n      });\n      if (atomCount === 0) {\n        return;\n      }\n      vec3.scale(center, center, 1 / atomCount);\n      covariance[0] = 0;\n      covariance[1] = 0;\n      covariance[2] = 0;\n      covariance[3] = 0;\n      covariance[4] = 0;\n      covariance[5] = 0;\n      covariance[6] = 0;\n      covariance[7] = 0;\n      covariance[8] = 0;\n      go.eachCentralAtom(function (atom, transformedPos) {\n        vec3.sub(shiftedPos, transformedPos, center);\n        var x = shiftedPos[0], y = shiftedPos[1], z = shiftedPos[2];\n        covariance[0] += y * y + z * z;\n        covariance[1] -= x * y;\n        covariance[2] -= x * z;\n        covariance[5] -= y * z;\n        covariance[4] += x * x + z * z;\n        covariance[8] += x * x + y * y;\n      });\n      covariance[3] = covariance[1];\n      covariance[6] = covariance[2];\n      covariance[7] = covariance[5];\n    };\n  }();\n  var principalAxes = function () {\n    var covariance = mat3.create();\n    var diag = mat3.create();\n    var min = vec3.create();\n    var max = vec3.create();\n    var projected = vec3.create();\n    var range = vec3.create();\n    var x = vec3.create();\n    var y = vec3.create();\n    var z = vec3.create();\n    return function (go) {\n      calculateCovariance(go, covariance);\n      var q = geom.diagonalizer(covariance);\n      mat3.fromQuat(diag, q);\n      var first = true;\n      go.eachCentralAtom(function (atom, transformedPos) {\n        vec3.transformMat3(projected, transformedPos, diag);\n        if (first) {\n          vec3.copy(min, projected);\n          vec3.copy(max, projected);\n          first = false;\n        } else {\n          vec3.min(min, min, projected);\n          vec3.max(max, max, projected);\n        }\n      });\n      vec3.sub(range, max, min);\n      var axes = [\n        [\n          range[0],\n          0\n        ],\n        [\n          range[1],\n          1\n        ],\n        [\n          range[2],\n          2\n        ]\n      ];\n      axes.sort(function (a, b) {\n        return b[0] - a[0];\n      });\n      var xIndex = axes[0][1];\n      var yIndex = axes[1][1];\n      vec3.set(x, diag[xIndex + 0], diag[xIndex + 3], diag[xIndex + 6]);\n      vec3.set(y, diag[yIndex + 0], diag[yIndex + 3], diag[yIndex + 6]);\n      vec3.cross(z, x, y);\n      var rotation = mat3.create();\n      rotation[0] = x[0];\n      rotation[1] = y[0];\n      rotation[2] = z[0];\n      rotation[3] = x[1];\n      rotation[4] = y[1];\n      rotation[5] = z[1];\n      rotation[6] = x[2];\n      rotation[7] = y[2];\n      rotation[8] = z[2];\n      return rotation;\n    };\n  }();\n  return { principalAxes: principalAxes };\n}();\npv = function () {\n  \n  return {\n    Viewer: viewer.Viewer,\n    isWebGLSupported: viewer.isWebGLSupported,\n    io: io,\n    color: color,\n    mol: mol,\n    rgb: {\n      setColorPalette: color.setColorPalette,\n      hex2rgb: color.hex2rgb\n    },\n    vec3: glMatrix.vec3,\n    vec4: glMatrix.vec4,\n    mat3: glMatrix.mat3,\n    mat4: glMatrix.mat4,\n    quat: glMatrix.quat,\n    viewpoint: viewpoint\n  };\n}();return pv; }));","import * as pv from \"bio-pv\";\n\nwindow.bundleEntries = window.bundleEntries || {};\nwindow.bundleEntries.load = function (options) {\n    var settings = options.chart.settings;\n    var viewer = pv.Viewer(document.getElementById(options.targets[0]), {\n        quality: settings.get(\"quality\"),\n        width: \"auto\",\n        height: \"auto\",\n        antialias: true,\n        outline: true,\n    });\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", options.dataset.download_url);\n    xhr.onload = function () {\n        if (xhr.status === 200) {\n            var structure = pv.io.pdb(xhr.response);\n            var viewer_options = {};\n            for (const [key, value] of Object.entries(settings.attributes)) {\n                viewer_options[key.replace(\"viewer|\", \"\")] = value;\n            }\n            viewer.clear();\n            viewer.renderAs(\"protein\", structure, viewer_options.mode, viewer_options);\n            viewer.centerOn(structure);\n            viewer.autoZoom();\n            options.chart.state(\"ok\", \"Chart drawn.\");\n            options.process.resolve();\n        } else {\n            options.chart.state(\"ok\", \"Failed to load pdb file.\");\n            options.process.resolve();\n        }\n    };\n    xhr.send();\n    window.onresize = function () {\n        viewer.fitParent();\n    };\n};\n"]}