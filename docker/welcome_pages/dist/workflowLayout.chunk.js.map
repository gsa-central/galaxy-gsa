{"version":3,"sources":["webpack:///./src/components/Workflow/Editor/modules/layout.js"],"names":["elk","ELK","autoLayout","workflow","hasChanges","newgraph","id","layoutOptions","children","edges","Object","values","nodes","map","node","inputs","keys","inputTerminals","t","idx","_uid","properties","outputs","outputTerminals","height","$","element","width","ports","concat","forEach","connectors","c","push","outputHandle","sources","name","targets","inputHandle","layout","then","x","q","filter","css","top","y","left","onRedraw","console","error"],"mappings":"4FAAA,gFAEMA,EAAM,IAFZ,OAEgBC,GAET,SAASC,EAAWC,GACvBA,EAASC,YAAa,EAGtB,IAAIC,EAAW,CACXC,GAAI,GACJC,cAAe,CACX,gBAAiB,UACjB,wCAAwC,EACxC,yBAA0B,mBAE9BC,SAAU,GACVC,MAAO,IAGXJ,EAASG,SAAWE,OAAOC,OAAOR,EAASS,OAAOC,KAAI,SAACC,GACnD,IAAIC,EAASL,OAAOM,KAAKF,EAAKG,gBAAgBJ,KAAI,SAACK,EAAGC,GAClD,MAAO,CACHb,GAAI,GAAF,OAAKQ,EAAKM,KAAV,eAAqBF,GACvBG,WAAY,CACR,YAAa,OACb,aAAcF,OAKtBG,EAAUZ,OAAOM,KAAKF,EAAKS,iBAAiBV,KAAI,SAACK,EAAGC,GACpD,MAAO,CACHb,GAAI,GAAF,OAAKQ,EAAKM,KAAV,gBAAsBF,GACxBG,WAAY,CACR,YAAa,OACb,aAAcF,OAK1B,MAAO,CACHb,GAAIQ,EAAKM,KACTI,OAAQC,IAAEX,EAAKY,SAASF,SAAW,GACnCG,MAAOF,IAAEX,EAAKY,SAASC,QAAU,GACjCC,MAAOb,EAAOc,OAAOP,OAI7BZ,OAAOC,OAAOR,EAASS,OAAOkB,SAAQ,SAAChB,GACnCJ,OAAOC,OAAOG,EAAKG,gBAAgBa,SAAQ,SAACZ,GACxCA,EAAEa,WAAWD,SAAQ,SAACE,GAClB3B,EAASI,MAAMwB,KAAK,CAChB3B,GAAI,KAAF,OAAOQ,EAAKM,KAAZ,YAAoBY,EAAEE,aAAapB,KAAKM,MAC1Ce,QAAS,CAAC,GAAD,OAAIH,EAAEE,aAAapB,KAAKM,KAAxB,gBAAoCY,EAAEE,aAAaE,OAC5DC,QAAS,CAAC,GAAD,OAAIL,EAAEM,YAAYxB,KAAKM,KAAvB,eAAkCY,EAAEM,YAAYF,kBAMzEpC,EAAIuC,OAAOlC,GACNmC,MAAK,SAACC,GAEHA,EAAEjC,SAASsB,SAAQ,SAACY,GAChB,IAAI5B,EAAOJ,OAAOC,OAAOR,EAASS,OAAO+B,QAAO,SAACF,GAC7C,OAAOA,EAAErB,OAASsB,EAAEpC,MACrB,GACGoB,EAAUD,IAAEX,EAAKY,SACvBD,IAAEC,GAASkB,IAAI,CAAEC,IAAKH,EAAEI,EAAGC,KAAML,EAAED,OAGvC/B,OAAOC,OAAOR,EAASS,OAAOkB,SAAQ,SAAChB,GACnCA,EAAKkC,iBAZjB,MAeWC,QAAQC","file":"workflowLayout.chunk.js","sourcesContent":["import $ from \"jquery\";\nimport ELK from \"elkjs/lib/elk.bundled.js\";\nconst elk = new ELK();\n\nexport function autoLayout(workflow) {\n    workflow.hasChanges = true;\n\n    // Convert this to ELK compat.\n    var newgraph = {\n        id: \"\",\n        layoutOptions: {\n            \"elk.algorithm\": \"layered\",\n            \"crossingMinimization.semiInteractive\": true,\n            \"nodePlacement.strategy\": \"NETWORK_SIMPLEX\",\n        },\n        children: [],\n        edges: [],\n    };\n\n    newgraph.children = Object.values(workflow.nodes).map((node) => {\n        var inputs = Object.keys(node.inputTerminals).map((t, idx) => {\n            return {\n                id: `${node._uid}/in/${t}`,\n                properties: {\n                    \"port.side\": \"WEST\",\n                    \"port.index\": idx,\n                },\n            };\n        });\n\n        var outputs = Object.keys(node.outputTerminals).map((t, idx) => {\n            return {\n                id: `${node._uid}/out/${t}`,\n                properties: {\n                    \"port.side\": \"EAST\",\n                    \"port.index\": idx,\n                },\n            };\n        });\n\n        return {\n            id: node._uid,\n            height: $(node.element).height() + 20,\n            width: $(node.element).width() + 60,\n            ports: inputs.concat(outputs),\n        };\n    });\n\n    Object.values(workflow.nodes).forEach((node) => {\n        Object.values(node.inputTerminals).forEach((t) => {\n            t.connectors.forEach((c) => {\n                newgraph.edges.push({\n                    id: `e_${node._uid}_${c.outputHandle.node._uid}`,\n                    sources: [`${c.outputHandle.node._uid}/out/${c.outputHandle.name}`],\n                    targets: [`${c.inputHandle.node._uid}/in/${c.inputHandle.name}`],\n                });\n            });\n        });\n    });\n\n    elk.layout(newgraph)\n        .then((x) => {\n            // Reapply positions to galaxy graph from our relayed out graph.\n            x.children.forEach((q) => {\n                var node = Object.values(workflow.nodes).filter((x) => {\n                    return x._uid === q.id;\n                })[0];\n                const element = $(node.element);\n                $(element).css({ top: q.y, left: q.x });\n            });\n\n            Object.values(workflow.nodes).forEach((node) => {\n                node.onRedraw();\n            });\n        })\n        .catch(console.error);\n}\n"],"sourceRoot":""}